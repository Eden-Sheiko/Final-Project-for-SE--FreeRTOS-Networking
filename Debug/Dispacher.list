
Dispacher.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016528  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030f0  080166f8  080166f8  000266f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080197e8  080197e8  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  080197e8  080197e8  000297e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080197f0  080197f0  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080197f0  080197f0  000297f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080197f4  080197f4  000297f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080197f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000b8  080198b0  000300b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000158  08019950  00030158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00040c30  200001f8  080199f0  000301f8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20040e28  080199f0  00030e28  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003729f  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008128  00000000  00000000  000674c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025c8  00000000  00000000  0006f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002408  00000000  00000000  00071bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038957  00000000  00000000  00073fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003bbee  00000000  00000000  000ac917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00117d24  00000000  00000000  000e8505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00200229  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a6fc  00000000  00000000  0020027c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080166e0 	.word	0x080166e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	080166e0 	.word	0x080166e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000214 	.word	0x20000214
 80005f4:	200002c8 	.word	0x200002c8

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fd75 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f821 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8e5 	bl	80007d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f885 	bl	8000718 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800060e:	f000 f8b3 	bl	8000778 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  server_main();
 8000612:	f014 f943 	bl	801489c <server_main>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <main+0x48>)
 8000618:	1d3c      	adds	r4, r7, #4
 800061a:	461d      	mov	r5, r3
 800061c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f005 ff43 	bl	80064b8 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a03      	ldr	r2, [pc, #12]	; (8000644 <main+0x4c>)
 8000636:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000638:	f005 ff27 	bl	800648a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x44>
 800063e:	bf00      	nop
 8000640:	08016704 	.word	0x08016704
 8000644:	20000a58 	.word	0x20000a58

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f014 fe45 	bl	80152e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800066c:	f002 fc48 	bl	8002f00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	4b27      	ldr	r3, [pc, #156]	; (8000710 <SystemClock_Config+0xc8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a26      	ldr	r2, [pc, #152]	; (8000710 <SystemClock_Config+0xc8>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xc8>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a20      	ldr	r2, [pc, #128]	; (8000714 <SystemClock_Config+0xcc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <SystemClock_Config+0xcc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006bc:	2348      	movs	r3, #72	; 0x48
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006c4:	2303      	movs	r3, #3
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fc27 	bl	8002f20 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 f93a 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2102      	movs	r1, #2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 feb5 	bl	8003468 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000704:	f000 f924 	bl	8000950 <Error_Handler>
  }
}
 8000708:	bf00      	nop
 800070a:	3750      	adds	r7, #80	; 0x50
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800071e:	4a15      	ldr	r2, [pc, #84]	; (8000774 <MX_USART3_UART_Init+0x5c>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x58>)
 800075c:	f003 ffac 	bl	80046b8 <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f8f3 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200004c8 	.word	0x200004c8
 8000774:	40004800 	.word	0x40004800

08000778 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800077c:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000782:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2206      	movs	r2, #6
 8000788:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2202      	movs	r2, #2
 800079a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2201      	movs	r2, #1
 80007a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007bc:	f002 fa57 	bl	8002c6e <HAL_PCD_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f8c3 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000550 	.word	0x20000550

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b47      	ldr	r3, [pc, #284]	; (8000908 <MX_GPIO_Init+0x134>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a46      	ldr	r2, [pc, #280]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b44      	ldr	r3, [pc, #272]	; (8000908 <MX_GPIO_Init+0x134>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	61bb      	str	r3, [r7, #24]
 8000800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b41      	ldr	r3, [pc, #260]	; (8000908 <MX_GPIO_Init+0x134>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a40      	ldr	r2, [pc, #256]	; (8000908 <MX_GPIO_Init+0x134>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b3e      	ldr	r3, [pc, #248]	; (8000908 <MX_GPIO_Init+0x134>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <MX_GPIO_Init+0x134>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a3a      	ldr	r2, [pc, #232]	; (8000908 <MX_GPIO_Init+0x134>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b38      	ldr	r3, [pc, #224]	; (8000908 <MX_GPIO_Init+0x134>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b35      	ldr	r3, [pc, #212]	; (8000908 <MX_GPIO_Init+0x134>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a34      	ldr	r2, [pc, #208]	; (8000908 <MX_GPIO_Init+0x134>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b32      	ldr	r3, [pc, #200]	; (8000908 <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084a:	4b2f      	ldr	r3, [pc, #188]	; (8000908 <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a2e      	ldr	r2, [pc, #184]	; (8000908 <MX_GPIO_Init+0x134>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b2c      	ldr	r3, [pc, #176]	; (8000908 <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	4b29      	ldr	r3, [pc, #164]	; (8000908 <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a28      	ldr	r2, [pc, #160]	; (8000908 <MX_GPIO_Init+0x134>)
 8000868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000880:	4822      	ldr	r0, [pc, #136]	; (800090c <MX_GPIO_Init+0x138>)
 8000882:	f002 f9c1 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	; 0x40
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x13c>)
 800088c:	f002 f9bc 	bl	8002c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481b      	ldr	r0, [pc, #108]	; (8000914 <MX_GPIO_Init+0x140>)
 80008a8:	f002 f802 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_GPIO_Init+0x138>)
 80008c6:	f001 fff3 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ca:	2340      	movs	r3, #64	; 0x40
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008e2:	f001 ffe5 	bl	80028b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_GPIO_Init+0x13c>)
 80008fa:	f001 ffd9 	bl	80028b0 <HAL_GPIO_Init>

}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020400 	.word	0x40020400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020800 	.word	0x40020800

08000918 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000920:	f004 ff58 	bl	80057d4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000924:	2001      	movs	r0, #1
 8000926:	f005 fe13 	bl	8006550 <osDelay>
 800092a:	e7fb      	b.n	8000924 <StartDefaultTask+0xc>

0800092c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093e:	f000 fbe3 	bl	8001108 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010000 	.word	0x40010000

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	f06f 0001 	mvn.w	r0, #1
 800099a:	f000 fcb1 	bl	8001300 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800

080009ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b0aa      	sub	sp, #168	; 0xa8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	2284      	movs	r2, #132	; 0x84
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f014 fc8a 	bl	80152e6 <memset>
  if(huart->Instance==USART3)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <HAL_UART_MspInit+0xb4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d13c      	bne.n	8000a56 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 ff94 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009f6:	f7ff ffab 	bl	8000950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_UART_MspInit+0xb8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a44:	2307      	movs	r3, #7
 8000a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <HAL_UART_MspInit+0xbc>)
 8000a52:	f001 ff2d 	bl	80028b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	37a8      	adds	r7, #168	; 0xa8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40004800 	.word	0x40004800
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020c00 	.word	0x40020c00

08000a6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b0ac      	sub	sp, #176	; 0xb0
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	2284      	movs	r2, #132	; 0x84
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f014 fc2a 	bl	80152e6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a9a:	d159      	bne.n	8000b50 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000aa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	4618      	mov	r0, r3
 8000aae:	f002 ff33 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ab8:	f7ff ff4a 	bl	8000950 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a25      	ldr	r2, [pc, #148]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ad4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000aee:	230a      	movs	r3, #10
 8000af0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af8:	4619      	mov	r1, r3
 8000afa:	4818      	ldr	r0, [pc, #96]	; (8000b5c <HAL_PCD_MspInit+0xf0>)
 8000afc:	f001 fed8 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4810      	ldr	r0, [pc, #64]	; (8000b5c <HAL_PCD_MspInit+0xf0>)
 8000b1c:	f001 fec8 	bl	80028b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6453      	str	r3, [r2, #68]	; 0x44
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <HAL_PCD_MspInit+0xec>)
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	37b0      	adds	r7, #176	; 0xb0
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_InitTick+0xcc>)
 8000b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b74:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <HAL_InitTick+0xcc>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_InitTick+0xcc>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	f107 020c 	add.w	r2, r7, #12
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 fe8e 	bl	80038b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b98:	f002 fe78 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8000b9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba0:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <HAL_InitTick+0xd0>)
 8000ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba6:	0c9b      	lsrs	r3, r3, #18
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bac:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <HAL_InitTick+0xd8>)
 8000bb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bba:	4a1e      	ldr	r2, [pc, #120]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bd2:	4818      	ldr	r0, [pc, #96]	; (8000c34 <HAL_InitTick+0xd4>)
 8000bd4:	f003 fa90 	bl	80040f8 <HAL_TIM_Base_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d11b      	bne.n	8000c1e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000be6:	4813      	ldr	r0, [pc, #76]	; (8000c34 <HAL_InitTick+0xd4>)
 8000be8:	f003 fae8 	bl	80041bc <HAL_TIM_Base_Start_IT>
 8000bec:	4603      	mov	r3, r0
 8000bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d111      	bne.n	8000c1e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bfa:	2019      	movs	r0, #25
 8000bfc:	f000 fb9c 	bl	8001338 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d808      	bhi.n	8000c18 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c06:	2200      	movs	r2, #0
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2019      	movs	r0, #25
 8000c0c:	f000 fb78 	bl	8001300 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c10:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_InitTick+0xdc>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e002      	b.n	8000c1e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000a5c 	.word	0x20000a5c
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c72:	f003 fb1b 	bl	80042ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000a5c 	.word	0x20000a5c

08000c80 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <ETH_IRQHandler+0x10>)
 8000c86:	f000 ff3f 	bl	8001b08 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20005490 	.word	0x20005490

08000c94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
	return 1;
 8000c98:	2301      	movs	r3, #1
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <_kill>:

int _kill(int pid, int sig)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <_kill+0x20>)
 8000cb0:	2216      	movs	r2, #22
 8000cb2:	601a      	str	r2, [r3, #0]
	return -1;
 8000cb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	20040e24 	.word	0x20040e24

08000cc8 <_exit>:

void _exit (int status)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffe5 	bl	8000ca4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cda:	e7fe      	b.n	8000cda <_exit+0x12>

08000cdc <_close>:
	}
	return len;
}

int _close(int file)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_isatty>:

int _isatty(int file)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1c:	2301      	movs	r3, #1
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	60f8      	str	r0, [r7, #12]
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
	return 0;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d205      	bcs.n	8000d80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <_sbrk+0x6c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	371c      	adds	r7, #28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	20050000 	.word	0x20050000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	20000aa8 	.word	0x20000aa8
 8000dac:	20040e28 	.word	0x20040e28
 8000db0:	20040e24 	.word	0x20040e24

08000db4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
	  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	; (8000e24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e02:	f7ff ffd7 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f014 fa0f 	bl	8015228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fbf5 	bl	80005f8 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
	  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000e1c:	080197f8 	.word	0x080197f8
  ldr r2, =_sbss
 8000e20:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8000e24:	20040e28 	.word	0x20040e28

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>

08000e2a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
 8000e32:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00b      	beq.n	8000e52 <LAN8742_RegisterBusIO+0x28>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <LAN8742_RegisterBusIO+0x28>
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d003      	beq.n	8000e52 <LAN8742_RegisterBusIO+0x28>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	691b      	ldr	r3, [r3, #16]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e52:	f04f 33ff 	mov.w	r3, #4294967295
 8000e56:	e014      	b.n	8000e82 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d17c      	bne.n	8000fa8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e01c      	b.n	8000f02 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	695b      	ldr	r3, [r3, #20]
 8000ecc:	f107 0208 	add.w	r2, r7, #8
 8000ed0:	2112      	movs	r1, #18
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	4798      	blx	r3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da03      	bge.n	8000ee4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000edc:	f06f 0304 	mvn.w	r3, #4
 8000ee0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000ee2:	e00b      	b.n	8000efc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	f003 031f 	and.w	r3, r3, #31
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d105      	bne.n	8000efc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
         break;
 8000efa:	e005      	b.n	8000f08 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2b1f      	cmp	r3, #31
 8000f06:	d9df      	bls.n	8000ec8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b1f      	cmp	r3, #31
 8000f0e:	d902      	bls.n	8000f16 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f10:	f06f 0302 	mvn.w	r3, #2
 8000f14:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d145      	bne.n	8000fa8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6810      	ldr	r0, [r2, #0]
 8000f24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4798      	blx	r3
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db37      	blt.n	8000fa2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6810      	ldr	r0, [r2, #0]
 8000f3a:	f107 0208 	add.w	r2, r7, #8
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4798      	blx	r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db28      	blt.n	8000f9a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4798      	blx	r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f52:	e01c      	b.n	8000f8e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4798      	blx	r3
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f66:	d80e      	bhi.n	8000f86 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6810      	ldr	r0, [r2, #0]
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	2100      	movs	r1, #0
 8000f76:	4798      	blx	r3
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	da07      	bge.n	8000f8e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000f7e:	f06f 0304 	mvn.w	r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
                 break;
 8000f84:	e010      	b.n	8000fa8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f86:	f06f 0301 	mvn.w	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
               break;
 8000f8c:	e00c      	b.n	8000fa8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1dd      	bne.n	8000f54 <LAN8742_Init+0xc6>
 8000f98:	e006      	b.n	8000fa8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000f9a:	f06f 0304 	mvn.w	r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	e002      	b.n	8000fa8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000fa2:	f06f 0303 	mvn.w	r3, #3
 8000fa6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d112      	bne.n	8000fd4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4798      	blx	r3
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000fb8:	bf00      	nop
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4798      	blx	r3
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fcc:	d9f5      	bls.n	8000fba <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 }
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6810      	ldr	r0, [r2, #0]
 8000ff2:	f107 020c 	add.w	r2, r7, #12
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	4798      	blx	r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	da02      	bge.n	8001006 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001000:	f06f 0304 	mvn.w	r3, #4
 8001004:	e06e      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6810      	ldr	r0, [r2, #0]
 800100e:	f107 020c 	add.w	r2, r7, #12
 8001012:	2101      	movs	r1, #1
 8001014:	4798      	blx	r3
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	da02      	bge.n	8001022 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800101c:	f06f 0304 	mvn.w	r3, #4
 8001020:	e060      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800102c:	2301      	movs	r3, #1
 800102e:	e059      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6810      	ldr	r0, [r2, #0]
 8001038:	f107 020c 	add.w	r2, r7, #12
 800103c:	2100      	movs	r1, #0
 800103e:	4798      	blx	r3
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	da02      	bge.n	800104c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001046:	f06f 0304 	mvn.w	r3, #4
 800104a:	e04b      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d11b      	bne.n	800108e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <LAN8742_GetLinkState+0x90>
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800106a:	2302      	movs	r3, #2
 800106c:	e03a      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001078:	2303      	movs	r3, #3
 800107a:	e033      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001086:	2304      	movs	r3, #4
 8001088:	e02c      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800108a:	2305      	movs	r3, #5
 800108c:	e02a      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	6810      	ldr	r0, [r2, #0]
 8001096:	f107 020c 	add.w	r2, r7, #12
 800109a:	211f      	movs	r1, #31
 800109c:	4798      	blx	r3
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	da02      	bge.n	80010aa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010a4:	f06f 0304 	mvn.w	r3, #4
 80010a8:	e01c      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010b4:	2306      	movs	r3, #6
 80010b6:	e015      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 031c 	and.w	r3, r3, #28
 80010be:	2b18      	cmp	r3, #24
 80010c0:	d101      	bne.n	80010c6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010c2:	2302      	movs	r3, #2
 80010c4:	e00e      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f003 031c 	and.w	r3, r3, #28
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d101      	bne.n	80010d4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e007      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 031c 	and.w	r3, r3, #28
 80010da:	2b14      	cmp	r3, #20
 80010dc:	d101      	bne.n	80010e2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010de:	2304      	movs	r3, #4
 80010e0:	e000      	b.n	80010e4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010e2:	2305      	movs	r3, #5
    }				
  }
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f8fa 	bl	80012ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	200f      	movs	r0, #15
 80010f8:	f7ff fd32 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fc2e 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000aac 	.word	0x20000aac

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000aac 	.word	0x20000aac

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0000 	.word	0x05fa0000

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff4c 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001312:	f7ff ff61 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001316:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	6978      	ldr	r0, [r7, #20]
 800131e:	f7ff ffb1 	bl	8001284 <NVIC_EncodePriority>
 8001322:	4602      	mov	r2, r0
 8001324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff80 	bl	8001230 <__NVIC_SetPriority>
}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff54 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e06a      	b.n	800143c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800136c:	2b00      	cmp	r3, #0
 800136e:	d106      	bne.n	800137e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2223      	movs	r2, #35	; 0x23
 8001374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f004 fe43 	bl	8006004 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <HAL_ETH_Init+0xf0>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <HAL_ETH_Init+0xf0>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <HAL_ETH_Init+0xf0>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_ETH_Init+0xf4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a2b      	ldr	r2, [pc, #172]	; (8001448 <HAL_ETH_Init+0xf4>)
 800139c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013a0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <HAL_ETH_Init+0xf4>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4927      	ldr	r1, [pc, #156]	; (8001448 <HAL_ETH_Init+0xf4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <HAL_ETH_Init+0xf4>)
 80013b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff feb0 	bl	8001130 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013d2:	e011      	b.n	80013f8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013d4:	f7ff feac 	bl	8001130 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013e2:	d909      	bls.n	80013f8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2204      	movs	r2, #4
 80013e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	22e0      	movs	r2, #224	; 0xe0
 80013f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e021      	b.n	800143c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e4      	bne.n	80013d4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 ffac 	bl	8002368 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f001 f853 	bl	80024bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f001 f8a9 	bl	800256e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	461a      	mov	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f001 f811 	bl	800244c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2210      	movs	r2, #16
 8001436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800

0800144c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800145a:	2b10      	cmp	r3, #16
 800145c:	d150      	bne.n	8001500 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2223      	movs	r2, #35	; 0x23
 8001462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2204      	movs	r2, #4
 800146a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa7b 	bl	8001968 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0208 	orr.w	r2, r2, #8
 8001480:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff fe5c 	bl	8001148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0204 	orr.w	r2, r2, #4
 80014a6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014b0:	2001      	movs	r0, #1
 80014b2:	f7ff fe49 	bl	8001148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fdf3 	bl	80020aa <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014da:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014f2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2223      	movs	r2, #35	; 0x23
 80014f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014fc:	2300      	movs	r3, #0
 80014fe:	e000      	b.n	8001502 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
  }
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800151a:	2b10      	cmp	r3, #16
 800151c:	d17b      	bne.n	8001616 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2223      	movs	r2, #35	; 0x23
 8001522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800153a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <HAL_ETH_Start_IT+0x114>)
 800154a:	430b      	orrs	r3, r1
 800154c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001560:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2204      	movs	r2, #4
 8001568:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f9fc 	bl	8001968 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0208 	orr.w	r2, r2, #8
 800157e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001588:	2001      	movs	r0, #1
 800158a:	f7ff fddd 	bl	8001148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0204 	orr.w	r2, r2, #4
 80015a4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fdca 	bl	8001148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fd74 	bl	80020aa <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015f0:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	69d9      	ldr	r1, [r3, #28]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_ETH_Start_IT+0x118>)
 8001602:	430b      	orrs	r3, r1
 8001604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001608:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2223      	movs	r2, #35	; 0x23
 800160e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
  }
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	00020060 	.word	0x00020060
 8001624:	0001a0c1 	.word	0x0001a0c1

08001628 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001636:	2b23      	cmp	r3, #35	; 0x23
 8001638:	d16e      	bne.n	8001718 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2223      	movs	r2, #35	; 0x23
 800163e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164a:	69d9      	ldr	r1, [r3, #28]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b34      	ldr	r3, [pc, #208]	; (8001724 <HAL_ETH_Stop_IT+0xfc>)
 8001652:	400b      	ands	r3, r1
 8001654:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001658:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800166c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001670:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	f023 0302 	bic.w	r3, r3, #2
 8001684:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001688:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0204 	bic.w	r2, r2, #4
 8001698:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff fd50 	bl	8001148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fcfa 	bl	80020aa <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0208 	bic.w	r2, r2, #8
 80016c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fd3a 	bl	8001148 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	e00e      	b.n	8001700 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	3212      	adds	r2, #18
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d9ed      	bls.n	80016e2 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2210      	movs	r2, #16
 8001710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
  }
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	fffe5f3e 	.word	0xfffe5f3e

08001728 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e045      	b.n	80017d8 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001752:	2b23      	cmp	r3, #35	; 0x23
 8001754:	d13f      	bne.n	80017d6 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800175e:	2201      	movs	r2, #1
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 ff70 	bl	8002648 <ETH_Prepare_Tx_Descriptors>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001774:	f043 0202 	orr.w	r2, r3, #2
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e02a      	b.n	80017d8 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001782:	f3bf 8f4f 	dsb	sy
}
 8001786:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	2b03      	cmp	r3, #3
 8001798:	d904      	bls.n	80017a4 <HAL_ETH_Transmit_IT+0x7c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	1f1a      	subs	r2, r3, #4
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00d      	beq.n	80017d2 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017be:	461a      	mov	r2, r3
 80017c0:	2304      	movs	r3, #4
 80017c2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	461a      	mov	r2, r3
 80017ce:	2300      	movs	r3, #0
 80017d0:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
  }
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0a8      	b.n	800195e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001812:	2b23      	cmp	r3, #35	; 0x23
 8001814:	d001      	beq.n	800181a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0a1      	b.n	800195e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	3212      	adds	r2, #18
 8001826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001830:	f1c3 0304 	rsb	r3, r3, #4
 8001834:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001836:	e06a      	b.n	800190e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	69da      	ldr	r2, [r3, #28]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185c:	2b00      	cmp	r3, #0
 800185e:	d103      	bne.n	8001868 <HAL_ETH_ReadData+0x88>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d040      	beq.n	80018ea <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800189c:	3b04      	subs	r3, #4
 800189e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018c4:	461a      	mov	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	f004 fd67 	bl	800639c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	441a      	add	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61fb      	str	r3, [r7, #28]
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d902      	bls.n	80018fc <HAL_ETH_ReadData+0x11c>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b04      	subs	r3, #4
 80018fa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	3212      	adds	r2, #18
 8001902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001906:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	db06      	blt.n	8001924 <HAL_ETH_ReadData+0x144>
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	429a      	cmp	r2, r3
 800191c:	d202      	bcs.n	8001924 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d089      	beq.n	8001838 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	441a      	add	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f815 	bl	8001968 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d108      	bne.n	800195c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	e000      	b.n	800195e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001974:	2301      	movs	r3, #1
 8001976:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800197c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	3212      	adds	r2, #18
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800198e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001990:	e040      	b.n	8001a14 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d112      	bne.n	80019c0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fccc 	bl	800633c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	74fb      	strb	r3, [r7, #19]
 80019ae:	e007      	b.n	80019c0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	461a      	mov	r2, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	461a      	mov	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80019c0:	7cfb      	ldrb	r3, [r7, #19]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d026      	beq.n	8001a14 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d103      	bne.n	80019d6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <ETH_UpdateDescriptor+0xe4>)
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	e003      	b.n	80019de <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80019dc:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80019de:	f3bf 8f5f 	dmb	sy
}
 80019e2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d902      	bls.n	8001a02 <ETH_UpdateDescriptor+0x9a>
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	3b04      	subs	r3, #4
 8001a00:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	3212      	adds	r2, #18
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <ETH_UpdateDescriptor+0xb8>
 8001a1a:	7cfb      	ldrb	r3, [r7, #19]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1b8      	bne.n	8001992 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d00c      	beq.n	8001a44 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a32:	461a      	mov	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	800045f8 	.word	0x800045f8

08001a50 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3318      	adds	r3, #24
 8001a5c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a62:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a6e:	e03f      	b.n	8001af0 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d106      	bne.n	8001a98 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001a98:	7bbb      	ldrb	r3, [r7, #14]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d028      	beq.n	8001af0 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68d9      	ldr	r1, [r3, #12]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db1b      	blt.n	8001aec <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f004 fcad 	bl	8006420 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	3304      	adds	r3, #4
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aea:	e001      	b.n	8001af0 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <HAL_ETH_ReleaseTxPacket+0xac>
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1b9      	bne.n	8001a70 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1e:	2b40      	cmp	r3, #64	; 0x40
 8001b20:	d112      	bne.n	8001b48 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b30:	2b40      	cmp	r3, #64	; 0x40
 8001b32:	d109      	bne.n	8001b48 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b50      	ldr	r3, [pc, #320]	; (8001c80 <HAL_ETH_IRQHandler+0x178>)
 8001b40:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f003 ffc2 	bl	8005acc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d113      	bne.n	8001b82 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10a      	bne.n	8001b82 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b74:	461a      	mov	r2, r3
 8001b76:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001b7a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f003 ffb5 	bl	8005aec <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b94:	d14c      	bne.n	8001c30 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ba8:	d142      	bne.n	8001c30 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb0:	f043 0208 	orr.w	r2, r3, #8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bcc:	d11a      	bne.n	8001c04 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd6:	695a      	ldr	r2, [r3, #20]
 8001bd8:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_ETH_IRQHandler+0x17c>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001bf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bf8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	22e0      	movs	r2, #224	; 0xe0
 8001bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c02:	e012      	b.n	8001c2a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c22:	461a      	mov	r2, r3
 8001c24:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c28:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f003 ff6e 	bl	8005b0c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d10e      	bne.n	8001c5c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f81c 	bl	8001c8c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_ETH_IRQHandler+0x180>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_ETH_IRQHandler+0x180>)
 8001c6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c6e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f815 	bl	8001ca0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	00010040 	.word	0x00010040
 8001c84:	007e2000 	.word	0x007e2000
 8001c88:	40013c00 	.word	0x40013c00

08001c8c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 031c 	and.w	r3, r3, #28
 8001cd0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	02db      	lsls	r3, r3, #11
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	019b      	lsls	r3, r3, #6
 8001ce2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f023 0302 	bic.w	r3, r3, #2
 8001cf2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d04:	f7ff fa14 	bl	8001130 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d0a:	e00d      	b.n	8001d28 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d0c:	f7ff fa10 	bl	8001130 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1a:	d301      	bcc.n	8001d20 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e010      	b.n	8001d42 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1ec      	bne.n	8001d0c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3718      	adds	r7, #24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 031c 	and.w	r3, r3, #28
 8001d66:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	02db      	lsls	r3, r3, #11
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	019b      	lsls	r3, r3, #6
 8001d78:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da4:	f7ff f9c4 	bl	8001130 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001daa:	e00d      	b.n	8001dc8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001dac:	f7ff f9c0 	bl	8001130 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dba:	d301      	bcc.n	8001dc0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e009      	b.n	8001dd4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ec      	bne.n	8001dac <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0d9      	b.n	8001fa4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf14      	ite	ne
 8001f0a:	2301      	movne	r3, #1
 8001f0c:	2300      	moveq	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	0c1b      	lsrs	r3, r3, #16
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf14      	ite	ne
 8001f78:	2301      	movne	r3, #1
 8001f7a:	2300      	moveq	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e00b      	b.n	8001fdc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d105      	bne.n	8001fda <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001fce:	6839      	ldr	r1, [r7, #0]
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f88f 	bl	80020f4 <ETH_SetMACConfig>

    return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
  }
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 031c 	bic.w	r3, r3, #28
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ffc:	f001 fc26 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8002000:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d908      	bls.n	800201c <HAL_ETH_SetMDIOClockRange+0x38>
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d804      	bhi.n	800201c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e027      	b.n	800206c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4a18      	ldr	r2, [pc, #96]	; (8002080 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d908      	bls.n	8002036 <HAL_ETH_SetMDIOClockRange+0x52>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4a17      	ldr	r2, [pc, #92]	; (8002084 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d204      	bcs.n	8002036 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f043 030c 	orr.w	r3, r3, #12
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e01a      	b.n	800206c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4a12      	ldr	r2, [pc, #72]	; (8002084 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d303      	bcc.n	8002046 <HAL_ETH_SetMDIOClockRange+0x62>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4a11      	ldr	r2, [pc, #68]	; (8002088 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d911      	bls.n	800206a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	4a0f      	ldr	r2, [pc, #60]	; (8002088 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d908      	bls.n	8002060 <HAL_ETH_SetMDIOClockRange+0x7c>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d804      	bhi.n	8002060 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f043 0304 	orr.w	r3, r3, #4
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e005      	b.n	800206c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f043 0310 	orr.w	r3, r3, #16
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e000      	b.n	800206c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800206a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	611a      	str	r2, [r3, #16]
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	01312cff 	.word	0x01312cff
 8002080:	02160ebf 	.word	0x02160ebf
 8002084:	03938700 	.word	0x03938700
 8002088:	05f5e0ff 	.word	0x05f5e0ff
 800208c:	08f0d17f 	.word	0x08f0d17f

08002090 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020da:	2001      	movs	r0, #1
 80020dc:	f7ff f834 	bl	8001148 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ea:	6193      	str	r3, [r2, #24]
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4b51      	ldr	r3, [pc, #324]	; (8002250 <ETH_SetMACConfig+0x15c>)
 800210a:	4013      	ands	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	7c1b      	ldrb	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <ETH_SetMACConfig+0x28>
 8002116:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800211a:	e000      	b.n	800211e <ETH_SetMACConfig+0x2a>
 800211c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	7c5b      	ldrb	r3, [r3, #17]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d102      	bne.n	800212c <ETH_SetMACConfig+0x38>
 8002126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800212a:	e000      	b.n	800212e <ETH_SetMACConfig+0x3a>
 800212c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800212e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002134:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7fdb      	ldrb	r3, [r3, #31]
 800213a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800213c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002142:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	7f92      	ldrb	r2, [r2, #30]
 8002148:	2a00      	cmp	r2, #0
 800214a:	d102      	bne.n	8002152 <ETH_SetMACConfig+0x5e>
 800214c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002150:	e000      	b.n	8002154 <ETH_SetMACConfig+0x60>
 8002152:	2200      	movs	r2, #0
                        macconf->Speed |
 8002154:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	7f1b      	ldrb	r3, [r3, #28]
 800215a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800215c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002162:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	791b      	ldrb	r3, [r3, #4]
 8002168:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800216a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002172:	2a00      	cmp	r2, #0
 8002174:	d102      	bne.n	800217c <ETH_SetMACConfig+0x88>
 8002176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217a:	e000      	b.n	800217e <ETH_SetMACConfig+0x8a>
 800217c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800217e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	7bdb      	ldrb	r3, [r3, #15]
 8002184:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002186:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800218c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002194:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002196:	4313      	orrs	r3, r2
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7fe ffca 	bl	8001148 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021ca:	4013      	ands	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d101      	bne.n	80021e2 <ETH_SetMACConfig+0xee>
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	e000      	b.n	80021e4 <ETH_SetMACConfig+0xf0>
 80021e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80021f2:	2a01      	cmp	r2, #1
 80021f4:	d101      	bne.n	80021fa <ETH_SetMACConfig+0x106>
 80021f6:	2208      	movs	r2, #8
 80021f8:	e000      	b.n	80021fc <ETH_SetMACConfig+0x108>
 80021fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80021fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002204:	2a01      	cmp	r2, #1
 8002206:	d101      	bne.n	800220c <ETH_SetMACConfig+0x118>
 8002208:	2204      	movs	r2, #4
 800220a:	e000      	b.n	800220e <ETH_SetMACConfig+0x11a>
 800220c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800220e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002216:	2a01      	cmp	r2, #1
 8002218:	d101      	bne.n	800221e <ETH_SetMACConfig+0x12a>
 800221a:	2202      	movs	r2, #2
 800221c:	e000      	b.n	8002220 <ETH_SetMACConfig+0x12c>
 800221e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002220:	4313      	orrs	r3, r2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002238:	2001      	movs	r0, #1
 800223a:	f7fe ff85 	bl	8001148 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	619a      	str	r2, [r3, #24]
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	ff20810f 	.word	0xff20810f

08002254 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <ETH_SetDMAConfig+0x110>)
 800226e:	4013      	ands	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7b1b      	ldrb	r3, [r3, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <ETH_SetDMAConfig+0x2c>
 800227a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800227e:	e000      	b.n	8002282 <ETH_SetDMAConfig+0x2e>
 8002280:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	7b5b      	ldrb	r3, [r3, #13]
 8002286:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002288:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	7f52      	ldrb	r2, [r2, #29]
 800228e:	2a00      	cmp	r2, #0
 8002290:	d102      	bne.n	8002298 <ETH_SetDMAConfig+0x44>
 8002292:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002296:	e000      	b.n	800229a <ETH_SetDMAConfig+0x46>
 8002298:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800229a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	7b9b      	ldrb	r3, [r3, #14]
 80022a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	7f1b      	ldrb	r3, [r3, #28]
 80022ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	7f9b      	ldrb	r3, [r3, #30]
 80022b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022c8:	4313      	orrs	r3, r2
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d8:	461a      	mov	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f7fe ff2c 	bl	8001148 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f8:	461a      	mov	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	791b      	ldrb	r3, [r3, #4]
 8002302:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002308:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800230e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002314:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800231c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800231e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002326:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800232c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002336:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800233a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002348:	2001      	movs	r0, #1
 800234a:	f7fe fefd 	bl	8001148 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	f8de3f23 	.word	0xf8de3f23

08002368 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b0a6      	sub	sp, #152	; 0x98
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800237c:	2300      	movs	r3, #0
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002392:	2301      	movs	r3, #1
 8002394:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023a4:	2300      	movs	r3, #0
 80023a6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fe86 	bl	80020f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80023e8:	2301      	movs	r3, #1
 80023ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800240a:	2300      	movs	r3, #0
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002414:	2301      	movs	r3, #1
 8002416:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800241c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800241e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002422:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002428:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002430:	2300      	movs	r3, #0
 8002432:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff08 	bl	8002254 <ETH_SetDMAConfig>
}
 8002444:	bf00      	nop
 8002446:	3798      	adds	r7, #152	; 0x98
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3305      	adds	r3, #5
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	3204      	adds	r2, #4
 8002464:	7812      	ldrb	r2, [r2, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <ETH_MACAddressConfig+0x68>)
 800246e:	4413      	add	r3, r2
 8002470:	461a      	mov	r2, r3
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3303      	adds	r3, #3
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	061a      	lsls	r2, r3, #24
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3302      	adds	r3, #2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	041b      	lsls	r3, r3, #16
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3301      	adds	r3, #1
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	4313      	orrs	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <ETH_MACAddressConfig+0x6c>)
 800249e:	4413      	add	r3, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6013      	str	r3, [r2, #0]
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40028040 	.word	0x40028040
 80024b8:	40028044 	.word	0x40028044

080024bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e03e      	b.n	8002548 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68d9      	ldr	r1, [r3, #12]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	3206      	adds	r2, #6
 80024fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d80c      	bhi.n	800252c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68d9      	ldr	r1, [r3, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	461a      	mov	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	e004      	b.n	8002536 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	3301      	adds	r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d9bd      	bls.n	80024ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002560:	611a      	str	r2, [r3, #16]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800256e:	b480      	push	{r7}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002576:	2300      	movs	r3, #0
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	e046      	b.n	800260a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6919      	ldr	r1, [r3, #16]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	440b      	add	r3, r1
 800258c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2200      	movs	r2, #0
 8002598:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2200      	movs	r2, #0
 80025aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2200      	movs	r2, #0
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80025c0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	3212      	adds	r2, #18
 80025d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d80c      	bhi.n	80025fa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6919      	ldr	r1, [r3, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	440b      	add	r3, r1
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	60da      	str	r2, [r3, #12]
 80025f8:	e004      	b.n	8002604 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	461a      	mov	r2, r3
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3301      	adds	r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d9b5      	bls.n	800257c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263a:	60da      	str	r2, [r3, #12]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002648:	b480      	push	{r7}
 800264a:	b08d      	sub	sp, #52	; 0x34
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3318      	adds	r3, #24
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002672:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800268a:	d007      	beq.n	800269c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002690:	3304      	adds	r3, #4
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800269c:	2302      	movs	r3, #2
 800269e:	e0ff      	b.n	80028a0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3301      	adds	r3, #1
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <ETH_Prepare_Tx_Descriptors+0x264>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	6852      	ldr	r2, [r2, #4]
 80026bc:	431a      	orrs	r2, r3
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d008      	beq.n	80026e0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002722:	f3bf 8f5f 	dmb	sy
}
 8002726:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002734:	e082      	b.n	800283c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e005      	b.n	8002762 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	3301      	adds	r3, #1
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	2b03      	cmp	r3, #3
 800276c:	d902      	bls.n	8002774 <ETH_Prepare_Tx_Descriptors+0x12c>
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	3b04      	subs	r3, #4
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002796:	d007      	beq.n	80027a8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	3304      	adds	r3, #4
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d029      	beq.n	80027fc <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ba:	e019      	b.n	80027f0 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80027bc:	f3bf 8f5f 	dmb	sy
}
 80027c0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	3301      	adds	r3, #1
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d902      	bls.n	80027e0 <ETH_Prepare_Tx_Descriptors+0x198>
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	3b04      	subs	r3, #4
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	3301      	adds	r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80027f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d3e1      	bcc.n	80027bc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	e051      	b.n	80028a0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	3301      	adds	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4b25      	ldr	r3, [pc, #148]	; (80028ac <ETH_Prepare_Tx_Descriptors+0x264>)
 8002818:	4013      	ands	r3, r2
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	6852      	ldr	r2, [r2, #4]
 800281e:	431a      	orrs	r2, r3
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	3301      	adds	r3, #1
 8002828:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800282a:	f3bf 8f5f 	dmb	sy
}
 800282e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f47f af78 	bne.w	8002736 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d006      	beq.n	800285a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e005      	b.n	8002866 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002876:	6979      	ldr	r1, [r7, #20]
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	3304      	adds	r3, #4
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002886:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002888:	b672      	cpsid	i
}
 800288a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800289a:	b662      	cpsie	i
}
 800289c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3734      	adds	r7, #52	; 0x34
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	ffffe000 	.word	0xffffe000

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	e175      	b.n	8002bbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	f040 8164 	bne.w	8002bb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d005      	beq.n	8002906 <HAL_GPIO_Init+0x56>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d130      	bne.n	8002968 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	2203      	movs	r2, #3
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293c:	2201      	movs	r2, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 0201 	and.w	r2, r3, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b03      	cmp	r3, #3
 8002972:	d017      	beq.n	80029a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	2203      	movs	r2, #3
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d123      	bne.n	80029f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	08da      	lsrs	r2, r3, #3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3208      	adds	r2, #8
 80029b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	220f      	movs	r2, #15
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	08da      	lsrs	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3208      	adds	r2, #8
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0203 	and.w	r2, r3, #3
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80be 	beq.w	8002bb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	4b66      	ldr	r3, [pc, #408]	; (8002bd4 <HAL_GPIO_Init+0x324>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a65      	ldr	r2, [pc, #404]	; (8002bd4 <HAL_GPIO_Init+0x324>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <HAL_GPIO_Init+0x324>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a52:	4a61      	ldr	r2, [pc, #388]	; (8002bd8 <HAL_GPIO_Init+0x328>)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_GPIO_Init+0x32c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d037      	beq.n	8002aee <HAL_GPIO_Init+0x23e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a57      	ldr	r2, [pc, #348]	; (8002be0 <HAL_GPIO_Init+0x330>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d031      	beq.n	8002aea <HAL_GPIO_Init+0x23a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a56      	ldr	r2, [pc, #344]	; (8002be4 <HAL_GPIO_Init+0x334>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d02b      	beq.n	8002ae6 <HAL_GPIO_Init+0x236>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a55      	ldr	r2, [pc, #340]	; (8002be8 <HAL_GPIO_Init+0x338>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d025      	beq.n	8002ae2 <HAL_GPIO_Init+0x232>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a54      	ldr	r2, [pc, #336]	; (8002bec <HAL_GPIO_Init+0x33c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d01f      	beq.n	8002ade <HAL_GPIO_Init+0x22e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a53      	ldr	r2, [pc, #332]	; (8002bf0 <HAL_GPIO_Init+0x340>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d019      	beq.n	8002ada <HAL_GPIO_Init+0x22a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	; (8002bf4 <HAL_GPIO_Init+0x344>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d013      	beq.n	8002ad6 <HAL_GPIO_Init+0x226>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a51      	ldr	r2, [pc, #324]	; (8002bf8 <HAL_GPIO_Init+0x348>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00d      	beq.n	8002ad2 <HAL_GPIO_Init+0x222>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a50      	ldr	r2, [pc, #320]	; (8002bfc <HAL_GPIO_Init+0x34c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <HAL_GPIO_Init+0x21e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a4f      	ldr	r2, [pc, #316]	; (8002c00 <HAL_GPIO_Init+0x350>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d101      	bne.n	8002aca <HAL_GPIO_Init+0x21a>
 8002ac6:	2309      	movs	r3, #9
 8002ac8:	e012      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002aca:	230a      	movs	r3, #10
 8002acc:	e010      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002ace:	2308      	movs	r3, #8
 8002ad0:	e00e      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	e00c      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002ad6:	2306      	movs	r3, #6
 8002ad8:	e00a      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002ada:	2305      	movs	r3, #5
 8002adc:	e008      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002ade:	2304      	movs	r3, #4
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e004      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e002      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_GPIO_Init+0x240>
 8002aee:	2300      	movs	r3, #0
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	f002 0203 	and.w	r2, r2, #3
 8002af6:	0092      	lsls	r2, r2, #2
 8002af8:	4093      	lsls	r3, r2
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b00:	4935      	ldr	r1, [pc, #212]	; (8002bd8 <HAL_GPIO_Init+0x328>)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	089b      	lsrs	r3, r3, #2
 8002b06:	3302      	adds	r3, #2
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b0e:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_GPIO_Init+0x354>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b32:	4a34      	ldr	r2, [pc, #208]	; (8002c04 <HAL_GPIO_Init+0x354>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b38:	4b32      	ldr	r3, [pc, #200]	; (8002c04 <HAL_GPIO_Init+0x354>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b5c:	4a29      	ldr	r2, [pc, #164]	; (8002c04 <HAL_GPIO_Init+0x354>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_GPIO_Init+0x354>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b86:	4a1f      	ldr	r2, [pc, #124]	; (8002c04 <HAL_GPIO_Init+0x354>)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	; (8002c04 <HAL_GPIO_Init+0x354>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d003      	beq.n	8002bb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_GPIO_Init+0x354>)
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	f67f ae86 	bls.w	80028d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40020000 	.word	0x40020000
 8002be0:	40020400 	.word	0x40020400
 8002be4:	40020800 	.word	0x40020800
 8002be8:	40020c00 	.word	0x40020c00
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40021400 	.word	0x40021400
 8002bf4:	40021800 	.word	0x40021800
 8002bf8:	40021c00 	.word	0x40021c00
 8002bfc:	40022000 	.word	0x40022000
 8002c00:	40022400 	.word	0x40022400
 8002c04:	40013c00 	.word	0x40013c00

08002c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
 8002c14:	4613      	mov	r3, r2
 8002c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1e:	887a      	ldrh	r2, [r7, #2]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c24:	e003      	b.n	8002c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c26:	887b      	ldrh	r3, [r7, #2]
 8002c28:	041a      	lsls	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b085      	sub	sp, #20
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c4c:	887a      	ldrh	r2, [r7, #2]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4013      	ands	r3, r2
 8002c52:	041a      	lsls	r2, r3, #16
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	887b      	ldrh	r3, [r7, #2]
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	619a      	str	r2, [r3, #24]
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c70:	b08f      	sub	sp, #60	; 0x3c
 8002c72:	af0a      	add	r7, sp, #40	; 0x28
 8002c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e116      	b.n	8002eae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fd fee6 	bl	8000a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 faec 	bl	800529c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	687e      	ldr	r6, [r7, #4]
 8002ccc:	466d      	mov	r5, sp
 8002cce:	f106 0410 	add.w	r4, r6, #16
 8002cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cde:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce2:	1d33      	adds	r3, r6, #4
 8002ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce6:	6838      	ldr	r0, [r7, #0]
 8002ce8:	f002 fa80 	bl	80051ec <USB_CoreInit>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e0d7      	b.n	8002eae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fada 	bl	80052be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e04a      	b.n	8002da6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d10:	7bfa      	ldrb	r2, [r7, #15]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	333d      	adds	r3, #61	; 0x3d
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	333c      	adds	r3, #60	; 0x3c
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	b298      	uxth	r0, r3
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3344      	adds	r3, #68	; 0x44
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	3340      	adds	r3, #64	; 0x40
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3348      	adds	r3, #72	; 0x48
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	334c      	adds	r3, #76	; 0x4c
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3354      	adds	r3, #84	; 0x54
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	3301      	adds	r3, #1
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d3af      	bcc.n	8002d10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db0:	2300      	movs	r3, #0
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	e044      	b.n	8002e40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002dde:	7bfa      	ldrb	r2, [r7, #15]
 8002de0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e0e:	7bfa      	ldrb	r2, [r7, #15]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d3b5      	bcc.n	8002db6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	687e      	ldr	r6, [r7, #4]
 8002e52:	466d      	mov	r5, sp
 8002e54:	f106 0410 	add.w	r4, r6, #16
 8002e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e64:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e68:	1d33      	adds	r3, r6, #4
 8002e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e6c:	6838      	ldr	r0, [r7, #0]
 8002e6e:	f002 fa73 	bl	8005358 <USB_DevInit>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e014      	b.n	8002eae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f80b 	bl	8002eb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 fc31 	bl	800570e <USB_DevDisconnect>

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002eb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_PCDEx_ActivateLPM+0x44>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	10000003 	.word	0x10000003

08002f00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40007000 	.word	0x40007000

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e291      	b.n	800345a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 8087 	beq.w	8003052 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f44:	4b96      	ldr	r3, [pc, #600]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 030c 	and.w	r3, r3, #12
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d00c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f50:	4b93      	ldr	r3, [pc, #588]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d112      	bne.n	8002f82 <HAL_RCC_OscConfig+0x62>
 8002f5c:	4b90      	ldr	r3, [pc, #576]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f68:	d10b      	bne.n	8002f82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6a:	4b8d      	ldr	r3, [pc, #564]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d06c      	beq.n	8003050 <HAL_RCC_OscConfig+0x130>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d168      	bne.n	8003050 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e26b      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x7a>
 8002f8c:	4b84      	ldr	r3, [pc, #528]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a83      	ldr	r2, [pc, #524]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	e02e      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd8>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x9c>
 8002fa2:	4b7f      	ldr	r3, [pc, #508]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a7e      	ldr	r2, [pc, #504]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b7c      	ldr	r3, [pc, #496]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a7b      	ldr	r2, [pc, #492]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e01d      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc4:	d10c      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xc0>
 8002fc6:	4b76      	ldr	r3, [pc, #472]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a75      	ldr	r2, [pc, #468]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a72      	ldr	r2, [pc, #456]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fdc:	6013      	str	r3, [r2, #0]
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCC_OscConfig+0xd8>
 8002fe0:	4b6f      	ldr	r3, [pc, #444]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6e      	ldr	r2, [pc, #440]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a6b      	ldr	r2, [pc, #428]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d013      	beq.n	8003028 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fe f896 	bl	8001130 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe f892 	bl	8001130 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e21f      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCC_OscConfig+0xe8>
 8003026:	e014      	b.n	8003052 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003028:	f7fe f882 	bl	8001130 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003030:	f7fe f87e 	bl	8001130 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b64      	cmp	r3, #100	; 0x64
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e20b      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	4b57      	ldr	r3, [pc, #348]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x110>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d069      	beq.n	8003132 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800305e:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800306a:	4b4d      	ldr	r3, [pc, #308]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b08      	cmp	r3, #8
 8003074:	d11c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x190>
 8003076:	4b4a      	ldr	r3, [pc, #296]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d116      	bne.n	80030b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	4b47      	ldr	r3, [pc, #284]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_RCC_OscConfig+0x17a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e1df      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309a:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	493d      	ldr	r1, [pc, #244]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ae:	e040      	b.n	8003132 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d023      	beq.n	8003100 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b8:	4b39      	ldr	r3, [pc, #228]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a38      	ldr	r2, [pc, #224]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe f834 	bl	8001130 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030cc:	f7fe f830 	bl	8001130 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1bd      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ea:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4929      	ldr	r1, [pc, #164]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
 80030fe:	e018      	b.n	8003132 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe f810 	bl	8001130 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003114:	f7fe f80c 	bl	8001130 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e199      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003126:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d038      	beq.n	80031b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d019      	beq.n	800317a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003152:	f7fd ffed 	bl	8001130 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003158:	e008      	b.n	800316c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315a:	f7fd ffe9 	bl	8001130 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e176      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 800316e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0f0      	beq.n	800315a <HAL_RCC_OscConfig+0x23a>
 8003178:	e01a      	b.n	80031b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <HAL_RCC_OscConfig+0x280>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003186:	f7fd ffd3 	bl	8001130 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800318e:	f7fd ffcf 	bl	8001130 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d903      	bls.n	80031a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e15c      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
 80031a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031a4:	4b91      	ldr	r3, [pc, #580]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80031a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1ee      	bne.n	800318e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a4 	beq.w	8003306 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031be:	4b8b      	ldr	r3, [pc, #556]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10d      	bne.n	80031e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4b88      	ldr	r3, [pc, #544]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a87      	ldr	r2, [pc, #540]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
 80031d6:	4b85      	ldr	r3, [pc, #532]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031e6:	4b82      	ldr	r3, [pc, #520]	; (80033f0 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d118      	bne.n	8003224 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031f2:	4b7f      	ldr	r3, [pc, #508]	; (80033f0 <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7e      	ldr	r2, [pc, #504]	; (80033f0 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fe:	f7fd ff97 	bl	8001130 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003206:	f7fd ff93 	bl	8001130 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	; 0x64
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e120      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003218:	4b75      	ldr	r3, [pc, #468]	; (80033f0 <HAL_RCC_OscConfig+0x4d0>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x31a>
 800322c:	4b6f      	ldr	r3, [pc, #444]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a6e      	ldr	r2, [pc, #440]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
 8003238:	e02d      	b.n	8003296 <HAL_RCC_OscConfig+0x376>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x33c>
 8003242:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a69      	ldr	r2, [pc, #420]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	4b67      	ldr	r3, [pc, #412]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a66      	ldr	r2, [pc, #408]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
 800325a:	e01c      	b.n	8003296 <HAL_RCC_OscConfig+0x376>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	2b05      	cmp	r3, #5
 8003262:	d10c      	bne.n	800327e <HAL_RCC_OscConfig+0x35e>
 8003264:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003268:	4a60      	ldr	r2, [pc, #384]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	6713      	str	r3, [r2, #112]	; 0x70
 8003270:	4b5e      	ldr	r3, [pc, #376]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	4a5d      	ldr	r2, [pc, #372]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6713      	str	r3, [r2, #112]	; 0x70
 800327c:	e00b      	b.n	8003296 <HAL_RCC_OscConfig+0x376>
 800327e:	4b5b      	ldr	r3, [pc, #364]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	4a5a      	ldr	r2, [pc, #360]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003284:	f023 0301 	bic.w	r3, r3, #1
 8003288:	6713      	str	r3, [r2, #112]	; 0x70
 800328a:	4b58      	ldr	r3, [pc, #352]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a57      	ldr	r2, [pc, #348]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003290:	f023 0304 	bic.w	r3, r3, #4
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d015      	beq.n	80032ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fd ff47 	bl	8001130 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fd ff43 	bl	8001130 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0ce      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032bc:	4b4b      	ldr	r3, [pc, #300]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0ee      	beq.n	80032a6 <HAL_RCC_OscConfig+0x386>
 80032c8:	e014      	b.n	80032f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fd ff31 	bl	8001130 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fd ff2d 	bl	8001130 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0b8      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e8:	4b40      	ldr	r3, [pc, #256]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ee      	bne.n	80032d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032fa:	4b3c      	ldr	r3, [pc, #240]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	4a3b      	ldr	r2, [pc, #236]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003304:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80a4 	beq.w	8003458 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003310:	4b36      	ldr	r3, [pc, #216]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b08      	cmp	r3, #8
 800331a:	d06b      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d149      	bne.n	80033b8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003324:	4b31      	ldr	r3, [pc, #196]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a30      	ldr	r2, [pc, #192]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800332a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003330:	f7fd fefe 	bl	8001130 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fd fefa 	bl	8001130 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e087      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69da      	ldr	r2, [r3, #28]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	019b      	lsls	r3, r3, #6
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	4313      	orrs	r3, r2
 800337c:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800337e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003382:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800338a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd fece 	bl	8001130 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fd feca 	bl	8001130 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e057      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0x478>
 80033b6:	e04f      	b.n	8003458 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b8:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80033be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fd feb4 	bl	8001130 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fd feb0 	bl	8001130 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e03d      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x4ac>
 80033ea:	e035      	b.n	8003458 <HAL_RCC_OscConfig+0x538>
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCC_OscConfig+0x544>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d028      	beq.n	8003454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d121      	bne.n	8003454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d11a      	bne.n	8003454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003424:	4013      	ands	r3, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800342a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800342c:	4293      	cmp	r3, r2
 800342e:	d111      	bne.n	8003454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	085b      	lsrs	r3, r3, #1
 800343c:	3b01      	subs	r3, #1
 800343e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d107      	bne.n	8003454 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800

08003468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0d0      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003480:	4b6a      	ldr	r3, [pc, #424]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 030f 	and.w	r3, r3, #15
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d910      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348e:	4b67      	ldr	r3, [pc, #412]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 020f 	bic.w	r2, r3, #15
 8003496:	4965      	ldr	r1, [pc, #404]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4313      	orrs	r3, r2
 800349c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a58      	ldr	r2, [pc, #352]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a52      	ldr	r2, [pc, #328]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d040      	beq.n	800358c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d115      	bne.n	800354a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d107      	bne.n	800353a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352a:	4b41      	ldr	r3, [pc, #260]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e073      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353a:	4b3d      	ldr	r3, [pc, #244]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06b      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f023 0203 	bic.w	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4936      	ldr	r1, [pc, #216]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 8003558:	4313      	orrs	r3, r2
 800355a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800355c:	f7fd fde8 	bl	8001130 <HAL_GetTick>
 8003560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003562:	e00a      	b.n	800357a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003564:	f7fd fde4 	bl	8001130 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e053      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 020c 	and.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	429a      	cmp	r2, r3
 800358a:	d1eb      	bne.n	8003564 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d210      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f023 020f 	bic.w	r2, r3, #15
 80035a2:	4922      	ldr	r1, [pc, #136]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <HAL_RCC_ClockConfig+0x1c8>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	; (8003634 <HAL_RCC_ClockConfig+0x1cc>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	; (8003638 <HAL_RCC_ClockConfig+0x1d0>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_ClockConfig+0x1d4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd faa0 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00
 8003630:	40023800 	.word	0x40023800
 8003634:	08019550 	.word	0x08019550
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003644:	b094      	sub	sp, #80	; 0x50
 8003646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	647b      	str	r3, [r7, #68]	; 0x44
 800364c:	2300      	movs	r3, #0
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003650:	2300      	movs	r3, #0
 8003652:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003658:	4b79      	ldr	r3, [pc, #484]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d00d      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x40>
 8003664:	2b08      	cmp	r3, #8
 8003666:	f200 80e1 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x1ec>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x34>
 800366e:	2b04      	cmp	r3, #4
 8003670:	d003      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x3a>
 8003672:	e0db      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_GetSysClockFreq+0x204>)
 8003676:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003678:	e0db      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367a:	4b73      	ldr	r3, [pc, #460]	; (8003848 <HAL_RCC_GetSysClockFreq+0x208>)
 800367c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800367e:	e0d8      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003680:	4b6f      	ldr	r3, [pc, #444]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003688:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800368a:	4b6d      	ldr	r3, [pc, #436]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003696:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	2200      	movs	r2, #0
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80036a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a8:	633b      	str	r3, [r7, #48]	; 0x30
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
 80036ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	f04f 0000 	mov.w	r0, #0
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	0159      	lsls	r1, r3, #5
 80036c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c4:	0150      	lsls	r0, r2, #5
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4621      	mov	r1, r4
 80036cc:	1a51      	subs	r1, r2, r1
 80036ce:	6139      	str	r1, [r7, #16]
 80036d0:	4629      	mov	r1, r5
 80036d2:	eb63 0301 	sbc.w	r3, r3, r1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e4:	4659      	mov	r1, fp
 80036e6:	018b      	lsls	r3, r1, #6
 80036e8:	4651      	mov	r1, sl
 80036ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ee:	4651      	mov	r1, sl
 80036f0:	018a      	lsls	r2, r1, #6
 80036f2:	4651      	mov	r1, sl
 80036f4:	ebb2 0801 	subs.w	r8, r2, r1
 80036f8:	4659      	mov	r1, fp
 80036fa:	eb63 0901 	sbc.w	r9, r3, r1
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800370a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800370e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003712:	4690      	mov	r8, r2
 8003714:	4699      	mov	r9, r3
 8003716:	4623      	mov	r3, r4
 8003718:	eb18 0303 	adds.w	r3, r8, r3
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	462b      	mov	r3, r5
 8003720:	eb49 0303 	adc.w	r3, r9, r3
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003732:	4629      	mov	r1, r5
 8003734:	024b      	lsls	r3, r1, #9
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800373c:	4621      	mov	r1, r4
 800373e:	024a      	lsls	r2, r1, #9
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
 800374a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800374c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003750:	f7fc fdb6 	bl	80002c0 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800375c:	e058      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b38      	ldr	r3, [pc, #224]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	2200      	movs	r2, #0
 8003766:	4618      	mov	r0, r3
 8003768:	4611      	mov	r1, r2
 800376a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003778:	4642      	mov	r2, r8
 800377a:	464b      	mov	r3, r9
 800377c:	f04f 0000 	mov.w	r0, #0
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	0159      	lsls	r1, r3, #5
 8003786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378a:	0150      	lsls	r0, r2, #5
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4641      	mov	r1, r8
 8003792:	ebb2 0a01 	subs.w	sl, r2, r1
 8003796:	4649      	mov	r1, r9
 8003798:	eb63 0b01 	sbc.w	fp, r3, r1
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037b0:	ebb2 040a 	subs.w	r4, r2, sl
 80037b4:	eb63 050b 	sbc.w	r5, r3, fp
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	00eb      	lsls	r3, r5, #3
 80037c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c6:	00e2      	lsls	r2, r4, #3
 80037c8:	4614      	mov	r4, r2
 80037ca:	461d      	mov	r5, r3
 80037cc:	4643      	mov	r3, r8
 80037ce:	18e3      	adds	r3, r4, r3
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	464b      	mov	r3, r9
 80037d4:	eb45 0303 	adc.w	r3, r5, r3
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037e6:	4629      	mov	r1, r5
 80037e8:	028b      	lsls	r3, r1, #10
 80037ea:	4621      	mov	r1, r4
 80037ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f0:	4621      	mov	r1, r4
 80037f2:	028a      	lsls	r2, r1, #10
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fa:	2200      	movs	r2, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	61fa      	str	r2, [r7, #28]
 8003800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003804:	f7fc fd5c 	bl	80002c0 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4613      	mov	r3, r2
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	3301      	adds	r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003820:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800382a:	e002      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetSysClockFreq+0x204>)
 800382e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003834:	4618      	mov	r0, r3
 8003836:	3750      	adds	r7, #80	; 0x50
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400
 8003848:	007a1200 	.word	0x007a1200

0800384c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_RCC_GetHCLKFreq+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000

08003864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003868:	f7ff fff0 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4903      	ldr	r1, [pc, #12]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	08019560 	.word	0x08019560

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003890:	f7ff ffdc 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0b5b      	lsrs	r3, r3, #13
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08019560 	.word	0x08019560

080038b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	220f      	movs	r2, #15
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <HAL_RCC_GetClockConfig+0x5c>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0203 	and.w	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <HAL_RCC_GetClockConfig+0x5c>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <HAL_RCC_GetClockConfig+0x5c>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_GetClockConfig+0x5c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	08db      	lsrs	r3, r3, #3
 80038ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038f6:	4b07      	ldr	r3, [pc, #28]	; (8003914 <HAL_RCC_GetClockConfig+0x60>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 020f 	and.w	r2, r3, #15
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	601a      	str	r2, [r3, #0]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	40023c00 	.word	0x40023c00

08003918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d012      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003940:	4b69      	ldr	r3, [pc, #420]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a68      	ldr	r2, [pc, #416]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003946:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800394a:	6093      	str	r3, [r2, #8]
 800394c:	4b66      	ldr	r3, [pc, #408]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	4964      	ldr	r1, [pc, #400]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003962:	2301      	movs	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003972:	4b5d      	ldr	r3, [pc, #372]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	4959      	ldr	r1, [pc, #356]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d017      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ae:	4b4e      	ldr	r3, [pc, #312]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	494a      	ldr	r1, [pc, #296]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039cc:	d101      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 808b 	beq.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	4a39      	ldr	r2, [pc, #228]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	; 0x40
 8003a08:	4b37      	ldr	r3, [pc, #220]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a20:	f7fd fb86 	bl	8001130 <HAL_GetTick>
 8003a24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a28:	f7fd fb82 	bl	8001130 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e357      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a3a:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a46:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d035      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d02e      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a86:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d114      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd fb4a 	bl	8001130 <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fb46 	bl	8001130 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e319      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ee      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ace:	d111      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ade:	400b      	ands	r3, r1
 8003ae0:	4901      	ldr	r1, [pc, #4]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000
 8003af0:	0ffffcff 	.word	0x0ffffcff
 8003af4:	4baa      	ldr	r3, [pc, #680]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4aa9      	ldr	r2, [pc, #676]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003afe:	6093      	str	r3, [r2, #8]
 8003b00:	4ba7      	ldr	r3, [pc, #668]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0c:	49a4      	ldr	r1, [pc, #656]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d010      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b1e:	4ba0      	ldr	r3, [pc, #640]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b24:	4a9e      	ldr	r2, [pc, #632]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b2e:	4b9c      	ldr	r3, [pc, #624]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	4999      	ldr	r1, [pc, #612]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b4c:	4b94      	ldr	r3, [pc, #592]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5a:	4991      	ldr	r1, [pc, #580]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b6e:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7c:	4988      	ldr	r1, [pc, #544]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b90:	4b83      	ldr	r3, [pc, #524]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9e:	4980      	ldr	r1, [pc, #512]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bb2:	4b7b      	ldr	r3, [pc, #492]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4977      	ldr	r1, [pc, #476]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bd4:	4b72      	ldr	r3, [pc, #456]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	496f      	ldr	r1, [pc, #444]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f023 020c 	bic.w	r2, r3, #12
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	4966      	ldr	r1, [pc, #408]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c18:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	495e      	ldr	r1, [pc, #376]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c3a:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	4955      	ldr	r1, [pc, #340]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c5c:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	494d      	ldr	r1, [pc, #308]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c7e:	4b48      	ldr	r3, [pc, #288]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4944      	ldr	r1, [pc, #272]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	493c      	ldr	r1, [pc, #240]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cc2:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd0:	4933      	ldr	r1, [pc, #204]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf2:	492b      	ldr	r1, [pc, #172]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d14:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d24:	d101      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d46:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	4912      	ldr	r1, [pc, #72]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d78:	4909      	ldr	r1, [pc, #36]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d006      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80d9 	beq.w	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d94:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a01      	ldr	r2, [pc, #4]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d9e:	e001      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003da0:	40023800 	.word	0x40023800
 8003da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da6:	f7fd f9c3 	bl	8001130 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dae:	f7fd f9bf 	bl	8001130 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e194      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dc0:	4b6c      	ldr	r3, [pc, #432]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d021      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11d      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003de0:	4b64      	ldr	r3, [pc, #400]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de6:	0c1b      	lsrs	r3, r3, #16
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dee:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	019a      	lsls	r2, r3, #6
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	071b      	lsls	r3, r3, #28
 8003e14:	4957      	ldr	r1, [pc, #348]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e46:	d129      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e48:	4b4a      	ldr	r3, [pc, #296]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4e:	0c1b      	lsrs	r3, r3, #16
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5c:	0f1b      	lsrs	r3, r3, #28
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	019a      	lsls	r2, r3, #6
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	431a      	orrs	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	071b      	lsls	r3, r3, #28
 8003e7c:	493d      	ldr	r1, [pc, #244]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8a:	f023 021f 	bic.w	r2, r3, #31
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	3b01      	subs	r3, #1
 8003e94:	4937      	ldr	r1, [pc, #220]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01d      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eae:	0e1b      	lsrs	r3, r3, #24
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	0f1b      	lsrs	r3, r3, #28
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	019a      	lsls	r2, r3, #6
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	071b      	lsls	r3, r3, #28
 8003edc:	4925      	ldr	r1, [pc, #148]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d011      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	019a      	lsls	r2, r3, #6
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	061b      	lsls	r3, r3, #24
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	071b      	lsls	r3, r3, #28
 8003f0c:	4919      	ldr	r1, [pc, #100]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f20:	f7fd f906 	bl	8001130 <HAL_GetTick>
 8003f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f28:	f7fd f902 	bl	8001130 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e0d7      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 80cd 	bne.w	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5a:	f7fd f8e9 	bl	8001130 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f62:	f7fd f8e5 	bl	8001130 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b64      	cmp	r3, #100	; 0x64
 8003f6e:	d903      	bls.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0ba      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f84:	d0ed      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02e      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d12a      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fae:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	0f1b      	lsrs	r3, r3, #28
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	019a      	lsls	r2, r3, #6
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	4944      	ldr	r1, [pc, #272]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fea:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	493d      	ldr	r1, [pc, #244]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d022      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004018:	d11d      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	0e1b      	lsrs	r3, r3, #24
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004028:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	0f1b      	lsrs	r3, r3, #28
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	019a      	lsls	r2, r3, #6
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	431a      	orrs	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	071b      	lsls	r3, r3, #28
 800404e:	4929      	ldr	r1, [pc, #164]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d028      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	0e1b      	lsrs	r3, r3, #24
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	019a      	lsls	r2, r3, #6
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	071b      	lsls	r3, r3, #28
 8004096:	4917      	ldr	r1, [pc, #92]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4911      	ldr	r1, [pc, #68]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fd f836 	bl	8001130 <HAL_GetTick>
 80040c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c8:	f7fd f832 	bl	8001130 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e007      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e6:	d1ef      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023800 	.word	0x40023800

080040f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e049      	b.n	800419e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f841 	bl	80041a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fa00 	bl	800453c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
	...

080041bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d001      	beq.n	80041d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e054      	b.n	800427e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68da      	ldr	r2, [r3, #12]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a26      	ldr	r2, [pc, #152]	; (800428c <HAL_TIM_Base_Start_IT+0xd0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d022      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x80>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041fe:	d01d      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x80>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a22      	ldr	r2, [pc, #136]	; (8004290 <HAL_TIM_Base_Start_IT+0xd4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d018      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x80>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a21      	ldr	r2, [pc, #132]	; (8004294 <HAL_TIM_Base_Start_IT+0xd8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x80>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1f      	ldr	r2, [pc, #124]	; (8004298 <HAL_TIM_Base_Start_IT+0xdc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x80>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1e      	ldr	r2, [pc, #120]	; (800429c <HAL_TIM_Base_Start_IT+0xe0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x80>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1c      	ldr	r2, [pc, #112]	; (80042a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x80>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1b      	ldr	r2, [pc, #108]	; (80042a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d115      	bne.n	8004268 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_TIM_Base_Start_IT+0xec>)
 8004244:	4013      	ands	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b06      	cmp	r3, #6
 800424c:	d015      	beq.n	800427a <HAL_TIM_Base_Start_IT+0xbe>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004254:	d011      	beq.n	800427a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	e008      	b.n	800427a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	e000      	b.n	800427c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800427a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40000c00 	.word	0x40000c00
 800429c:	40010400 	.word	0x40010400
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40001800 	.word	0x40001800
 80042a8:	00010007 	.word	0x00010007

080042ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d122      	bne.n	8004308 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0202 	mvn.w	r2, #2
 80042d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f905 	bl	80044fe <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8f7 	bl	80044ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f908 	bl	8004512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b04      	cmp	r3, #4
 8004314:	d122      	bne.n	800435c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b04      	cmp	r3, #4
 8004322:	d11b      	bne.n	800435c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0204 	mvn.w	r2, #4
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8db 	bl	80044fe <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8cd 	bl	80044ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8de 	bl	8004512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b08      	cmp	r3, #8
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b08      	cmp	r3, #8
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0208 	mvn.w	r2, #8
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2204      	movs	r2, #4
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f8b1 	bl	80044fe <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8a3 	bl	80044ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f8b4 	bl	8004512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0210 	mvn.w	r2, #16
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2208      	movs	r2, #8
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f887 	bl	80044fe <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f879 	bl	80044ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f88a 	bl	8004512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b01      	cmp	r3, #1
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0201 	mvn.w	r2, #1
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc fa7e 	bl	800092c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004448:	2b80      	cmp	r3, #128	; 0x80
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f91a 	bl	8004690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800446a:	d10e      	bne.n	800448a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d107      	bne.n	800448a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f90d 	bl	80046a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d10e      	bne.n	80044b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a2:	2b40      	cmp	r3, #64	; 0x40
 80044a4:	d107      	bne.n	80044b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f838 	bl	8004526 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d10e      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d107      	bne.n	80044e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f06f 0220 	mvn.w	r2, #32
 80044da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f8cd 	bl	800467c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a40      	ldr	r2, [pc, #256]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d00f      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3d      	ldr	r2, [pc, #244]	; (8004654 <TIM_Base_SetConfig+0x118>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3c      	ldr	r2, [pc, #240]	; (8004658 <TIM_Base_SetConfig+0x11c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3b      	ldr	r2, [pc, #236]	; (800465c <TIM_Base_SetConfig+0x120>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3a      	ldr	r2, [pc, #232]	; (8004660 <TIM_Base_SetConfig+0x124>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d02b      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d027      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <TIM_Base_SetConfig+0x118>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d023      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <TIM_Base_SetConfig+0x11c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01f      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2a      	ldr	r2, [pc, #168]	; (800465c <TIM_Base_SetConfig+0x120>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01b      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a29      	ldr	r2, [pc, #164]	; (8004660 <TIM_Base_SetConfig+0x124>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d017      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a28      	ldr	r2, [pc, #160]	; (8004664 <TIM_Base_SetConfig+0x128>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a27      	ldr	r2, [pc, #156]	; (8004668 <TIM_Base_SetConfig+0x12c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00f      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a26      	ldr	r2, [pc, #152]	; (800466c <TIM_Base_SetConfig+0x130>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00b      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a25      	ldr	r2, [pc, #148]	; (8004670 <TIM_Base_SetConfig+0x134>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d007      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a24      	ldr	r2, [pc, #144]	; (8004674 <TIM_Base_SetConfig+0x138>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d003      	beq.n	80045ee <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a23      	ldr	r2, [pc, #140]	; (8004678 <TIM_Base_SetConfig+0x13c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d108      	bne.n	8004600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a0a      	ldr	r2, [pc, #40]	; (8004650 <TIM_Base_SetConfig+0x114>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0xf8>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <TIM_Base_SetConfig+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d103      	bne.n	800463c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	615a      	str	r2, [r3, #20]
}
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40010000 	.word	0x40010000
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800
 800465c:	40000c00 	.word	0x40000c00
 8004660:	40010400 	.word	0x40010400
 8004664:	40014000 	.word	0x40014000
 8004668:	40014400 	.word	0x40014400
 800466c:	40014800 	.word	0x40014800
 8004670:	40001800 	.word	0x40001800
 8004674:	40001c00 	.word	0x40001c00
 8004678:	40002000 	.word	0x40002000

0800467c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e040      	b.n	800474c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7fc f966 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2224      	movs	r2, #36	; 0x24
 80046e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0201 	bic.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f974 	bl	80049e4 <UART_SetConfig>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e022      	b.n	800474c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fbcc 	bl	8004eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689a      	ldr	r2, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 fc53 	bl	8004ff0 <UART_CheckIdleState>
 800474a:	4603      	mov	r3, r0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b08a      	sub	sp, #40	; 0x28
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004768:	2b20      	cmp	r3, #32
 800476a:	d171      	bne.n	8004850 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_UART_Transmit+0x24>
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e06a      	b.n	8004852 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2221      	movs	r2, #33	; 0x21
 8004788:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800478a:	f7fc fcd1 	bl	8001130 <HAL_GetTick>
 800478e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d108      	bne.n	80047bc <HAL_UART_Transmit+0x68>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e003      	b.n	80047c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047c4:	e02c      	b.n	8004820 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2200      	movs	r2, #0
 80047ce:	2180      	movs	r1, #128	; 0x80
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fc44 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e038      	b.n	8004852 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	3302      	adds	r3, #2
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	e007      	b.n	800480e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	781a      	ldrb	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	3301      	adds	r3, #1
 800480c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1cc      	bne.n	80047c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	2140      	movs	r1, #64	; 0x40
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fc11 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e005      	b.n	8004852 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e000      	b.n	8004852 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004850:	2302      	movs	r3, #2
  }
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b08a      	sub	sp, #40	; 0x28
 800485e:	af02      	add	r7, sp, #8
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	603b      	str	r3, [r7, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004870:	2b20      	cmp	r3, #32
 8004872:	f040 80b1 	bne.w	80049d8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_UART_Receive+0x28>
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0a9      	b.n	80049da <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2222      	movs	r2, #34	; 0x22
 8004892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800489c:	f7fc fc48 	bl	8001130 <HAL_GetTick>
 80048a0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	88fa      	ldrh	r2, [r7, #6]
 80048a6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d10e      	bne.n	80048da <HAL_UART_Receive+0x80>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <HAL_UART_Receive+0x76>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80048ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ce:	e02d      	b.n	800492c <HAL_UART_Receive+0xd2>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	22ff      	movs	r2, #255	; 0xff
 80048d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048d8:	e028      	b.n	800492c <HAL_UART_Receive+0xd2>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10d      	bne.n	80048fe <HAL_UART_Receive+0xa4>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <HAL_UART_Receive+0x9a>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	22ff      	movs	r2, #255	; 0xff
 80048ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048f2:	e01b      	b.n	800492c <HAL_UART_Receive+0xd2>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	227f      	movs	r2, #127	; 0x7f
 80048f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048fc:	e016      	b.n	800492c <HAL_UART_Receive+0xd2>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004906:	d10d      	bne.n	8004924 <HAL_UART_Receive+0xca>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d104      	bne.n	800491a <HAL_UART_Receive+0xc0>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	227f      	movs	r2, #127	; 0x7f
 8004914:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004918:	e008      	b.n	800492c <HAL_UART_Receive+0xd2>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	223f      	movs	r2, #63	; 0x3f
 800491e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004922:	e003      	b.n	800492c <HAL_UART_Receive+0xd2>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004932:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800493c:	d108      	bne.n	8004950 <HAL_UART_Receive+0xf6>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d104      	bne.n	8004950 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	e003      	b.n	8004958 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004954:	2300      	movs	r3, #0
 8004956:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004958:	e032      	b.n	80049c0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2120      	movs	r1, #32
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fb7a 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e032      	b.n	80049da <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10c      	bne.n	8004994 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	b29a      	uxth	r2, r3
 8004982:	8a7b      	ldrh	r3, [r7, #18]
 8004984:	4013      	ands	r3, r2
 8004986:	b29a      	uxth	r2, r3
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	3302      	adds	r3, #2
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e00c      	b.n	80049ae <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	b2da      	uxtb	r2, r3
 800499c:	8a7b      	ldrh	r3, [r7, #18]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	4013      	ands	r3, r2
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	3301      	adds	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1c6      	bne.n	800495a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e000      	b.n	80049da <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
  }
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4ba6      	ldr	r3, [pc, #664]	; (8004ca8 <UART_SetConfig+0x2c4>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a94      	ldr	r2, [pc, #592]	; (8004cac <UART_SetConfig+0x2c8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d120      	bne.n	8004aa2 <UART_SetConfig+0xbe>
 8004a60:	4b93      	ldr	r3, [pc, #588]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d816      	bhi.n	8004a9c <UART_SetConfig+0xb8>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x90>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a85 	.word	0x08004a85
 8004a78:	08004a91 	.word	0x08004a91
 8004a7c:	08004a8b 	.word	0x08004a8b
 8004a80:	08004a97 	.word	0x08004a97
 8004a84:	2301      	movs	r3, #1
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e150      	b.n	8004d2c <UART_SetConfig+0x348>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e14d      	b.n	8004d2c <UART_SetConfig+0x348>
 8004a90:	2304      	movs	r3, #4
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e14a      	b.n	8004d2c <UART_SetConfig+0x348>
 8004a96:	2308      	movs	r3, #8
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e147      	b.n	8004d2c <UART_SetConfig+0x348>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e144      	b.n	8004d2c <UART_SetConfig+0x348>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a83      	ldr	r2, [pc, #524]	; (8004cb4 <UART_SetConfig+0x2d0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d132      	bne.n	8004b12 <UART_SetConfig+0x12e>
 8004aac:	4b80      	ldr	r3, [pc, #512]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d828      	bhi.n	8004b0c <UART_SetConfig+0x128>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <UART_SetConfig+0xdc>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004b0d 	.word	0x08004b0d
 8004ac8:	08004b0d 	.word	0x08004b0d
 8004acc:	08004b0d 	.word	0x08004b0d
 8004ad0:	08004b01 	.word	0x08004b01
 8004ad4:	08004b0d 	.word	0x08004b0d
 8004ad8:	08004b0d 	.word	0x08004b0d
 8004adc:	08004b0d 	.word	0x08004b0d
 8004ae0:	08004afb 	.word	0x08004afb
 8004ae4:	08004b0d 	.word	0x08004b0d
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b0d 	.word	0x08004b0d
 8004af0:	08004b07 	.word	0x08004b07
 8004af4:	2300      	movs	r3, #0
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e118      	b.n	8004d2c <UART_SetConfig+0x348>
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e115      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b00:	2304      	movs	r3, #4
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e112      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b06:	2308      	movs	r3, #8
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e10f      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e10c      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a68      	ldr	r2, [pc, #416]	; (8004cb8 <UART_SetConfig+0x2d4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d120      	bne.n	8004b5e <UART_SetConfig+0x17a>
 8004b1c:	4b64      	ldr	r3, [pc, #400]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b26:	2b30      	cmp	r3, #48	; 0x30
 8004b28:	d013      	beq.n	8004b52 <UART_SetConfig+0x16e>
 8004b2a:	2b30      	cmp	r3, #48	; 0x30
 8004b2c:	d814      	bhi.n	8004b58 <UART_SetConfig+0x174>
 8004b2e:	2b20      	cmp	r3, #32
 8004b30:	d009      	beq.n	8004b46 <UART_SetConfig+0x162>
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d810      	bhi.n	8004b58 <UART_SetConfig+0x174>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <UART_SetConfig+0x15c>
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d006      	beq.n	8004b4c <UART_SetConfig+0x168>
 8004b3e:	e00b      	b.n	8004b58 <UART_SetConfig+0x174>
 8004b40:	2300      	movs	r3, #0
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e0f2      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b46:	2302      	movs	r3, #2
 8004b48:	77fb      	strb	r3, [r7, #31]
 8004b4a:	e0ef      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b4c:	2304      	movs	r3, #4
 8004b4e:	77fb      	strb	r3, [r7, #31]
 8004b50:	e0ec      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b52:	2308      	movs	r3, #8
 8004b54:	77fb      	strb	r3, [r7, #31]
 8004b56:	e0e9      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e0e6      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a56      	ldr	r2, [pc, #344]	; (8004cbc <UART_SetConfig+0x2d8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d120      	bne.n	8004baa <UART_SetConfig+0x1c6>
 8004b68:	4b51      	ldr	r3, [pc, #324]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b72:	2bc0      	cmp	r3, #192	; 0xc0
 8004b74:	d013      	beq.n	8004b9e <UART_SetConfig+0x1ba>
 8004b76:	2bc0      	cmp	r3, #192	; 0xc0
 8004b78:	d814      	bhi.n	8004ba4 <UART_SetConfig+0x1c0>
 8004b7a:	2b80      	cmp	r3, #128	; 0x80
 8004b7c:	d009      	beq.n	8004b92 <UART_SetConfig+0x1ae>
 8004b7e:	2b80      	cmp	r3, #128	; 0x80
 8004b80:	d810      	bhi.n	8004ba4 <UART_SetConfig+0x1c0>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <UART_SetConfig+0x1a8>
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d006      	beq.n	8004b98 <UART_SetConfig+0x1b4>
 8004b8a:	e00b      	b.n	8004ba4 <UART_SetConfig+0x1c0>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e0cc      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b92:	2302      	movs	r3, #2
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e0c9      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e0c6      	b.n	8004d2c <UART_SetConfig+0x348>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e0c3      	b.n	8004d2c <UART_SetConfig+0x348>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e0c0      	b.n	8004d2c <UART_SetConfig+0x348>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a44      	ldr	r2, [pc, #272]	; (8004cc0 <UART_SetConfig+0x2dc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d125      	bne.n	8004c00 <UART_SetConfig+0x21c>
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc2:	d017      	beq.n	8004bf4 <UART_SetConfig+0x210>
 8004bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc8:	d817      	bhi.n	8004bfa <UART_SetConfig+0x216>
 8004bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bce:	d00b      	beq.n	8004be8 <UART_SetConfig+0x204>
 8004bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd4:	d811      	bhi.n	8004bfa <UART_SetConfig+0x216>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <UART_SetConfig+0x1fe>
 8004bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bde:	d006      	beq.n	8004bee <UART_SetConfig+0x20a>
 8004be0:	e00b      	b.n	8004bfa <UART_SetConfig+0x216>
 8004be2:	2300      	movs	r3, #0
 8004be4:	77fb      	strb	r3, [r7, #31]
 8004be6:	e0a1      	b.n	8004d2c <UART_SetConfig+0x348>
 8004be8:	2302      	movs	r3, #2
 8004bea:	77fb      	strb	r3, [r7, #31]
 8004bec:	e09e      	b.n	8004d2c <UART_SetConfig+0x348>
 8004bee:	2304      	movs	r3, #4
 8004bf0:	77fb      	strb	r3, [r7, #31]
 8004bf2:	e09b      	b.n	8004d2c <UART_SetConfig+0x348>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	77fb      	strb	r3, [r7, #31]
 8004bf8:	e098      	b.n	8004d2c <UART_SetConfig+0x348>
 8004bfa:	2310      	movs	r3, #16
 8004bfc:	77fb      	strb	r3, [r7, #31]
 8004bfe:	e095      	b.n	8004d2c <UART_SetConfig+0x348>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2f      	ldr	r2, [pc, #188]	; (8004cc4 <UART_SetConfig+0x2e0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d125      	bne.n	8004c56 <UART_SetConfig+0x272>
 8004c0a:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c18:	d017      	beq.n	8004c4a <UART_SetConfig+0x266>
 8004c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c1e:	d817      	bhi.n	8004c50 <UART_SetConfig+0x26c>
 8004c20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c24:	d00b      	beq.n	8004c3e <UART_SetConfig+0x25a>
 8004c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2a:	d811      	bhi.n	8004c50 <UART_SetConfig+0x26c>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <UART_SetConfig+0x254>
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c34:	d006      	beq.n	8004c44 <UART_SetConfig+0x260>
 8004c36:	e00b      	b.n	8004c50 <UART_SetConfig+0x26c>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e076      	b.n	8004d2c <UART_SetConfig+0x348>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	77fb      	strb	r3, [r7, #31]
 8004c42:	e073      	b.n	8004d2c <UART_SetConfig+0x348>
 8004c44:	2304      	movs	r3, #4
 8004c46:	77fb      	strb	r3, [r7, #31]
 8004c48:	e070      	b.n	8004d2c <UART_SetConfig+0x348>
 8004c4a:	2308      	movs	r3, #8
 8004c4c:	77fb      	strb	r3, [r7, #31]
 8004c4e:	e06d      	b.n	8004d2c <UART_SetConfig+0x348>
 8004c50:	2310      	movs	r3, #16
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e06a      	b.n	8004d2c <UART_SetConfig+0x348>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <UART_SetConfig+0x2e4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d138      	bne.n	8004cd2 <UART_SetConfig+0x2ee>
 8004c60:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <UART_SetConfig+0x2cc>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c6e:	d017      	beq.n	8004ca0 <UART_SetConfig+0x2bc>
 8004c70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c74:	d82a      	bhi.n	8004ccc <UART_SetConfig+0x2e8>
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7a:	d00b      	beq.n	8004c94 <UART_SetConfig+0x2b0>
 8004c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c80:	d824      	bhi.n	8004ccc <UART_SetConfig+0x2e8>
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <UART_SetConfig+0x2aa>
 8004c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8a:	d006      	beq.n	8004c9a <UART_SetConfig+0x2b6>
 8004c8c:	e01e      	b.n	8004ccc <UART_SetConfig+0x2e8>
 8004c8e:	2300      	movs	r3, #0
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e04b      	b.n	8004d2c <UART_SetConfig+0x348>
 8004c94:	2302      	movs	r3, #2
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e048      	b.n	8004d2c <UART_SetConfig+0x348>
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e045      	b.n	8004d2c <UART_SetConfig+0x348>
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e042      	b.n	8004d2c <UART_SetConfig+0x348>
 8004ca6:	bf00      	nop
 8004ca8:	efff69f3 	.word	0xefff69f3
 8004cac:	40011000 	.word	0x40011000
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	40004800 	.word	0x40004800
 8004cbc:	40004c00 	.word	0x40004c00
 8004cc0:	40005000 	.word	0x40005000
 8004cc4:	40011400 	.word	0x40011400
 8004cc8:	40007800 	.word	0x40007800
 8004ccc:	2310      	movs	r3, #16
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e02c      	b.n	8004d2c <UART_SetConfig+0x348>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a72      	ldr	r2, [pc, #456]	; (8004ea0 <UART_SetConfig+0x4bc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d125      	bne.n	8004d28 <UART_SetConfig+0x344>
 8004cdc:	4b71      	ldr	r3, [pc, #452]	; (8004ea4 <UART_SetConfig+0x4c0>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ce6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cea:	d017      	beq.n	8004d1c <UART_SetConfig+0x338>
 8004cec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cf0:	d817      	bhi.n	8004d22 <UART_SetConfig+0x33e>
 8004cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf6:	d00b      	beq.n	8004d10 <UART_SetConfig+0x32c>
 8004cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfc:	d811      	bhi.n	8004d22 <UART_SetConfig+0x33e>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <UART_SetConfig+0x326>
 8004d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d06:	d006      	beq.n	8004d16 <UART_SetConfig+0x332>
 8004d08:	e00b      	b.n	8004d22 <UART_SetConfig+0x33e>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e00d      	b.n	8004d2c <UART_SetConfig+0x348>
 8004d10:	2302      	movs	r3, #2
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e00a      	b.n	8004d2c <UART_SetConfig+0x348>
 8004d16:	2304      	movs	r3, #4
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e007      	b.n	8004d2c <UART_SetConfig+0x348>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	e004      	b.n	8004d2c <UART_SetConfig+0x348>
 8004d22:	2310      	movs	r3, #16
 8004d24:	77fb      	strb	r3, [r7, #31]
 8004d26:	e001      	b.n	8004d2c <UART_SetConfig+0x348>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d34:	d15b      	bne.n	8004dee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	2b08      	cmp	r3, #8
 8004d3a:	d828      	bhi.n	8004d8e <UART_SetConfig+0x3aa>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <UART_SetConfig+0x360>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	08004d79 	.word	0x08004d79
 8004d50:	08004d8f 	.word	0x08004d8f
 8004d54:	08004d7f 	.word	0x08004d7f
 8004d58:	08004d8f 	.word	0x08004d8f
 8004d5c:	08004d8f 	.word	0x08004d8f
 8004d60:	08004d8f 	.word	0x08004d8f
 8004d64:	08004d87 	.word	0x08004d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d68:	f7fe fd7c 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8004d6c:	61b8      	str	r0, [r7, #24]
        break;
 8004d6e:	e013      	b.n	8004d98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d70:	f7fe fd8c 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8004d74:	61b8      	str	r0, [r7, #24]
        break;
 8004d76:	e00f      	b.n	8004d98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d78:	4b4b      	ldr	r3, [pc, #300]	; (8004ea8 <UART_SetConfig+0x4c4>)
 8004d7a:	61bb      	str	r3, [r7, #24]
        break;
 8004d7c:	e00c      	b.n	8004d98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7e:	f7fe fc5f 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 8004d82:	61b8      	str	r0, [r7, #24]
        break;
 8004d84:	e008      	b.n	8004d98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8a:	61bb      	str	r3, [r7, #24]
        break;
 8004d8c:	e004      	b.n	8004d98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	77bb      	strb	r3, [r7, #30]
        break;
 8004d96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d074      	beq.n	8004e88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	005a      	lsls	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b0f      	cmp	r3, #15
 8004db8:	d916      	bls.n	8004de8 <UART_SetConfig+0x404>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d212      	bcs.n	8004de8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f023 030f 	bic.w	r3, r3, #15
 8004dca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	89fb      	ldrh	r3, [r7, #14]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	89fa      	ldrh	r2, [r7, #14]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	e04f      	b.n	8004e88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	77bb      	strb	r3, [r7, #30]
 8004dec:	e04c      	b.n	8004e88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dee:	7ffb      	ldrb	r3, [r7, #31]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d828      	bhi.n	8004e46 <UART_SetConfig+0x462>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <UART_SetConfig+0x418>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e47 	.word	0x08004e47
 8004e0c:	08004e37 	.word	0x08004e37
 8004e10:	08004e47 	.word	0x08004e47
 8004e14:	08004e47 	.word	0x08004e47
 8004e18:	08004e47 	.word	0x08004e47
 8004e1c:	08004e3f 	.word	0x08004e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e20:	f7fe fd20 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8004e24:	61b8      	str	r0, [r7, #24]
        break;
 8004e26:	e013      	b.n	8004e50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e28:	f7fe fd30 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8004e2c:	61b8      	str	r0, [r7, #24]
        break;
 8004e2e:	e00f      	b.n	8004e50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e30:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <UART_SetConfig+0x4c4>)
 8004e32:	61bb      	str	r3, [r7, #24]
        break;
 8004e34:	e00c      	b.n	8004e50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e36:	f7fe fc03 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 8004e3a:	61b8      	str	r0, [r7, #24]
        break;
 8004e3c:	e008      	b.n	8004e50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e42:	61bb      	str	r3, [r7, #24]
        break;
 8004e44:	e004      	b.n	8004e50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004e4e:	bf00      	nop
    }

    if (pclk != 0U)
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d018      	beq.n	8004e88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	085a      	lsrs	r2, r3, #1
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	441a      	add	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b0f      	cmp	r3, #15
 8004e6e:	d909      	bls.n	8004e84 <UART_SetConfig+0x4a0>
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e76:	d205      	bcs.n	8004e84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60da      	str	r2, [r3, #12]
 8004e82:	e001      	b.n	8004e88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e94:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40007c00 	.word	0x40007c00
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	00f42400 	.word	0x00f42400

08004eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	f003 0310 	and.w	r3, r3, #16
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00a      	beq.n	8004f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004faa:	d10a      	bne.n	8004fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	605a      	str	r2, [r3, #4]
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005000:	f7fc f896 	bl	8001130 <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b08      	cmp	r3, #8
 8005012:	d10e      	bne.n	8005032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 f81b 	bl	800505e <UART_WaitOnFlagUntilTimeout>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e011      	b.n	8005056 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2220      	movs	r2, #32
 8005036:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b09c      	sub	sp, #112	; 0x70
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	603b      	str	r3, [r7, #0]
 800506a:	4613      	mov	r3, r2
 800506c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	e0a7      	b.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	f000 80a3 	beq.w	80051c0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800507a:	f7fc f859 	bl	8001130 <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <UART_WaitOnFlagUntilTimeout+0x32>
 800508a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800508c:	2b00      	cmp	r3, #0
 800508e:	d13f      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050a4:	667b      	str	r3, [r7, #100]	; 0x64
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e6      	bne.n	8005090 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3308      	adds	r3, #8
 80050c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	e853 3f00 	ldrex	r3, [r3]
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f023 0301 	bic.w	r3, r3, #1
 80050d8:	663b      	str	r3, [r7, #96]	; 0x60
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3308      	adds	r3, #8
 80050e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80050e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ea:	e841 2300 	strex	r3, r2, [r1]
 80050ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1e5      	bne.n	80050c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e068      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d050      	beq.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800512c:	d148      	bne.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005136:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	e853 3f00 	ldrex	r3, [r3]
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800514c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
 8005158:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800515c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e6      	bne.n	8005138 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3308      	adds	r3, #8
 8005170:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	613b      	str	r3, [r7, #16]
   return(result);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	66bb      	str	r3, [r7, #104]	; 0x68
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3308      	adds	r3, #8
 8005188:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800518a:	623a      	str	r2, [r7, #32]
 800518c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518e:	69f9      	ldr	r1, [r7, #28]
 8005190:	6a3a      	ldr	r2, [r7, #32]
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	61bb      	str	r3, [r7, #24]
   return(result);
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e5      	bne.n	800516a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e010      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4013      	ands	r3, r2
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	bf0c      	ite	eq
 80051d0:	2301      	moveq	r3, #1
 80051d2:	2300      	movne	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	461a      	mov	r2, r3
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	429a      	cmp	r2, r3
 80051dc:	f43f af48 	beq.w	8005070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3770      	adds	r7, #112	; 0x70
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051ec:	b084      	sub	sp, #16
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	f107 001c 	add.w	r0, r7, #28
 80051fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2b01      	cmp	r3, #1
 8005202:	d120      	bne.n	8005246 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	4b20      	ldr	r3, [pc, #128]	; (8005298 <USB_CoreInit+0xac>)
 8005216:	4013      	ands	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa96 	bl	800576c <USB_CoreReset>
 8005240:	4603      	mov	r3, r0
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	e010      	b.n	8005268 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 fa8a 	bl	800576c <USB_CoreReset>
 8005258:	4603      	mov	r3, r0
 800525a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10b      	bne.n	8005286 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f043 0206 	orr.w	r2, r3, #6
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f043 0220 	orr.w	r2, r3, #32
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005286:	7bfb      	ldrb	r3, [r7, #15]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005292:	b004      	add	sp, #16
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	ffbdffbf 	.word	0xffbdffbf

0800529c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f023 0201 	bic.w	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b084      	sub	sp, #16
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	460b      	mov	r3, r1
 80052c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80052da:	78fb      	ldrb	r3, [r7, #3]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d115      	bne.n	800530c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80052ec:	2001      	movs	r0, #1
 80052ee:	f7fb ff2b 	bl	8001148 <HAL_Delay>
      ms++;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	3301      	adds	r3, #1
 80052f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fa29 	bl	8005750 <USB_GetMode>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b01      	cmp	r3, #1
 8005302:	d01e      	beq.n	8005342 <USB_SetCurrentMode+0x84>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b31      	cmp	r3, #49	; 0x31
 8005308:	d9f0      	bls.n	80052ec <USB_SetCurrentMode+0x2e>
 800530a:	e01a      	b.n	8005342 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d115      	bne.n	800533e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800531e:	2001      	movs	r0, #1
 8005320:	f7fb ff12 	bl	8001148 <HAL_Delay>
      ms++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa10 	bl	8005750 <USB_GetMode>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <USB_SetCurrentMode+0x84>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b31      	cmp	r3, #49	; 0x31
 800533a:	d9f0      	bls.n	800531e <USB_SetCurrentMode+0x60>
 800533c:	e001      	b.n	8005342 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e005      	b.n	800534e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b32      	cmp	r3, #50	; 0x32
 8005346:	d101      	bne.n	800534c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005358:	b084      	sub	sp, #16
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	e009      	b.n	800538c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3340      	adds	r3, #64	; 0x40
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	2200      	movs	r2, #0
 8005384:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	3301      	adds	r3, #1
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b0e      	cmp	r3, #14
 8005390:	d9f2      	bls.n	8005378 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d11c      	bne.n	80053d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a6:	f043 0302 	orr.w	r3, r3, #2
 80053aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	e005      	b.n	80053de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053e4:	461a      	mov	r2, r3
 80053e6:	2300      	movs	r3, #0
 80053e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	4619      	mov	r1, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	461a      	mov	r2, r3
 80053fa:	680b      	ldr	r3, [r1, #0]
 80053fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10c      	bne.n	800541e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005406:	2b00      	cmp	r3, #0
 8005408:	d104      	bne.n	8005414 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800540a:	2100      	movs	r1, #0
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f965 	bl	80056dc <USB_SetDevSpeed>
 8005412:	e008      	b.n	8005426 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005414:	2101      	movs	r1, #1
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f960 	bl	80056dc <USB_SetDevSpeed>
 800541c:	e003      	b.n	8005426 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800541e:	2103      	movs	r1, #3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f95b 	bl	80056dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005426:	2110      	movs	r1, #16
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f8f3 	bl	8005614 <USB_FlushTxFifo>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f91f 	bl	800567c <USB_FlushRxFifo>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800544e:	461a      	mov	r2, r3
 8005450:	2300      	movs	r3, #0
 8005452:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	461a      	mov	r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	e043      	b.n	80054fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005488:	d118      	bne.n	80054bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549c:	461a      	mov	r2, r3
 800549e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e013      	b.n	80054ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	461a      	mov	r2, r3
 80054b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e008      	b.n	80054ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	461a      	mov	r2, r3
 80054ca:	2300      	movs	r3, #0
 80054cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054da:	461a      	mov	r2, r3
 80054dc:	2300      	movs	r3, #0
 80054de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	461a      	mov	r2, r3
 80054ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	3301      	adds	r3, #1
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d3b7      	bcc.n	8005472 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	e043      	b.n	8005590 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800551a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800551e:	d118      	bne.n	8005552 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	e013      	b.n	8005564 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	461a      	mov	r2, r3
 800554a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	e008      	b.n	8005564 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	461a      	mov	r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005570:	461a      	mov	r2, r3
 8005572:	2300      	movs	r3, #0
 8005574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	461a      	mov	r2, r3
 8005584:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005588:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	3301      	adds	r3, #1
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	429a      	cmp	r2, r3
 8005596:	d3b7      	bcc.n	8005508 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f043 0210 	orr.w	r2, r3, #16
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	4b0e      	ldr	r3, [pc, #56]	; (800560c <USB_DevInit+0x2b4>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f043 0208 	orr.w	r2, r3, #8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d105      	bne.n	80055fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699a      	ldr	r2, [r3, #24]
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <USB_DevInit+0x2b8>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005608:	b004      	add	sp, #16
 800560a:	4770      	bx	lr
 800560c:	803c3800 	.word	0x803c3800
 8005610:	40000004 	.word	0x40000004

08005614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	3301      	adds	r3, #1
 8005626:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a13      	ldr	r2, [pc, #76]	; (8005678 <USB_FlushTxFifo+0x64>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d901      	bls.n	8005634 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e01b      	b.n	800566c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	2b00      	cmp	r3, #0
 800563a:	daf2      	bge.n	8005622 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	019b      	lsls	r3, r3, #6
 8005644:	f043 0220 	orr.w	r2, r3, #32
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4a08      	ldr	r2, [pc, #32]	; (8005678 <USB_FlushTxFifo+0x64>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e006      	b.n	800566c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b20      	cmp	r3, #32
 8005668:	d0f0      	beq.n	800564c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	00030d40 	.word	0x00030d40

0800567c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <USB_FlushRxFifo+0x5c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e018      	b.n	80056cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	daf2      	bge.n	8005688 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2210      	movs	r2, #16
 80056aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <USB_FlushRxFifo+0x5c>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e006      	b.n	80056cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d0f0      	beq.n	80056ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	00030d40 	.word	0x00030d40

080056dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fc:	4313      	orrs	r3, r2
 80056fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f003 0301 	and.w	r3, r3, #1
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4a13      	ldr	r2, [pc, #76]	; (80057d0 <USB_CoreReset+0x64>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e01b      	b.n	80057c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	daf2      	bge.n	8005778 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	f043 0201 	orr.w	r2, r3, #1
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3301      	adds	r3, #1
 80057a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <USB_CoreReset+0x64>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d901      	bls.n	80057b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e006      	b.n	80057c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d0f0      	beq.n	80057a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	00030d40 	.word	0x00030d40

080057d4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80057d4:	b5b0      	push	{r4, r5, r7, lr}
 80057d6:	b08c      	sub	sp, #48	; 0x30
 80057d8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80057da:	4b96      	ldr	r3, [pc, #600]	; (8005a34 <MX_LWIP_Init+0x260>)
 80057dc:	22c0      	movs	r2, #192	; 0xc0
 80057de:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80057e0:	4b94      	ldr	r3, [pc, #592]	; (8005a34 <MX_LWIP_Init+0x260>)
 80057e2:	22a8      	movs	r2, #168	; 0xa8
 80057e4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80057e6:	4b93      	ldr	r3, [pc, #588]	; (8005a34 <MX_LWIP_Init+0x260>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 80057ec:	4b91      	ldr	r3, [pc, #580]	; (8005a34 <MX_LWIP_Init+0x260>)
 80057ee:	2202      	movs	r2, #2
 80057f0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80057f2:	4b91      	ldr	r3, [pc, #580]	; (8005a38 <MX_LWIP_Init+0x264>)
 80057f4:	22ff      	movs	r2, #255	; 0xff
 80057f6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80057f8:	4b8f      	ldr	r3, [pc, #572]	; (8005a38 <MX_LWIP_Init+0x264>)
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80057fe:	4b8e      	ldr	r3, [pc, #568]	; (8005a38 <MX_LWIP_Init+0x264>)
 8005800:	22ff      	movs	r2, #255	; 0xff
 8005802:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005804:	4b8c      	ldr	r3, [pc, #560]	; (8005a38 <MX_LWIP_Init+0x264>)
 8005806:	2200      	movs	r2, #0
 8005808:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800580a:	4b8c      	ldr	r3, [pc, #560]	; (8005a3c <MX_LWIP_Init+0x268>)
 800580c:	22c0      	movs	r2, #192	; 0xc0
 800580e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005810:	4b8a      	ldr	r3, [pc, #552]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005812:	22a8      	movs	r2, #168	; 0xa8
 8005814:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8005816:	4b89      	ldr	r3, [pc, #548]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005818:	2201      	movs	r2, #1
 800581a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 800581c:	4b87      	ldr	r3, [pc, #540]	; (8005a3c <MX_LWIP_Init+0x268>)
 800581e:	2264      	movs	r2, #100	; 0x64
 8005820:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005822:	2100      	movs	r1, #0
 8005824:	2000      	movs	r0, #0
 8005826:	f004 f953 	bl	8009ad0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800582a:	4b82      	ldr	r3, [pc, #520]	; (8005a34 <MX_LWIP_Init+0x260>)
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	061a      	lsls	r2, r3, #24
 8005830:	4b80      	ldr	r3, [pc, #512]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	041b      	lsls	r3, r3, #16
 8005836:	431a      	orrs	r2, r3
 8005838:	4b7e      	ldr	r3, [pc, #504]	; (8005a34 <MX_LWIP_Init+0x260>)
 800583a:	789b      	ldrb	r3, [r3, #2]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	4313      	orrs	r3, r2
 8005840:	4a7c      	ldr	r2, [pc, #496]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005842:	78d2      	ldrb	r2, [r2, #3]
 8005844:	4313      	orrs	r3, r2
 8005846:	061a      	lsls	r2, r3, #24
 8005848:	4b7a      	ldr	r3, [pc, #488]	; (8005a34 <MX_LWIP_Init+0x260>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	0619      	lsls	r1, r3, #24
 800584e:	4b79      	ldr	r3, [pc, #484]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	041b      	lsls	r3, r3, #16
 8005854:	4319      	orrs	r1, r3
 8005856:	4b77      	ldr	r3, [pc, #476]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005858:	789b      	ldrb	r3, [r3, #2]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	430b      	orrs	r3, r1
 800585e:	4975      	ldr	r1, [pc, #468]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005860:	78c9      	ldrb	r1, [r1, #3]
 8005862:	430b      	orrs	r3, r1
 8005864:	021b      	lsls	r3, r3, #8
 8005866:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800586a:	431a      	orrs	r2, r3
 800586c:	4b71      	ldr	r3, [pc, #452]	; (8005a34 <MX_LWIP_Init+0x260>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	0619      	lsls	r1, r3, #24
 8005872:	4b70      	ldr	r3, [pc, #448]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	041b      	lsls	r3, r3, #16
 8005878:	4319      	orrs	r1, r3
 800587a:	4b6e      	ldr	r3, [pc, #440]	; (8005a34 <MX_LWIP_Init+0x260>)
 800587c:	789b      	ldrb	r3, [r3, #2]
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	430b      	orrs	r3, r1
 8005882:	496c      	ldr	r1, [pc, #432]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005884:	78c9      	ldrb	r1, [r1, #3]
 8005886:	430b      	orrs	r3, r1
 8005888:	0a1b      	lsrs	r3, r3, #8
 800588a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800588e:	431a      	orrs	r2, r3
 8005890:	4b68      	ldr	r3, [pc, #416]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	0619      	lsls	r1, r3, #24
 8005896:	4b67      	ldr	r3, [pc, #412]	; (8005a34 <MX_LWIP_Init+0x260>)
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	4319      	orrs	r1, r3
 800589e:	4b65      	ldr	r3, [pc, #404]	; (8005a34 <MX_LWIP_Init+0x260>)
 80058a0:	789b      	ldrb	r3, [r3, #2]
 80058a2:	021b      	lsls	r3, r3, #8
 80058a4:	430b      	orrs	r3, r1
 80058a6:	4963      	ldr	r1, [pc, #396]	; (8005a34 <MX_LWIP_Init+0x260>)
 80058a8:	78c9      	ldrb	r1, [r1, #3]
 80058aa:	430b      	orrs	r3, r1
 80058ac:	0e1b      	lsrs	r3, r3, #24
 80058ae:	4313      	orrs	r3, r2
 80058b0:	4a63      	ldr	r2, [pc, #396]	; (8005a40 <MX_LWIP_Init+0x26c>)
 80058b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80058b4:	4b60      	ldr	r3, [pc, #384]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	061a      	lsls	r2, r3, #24
 80058ba:	4b5f      	ldr	r3, [pc, #380]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058bc:	785b      	ldrb	r3, [r3, #1]
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	431a      	orrs	r2, r3
 80058c2:	4b5d      	ldr	r3, [pc, #372]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058c4:	789b      	ldrb	r3, [r3, #2]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	4313      	orrs	r3, r2
 80058ca:	4a5b      	ldr	r2, [pc, #364]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058cc:	78d2      	ldrb	r2, [r2, #3]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	061a      	lsls	r2, r3, #24
 80058d2:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	0619      	lsls	r1, r3, #24
 80058d8:	4b57      	ldr	r3, [pc, #348]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	4319      	orrs	r1, r3
 80058e0:	4b55      	ldr	r3, [pc, #340]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058e2:	789b      	ldrb	r3, [r3, #2]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	430b      	orrs	r3, r1
 80058e8:	4953      	ldr	r1, [pc, #332]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058ea:	78c9      	ldrb	r1, [r1, #3]
 80058ec:	430b      	orrs	r3, r1
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058f4:	431a      	orrs	r2, r3
 80058f6:	4b50      	ldr	r3, [pc, #320]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	0619      	lsls	r1, r3, #24
 80058fc:	4b4e      	ldr	r3, [pc, #312]	; (8005a38 <MX_LWIP_Init+0x264>)
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	4319      	orrs	r1, r3
 8005904:	4b4c      	ldr	r3, [pc, #304]	; (8005a38 <MX_LWIP_Init+0x264>)
 8005906:	789b      	ldrb	r3, [r3, #2]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	430b      	orrs	r3, r1
 800590c:	494a      	ldr	r1, [pc, #296]	; (8005a38 <MX_LWIP_Init+0x264>)
 800590e:	78c9      	ldrb	r1, [r1, #3]
 8005910:	430b      	orrs	r3, r1
 8005912:	0a1b      	lsrs	r3, r3, #8
 8005914:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005918:	431a      	orrs	r2, r3
 800591a:	4b47      	ldr	r3, [pc, #284]	; (8005a38 <MX_LWIP_Init+0x264>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	0619      	lsls	r1, r3, #24
 8005920:	4b45      	ldr	r3, [pc, #276]	; (8005a38 <MX_LWIP_Init+0x264>)
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	4319      	orrs	r1, r3
 8005928:	4b43      	ldr	r3, [pc, #268]	; (8005a38 <MX_LWIP_Init+0x264>)
 800592a:	789b      	ldrb	r3, [r3, #2]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	430b      	orrs	r3, r1
 8005930:	4941      	ldr	r1, [pc, #260]	; (8005a38 <MX_LWIP_Init+0x264>)
 8005932:	78c9      	ldrb	r1, [r1, #3]
 8005934:	430b      	orrs	r3, r1
 8005936:	0e1b      	lsrs	r3, r3, #24
 8005938:	4313      	orrs	r3, r2
 800593a:	4a42      	ldr	r2, [pc, #264]	; (8005a44 <MX_LWIP_Init+0x270>)
 800593c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800593e:	4b3f      	ldr	r3, [pc, #252]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	061a      	lsls	r2, r3, #24
 8005944:	4b3d      	ldr	r3, [pc, #244]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	041b      	lsls	r3, r3, #16
 800594a:	431a      	orrs	r2, r3
 800594c:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <MX_LWIP_Init+0x268>)
 800594e:	789b      	ldrb	r3, [r3, #2]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	4313      	orrs	r3, r2
 8005954:	4a39      	ldr	r2, [pc, #228]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005956:	78d2      	ldrb	r2, [r2, #3]
 8005958:	4313      	orrs	r3, r2
 800595a:	061a      	lsls	r2, r3, #24
 800595c:	4b37      	ldr	r3, [pc, #220]	; (8005a3c <MX_LWIP_Init+0x268>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	0619      	lsls	r1, r3, #24
 8005962:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	4319      	orrs	r1, r3
 800596a:	4b34      	ldr	r3, [pc, #208]	; (8005a3c <MX_LWIP_Init+0x268>)
 800596c:	789b      	ldrb	r3, [r3, #2]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	430b      	orrs	r3, r1
 8005972:	4932      	ldr	r1, [pc, #200]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005974:	78c9      	ldrb	r1, [r1, #3]
 8005976:	430b      	orrs	r3, r1
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800597e:	431a      	orrs	r2, r3
 8005980:	4b2e      	ldr	r3, [pc, #184]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	0619      	lsls	r1, r3, #24
 8005986:	4b2d      	ldr	r3, [pc, #180]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	4319      	orrs	r1, r3
 800598e:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005990:	789b      	ldrb	r3, [r3, #2]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	430b      	orrs	r3, r1
 8005996:	4929      	ldr	r1, [pc, #164]	; (8005a3c <MX_LWIP_Init+0x268>)
 8005998:	78c9      	ldrb	r1, [r1, #3]
 800599a:	430b      	orrs	r3, r1
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80059a2:	431a      	orrs	r2, r3
 80059a4:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <MX_LWIP_Init+0x268>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	0619      	lsls	r1, r3, #24
 80059aa:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <MX_LWIP_Init+0x268>)
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	4319      	orrs	r1, r3
 80059b2:	4b22      	ldr	r3, [pc, #136]	; (8005a3c <MX_LWIP_Init+0x268>)
 80059b4:	789b      	ldrb	r3, [r3, #2]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	430b      	orrs	r3, r1
 80059ba:	4920      	ldr	r1, [pc, #128]	; (8005a3c <MX_LWIP_Init+0x268>)
 80059bc:	78c9      	ldrb	r1, [r1, #3]
 80059be:	430b      	orrs	r3, r1
 80059c0:	0e1b      	lsrs	r3, r3, #24
 80059c2:	4313      	orrs	r3, r2
 80059c4:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <MX_LWIP_Init+0x274>)
 80059c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <MX_LWIP_Init+0x278>)
 80059ca:	9302      	str	r3, [sp, #8]
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <MX_LWIP_Init+0x27c>)
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	4b1c      	ldr	r3, [pc, #112]	; (8005a48 <MX_LWIP_Init+0x274>)
 80059d6:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <MX_LWIP_Init+0x270>)
 80059d8:	4919      	ldr	r1, [pc, #100]	; (8005a40 <MX_LWIP_Init+0x26c>)
 80059da:	481e      	ldr	r0, [pc, #120]	; (8005a54 <MX_LWIP_Init+0x280>)
 80059dc:	f005 f9b4 	bl	800ad48 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80059e0:	481c      	ldr	r0, [pc, #112]	; (8005a54 <MX_LWIP_Init+0x280>)
 80059e2:	f005 fb63 	bl	800b0ac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80059e6:	4b1b      	ldr	r3, [pc, #108]	; (8005a54 <MX_LWIP_Init+0x280>)
 80059e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80059ec:	089b      	lsrs	r3, r3, #2
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80059f8:	4816      	ldr	r0, [pc, #88]	; (8005a54 <MX_LWIP_Init+0x280>)
 80059fa:	f005 fb67 	bl	800b0cc <netif_set_up>
 80059fe:	e002      	b.n	8005a06 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005a00:	4814      	ldr	r0, [pc, #80]	; (8005a54 <MX_LWIP_Init+0x280>)
 8005a02:	f005 fbcf 	bl	800b1a4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005a06:	4914      	ldr	r1, [pc, #80]	; (8005a58 <MX_LWIP_Init+0x284>)
 8005a08:	4812      	ldr	r0, [pc, #72]	; (8005a54 <MX_LWIP_Init+0x280>)
 8005a0a:	f005 fc61 	bl	800b2d0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, 1, 0, configMINIMAL_STACK_SIZE *2);
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <MX_LWIP_Init+0x288>)
 8005a10:	1d3c      	adds	r4, r7, #4
 8005a12:	461d      	mov	r5, r3
 8005a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005a20:	1d3b      	adds	r3, r7, #4
 8005a22:	490c      	ldr	r1, [pc, #48]	; (8005a54 <MX_LWIP_Init+0x280>)
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fd47 	bl	80064b8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005a2a:	bf00      	nop
 8005a2c:	3720      	adds	r7, #32
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bdb0      	pop	{r4, r5, r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20000af0 	.word	0x20000af0
 8005a38:	20000af4 	.word	0x20000af4
 8005a3c:	20000af8 	.word	0x20000af8
 8005a40:	20000ae4 	.word	0x20000ae4
 8005a44:	20000ae8 	.word	0x20000ae8
 8005a48:	20000aec 	.word	0x20000aec
 8005a4c:	08009a0d 	.word	0x08009a0d
 8005a50:	08005f59 	.word	0x08005f59
 8005a54:	20000ab0 	.word	0x20000ab0
 8005a58:	08005a61 	.word	0x08005a61
 8005a5c:	08016728 	.word	0x08016728

08005a60 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005a86:	2320      	movs	r3, #32
 8005a88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a8a:	f3bf 8f4f 	dsb	sy
}
 8005a8e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005a90:	e00b      	b.n	8005aaa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005a92:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dcf0      	bgt.n	8005a92 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ab0:	f3bf 8f4f 	dsb	sy
}
 8005ab4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005ab6:	f3bf 8f6f 	isb	sy
}
 8005aba:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005abc:	bf00      	nop
 8005abe:	371c      	adds	r7, #28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	e000ed00 	.word	0xe000ed00

08005acc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005ad4:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <HAL_ETH_RxCpltCallback+0x1c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 fe37 	bl	800674c <osSemaphoreRelease>
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20005488 	.word	0x20005488

08005aec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005af4:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <HAL_ETH_TxCpltCallback+0x1c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fe27 	bl	800674c <osSemaphoreRelease>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	2000548c 	.word	0x2000548c

08005b0c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7fc fabb 	bl	8002090 <HAL_ETH_GetDMAError>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b20:	2b80      	cmp	r3, #128	; 0x80
 8005b22:	d104      	bne.n	8005b2e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005b24:	4b04      	ldr	r3, [pc, #16]	; (8005b38 <HAL_ETH_ErrorCallback+0x2c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fe0f 	bl	800674c <osSemaphoreRelease>
  }
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20005488 	.word	0x20005488

08005b3c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005b3c:	b5b0      	push	{r4, r5, r7, lr}
 8005b3e:	b0a8      	sub	sp, #160	; 0xa0
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8005b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005b5a:	2264      	movs	r2, #100	; 0x64
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f00f fbc1 	bl	80152e6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005b64:	4b85      	ldr	r3, [pc, #532]	; (8005d7c <low_level_init+0x240>)
 8005b66:	4a86      	ldr	r2, [pc, #536]	; (8005d80 <low_level_init+0x244>)
 8005b68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8005b76:	23e1      	movs	r3, #225	; 0xe1
 8005b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005b8e:	4a7b      	ldr	r2, [pc, #492]	; (8005d7c <low_level_init+0x240>)
 8005b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b94:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005b96:	4b79      	ldr	r3, [pc, #484]	; (8005d7c <low_level_init+0x240>)
 8005b98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b9c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005b9e:	4b77      	ldr	r3, [pc, #476]	; (8005d7c <low_level_init+0x240>)
 8005ba0:	4a78      	ldr	r2, [pc, #480]	; (8005d84 <low_level_init+0x248>)
 8005ba2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005ba4:	4b75      	ldr	r3, [pc, #468]	; (8005d7c <low_level_init+0x240>)
 8005ba6:	4a78      	ldr	r2, [pc, #480]	; (8005d88 <low_level_init+0x24c>)
 8005ba8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005baa:	4b74      	ldr	r3, [pc, #464]	; (8005d7c <low_level_init+0x240>)
 8005bac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005bb0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005bb2:	4872      	ldr	r0, [pc, #456]	; (8005d7c <low_level_init+0x240>)
 8005bb4:	f7fb fbce 	bl	8001354 <HAL_ETH_Init>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005bbe:	2238      	movs	r2, #56	; 0x38
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4872      	ldr	r0, [pc, #456]	; (8005d8c <low_level_init+0x250>)
 8005bc4:	f00f fb8f 	bl	80152e6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005bc8:	4b70      	ldr	r3, [pc, #448]	; (8005d8c <low_level_init+0x250>)
 8005bca:	2221      	movs	r2, #33	; 0x21
 8005bcc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005bce:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <low_level_init+0x250>)
 8005bd0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005bd4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005bd6:	4b6d      	ldr	r3, [pc, #436]	; (8005d8c <low_level_init+0x250>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005bdc:	486c      	ldr	r0, [pc, #432]	; (8005d90 <low_level_init+0x254>)
 8005bde:	f004 ff6d 	bl	800aabc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2206      	movs	r2, #6
 8005be6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005bea:	4b64      	ldr	r3, [pc, #400]	; (8005d7c <low_level_init+0x240>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005bf6:	4b61      	ldr	r3, [pc, #388]	; (8005d7c <low_level_init+0x240>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	785a      	ldrb	r2, [r3, #1]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005c02:	4b5e      	ldr	r3, [pc, #376]	; (8005d7c <low_level_init+0x240>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	789a      	ldrb	r2, [r3, #2]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005c0e:	4b5b      	ldr	r3, [pc, #364]	; (8005d7c <low_level_init+0x240>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	78da      	ldrb	r2, [r3, #3]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005c1a:	4b58      	ldr	r3, [pc, #352]	; (8005d7c <low_level_init+0x240>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	791a      	ldrb	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005c26:	4b55      	ldr	r3, [pc, #340]	; (8005d7c <low_level_init+0x240>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	795a      	ldrb	r2, [r3, #5]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005c38:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005c40:	f043 030a 	orr.w	r3, r3, #10
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	2100      	movs	r1, #0
 8005c50:	2001      	movs	r0, #1
 8005c52:	f001 f82d 	bl	8006cb0 <xQueueGenericCreate>
 8005c56:	4603      	mov	r3, r0
 8005c58:	4a4e      	ldr	r2, [pc, #312]	; (8005d94 <low_level_init+0x258>)
 8005c5a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005c5c:	2203      	movs	r2, #3
 8005c5e:	2100      	movs	r1, #0
 8005c60:	2001      	movs	r0, #1
 8005c62:	f001 f825 	bl	8006cb0 <xQueueGenericCreate>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4a4b      	ldr	r2, [pc, #300]	; (8005d98 <low_level_init+0x25c>)
 8005c6a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005c6c:	4b4b      	ldr	r3, [pc, #300]	; (8005d9c <low_level_init+0x260>)
 8005c6e:	f107 0408 	add.w	r4, r7, #8
 8005c72:	461d      	mov	r5, r3
 8005c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005c80:	f107 0308 	add.w	r3, r7, #8
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fc16 	bl	80064b8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005c8c:	4944      	ldr	r1, [pc, #272]	; (8005da0 <low_level_init+0x264>)
 8005c8e:	4845      	ldr	r0, [pc, #276]	; (8005da4 <low_level_init+0x268>)
 8005c90:	f7fb f8cb 	bl	8000e2a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005c94:	4843      	ldr	r0, [pc, #268]	; (8005da4 <low_level_init+0x268>)
 8005c96:	f7fb f8fa 	bl	8000e8e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005c9a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d165      	bne.n	8005d6e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005ca2:	4840      	ldr	r0, [pc, #256]	; (8005da4 <low_level_init+0x268>)
 8005ca4:	f7fb f99b 	bl	8000fde <LAN8742_GetLinkState>
 8005ca8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005cac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	dc06      	bgt.n	8005cc2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f005 fadb 	bl	800b270 <netif_set_link_down>
      netif_set_down(netif);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f005 fa72 	bl	800b1a4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005cc0:	e057      	b.n	8005d72 <low_level_init+0x236>
      switch (PHYLinkState)
 8005cc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cc6:	3b02      	subs	r3, #2
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d82b      	bhi.n	8005d24 <low_level_init+0x1e8>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <low_level_init+0x198>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005cf7 	.word	0x08005cf7
 8005cdc:	08005d07 	.word	0x08005d07
 8005ce0:	08005d17 	.word	0x08005d17
        duplex = ETH_FULLDUPLEX_MODE;
 8005ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005cec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005cf4:	e01f      	b.n	8005d36 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005cfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005d04:	e017      	b.n	8005d36 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005d14:	e00f      	b.n	8005d36 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005d22:	e008      	b.n	8005d36 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005d2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005d34:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	480f      	ldr	r0, [pc, #60]	; (8005d7c <low_level_init+0x240>)
 8005d3e:	f7fc f84d 	bl	8001ddc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d46:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8005d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d4c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005d4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d52:	4619      	mov	r1, r3
 8005d54:	4809      	ldr	r0, [pc, #36]	; (8005d7c <low_level_init+0x240>)
 8005d56:	f7fc f92b 	bl	8001fb0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005d5a:	4808      	ldr	r0, [pc, #32]	; (8005d7c <low_level_init+0x240>)
 8005d5c:	f7fb fbd6 	bl	800150c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f005 f9b3 	bl	800b0cc <netif_set_up>
    netif_set_link_up(netif);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f005 fa4e 	bl	800b208 <netif_set_link_up>
}
 8005d6c:	e001      	b.n	8005d72 <low_level_init+0x236>
    Error_Handler();
 8005d6e:	f7fa fdef 	bl	8000950 <Error_Handler>
}
 8005d72:	bf00      	nop
 8005d74:	37a0      	adds	r7, #160	; 0xa0
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bdb0      	pop	{r4, r5, r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20005490 	.word	0x20005490
 8005d80:	40028000 	.word	0x40028000
 8005d84:	20000158 	.word	0x20000158
 8005d88:	200000b8 	.word	0x200000b8
 8005d8c:	20005540 	.word	0x20005540
 8005d90:	08019568 	.word	0x08019568
 8005d94:	20005488 	.word	0x20005488
 8005d98:	2000548c 	.word	0x2000548c
 8005d9c:	0801674c 	.word	0x0801674c
 8005da0:	2000000c 	.word	0x2000000c
 8005da4:	20005578 	.word	0x20005578

08005da8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b092      	sub	sp, #72	; 0x48
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005dc0:	f107 030c 	add.w	r3, r7, #12
 8005dc4:	2230      	movs	r2, #48	; 0x30
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f00f fa8c 	bl	80152e6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005dce:	f107 030c 	add.w	r3, r7, #12
 8005dd2:	2230      	movs	r2, #48	; 0x30
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f00f fa85 	bl	80152e6 <memset>

  for(q = p; q != NULL; q = q->next)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	643b      	str	r3, [r7, #64]	; 0x40
 8005de0:	e045      	b.n	8005e6e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d902      	bls.n	8005dee <low_level_output+0x46>
      return ERR_IF;
 8005de8:	f06f 030b 	mvn.w	r3, #11
 8005dec:	e065      	b.n	8005eba <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df0:	6859      	ldr	r1, [r3, #4]
 8005df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005df4:	4613      	mov	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	3348      	adds	r3, #72	; 0x48
 8005dfe:	443b      	add	r3, r7
 8005e00:	3b3c      	subs	r3, #60	; 0x3c
 8005e02:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e06:	895b      	ldrh	r3, [r3, #10]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	3348      	adds	r3, #72	; 0x48
 8005e16:	443b      	add	r3, r7
 8005e18:	3b38      	subs	r3, #56	; 0x38
 8005e1a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d011      	beq.n	8005e46 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e24:	1e5a      	subs	r2, r3, #1
 8005e26:	f107 000c 	add.w	r0, r7, #12
 8005e2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	440b      	add	r3, r1
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	18c1      	adds	r1, r0, r3
 8005e36:	4613      	mov	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	3348      	adds	r3, #72	; 0x48
 8005e40:	443b      	add	r3, r7
 8005e42:	3b34      	subs	r3, #52	; 0x34
 8005e44:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e50:	4613      	mov	r3, r2
 8005e52:	005b      	lsls	r3, r3, #1
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	3348      	adds	r3, #72	; 0x48
 8005e5a:	443b      	add	r3, r7
 8005e5c:	3b34      	subs	r3, #52	; 0x34
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005e62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e64:	3301      	adds	r3, #1
 8005e66:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1b6      	bne.n	8005de2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	891b      	ldrh	r3, [r3, #8]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4b12      	ldr	r3, [pc, #72]	; (8005ec4 <low_level_output+0x11c>)
 8005e7c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005e7e:	4a11      	ldr	r2, [pc, #68]	; (8005ec4 <low_level_output+0x11c>)
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005e86:	4a0f      	ldr	r2, [pc, #60]	; (8005ec4 <low_level_output+0x11c>)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005e8c:	6838      	ldr	r0, [r7, #0]
 8005e8e:	f005 fe71 	bl	800bb74 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005e92:	490c      	ldr	r1, [pc, #48]	; (8005ec4 <low_level_output+0x11c>)
 8005e94:	480c      	ldr	r0, [pc, #48]	; (8005ec8 <low_level_output+0x120>)
 8005e96:	f7fb fc47 	bl	8001728 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005e9a:	bf00      	nop
 8005e9c:	4b0b      	ldr	r3, [pc, #44]	; (8005ecc <low_level_output+0x124>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fc03 	bl	80066b0 <osSemaphoreWait>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1f5      	bne.n	8005e9c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005eb0:	4805      	ldr	r0, [pc, #20]	; (8005ec8 <low_level_output+0x120>)
 8005eb2:	f7fb fdcd 	bl	8001a50 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005eb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3748      	adds	r7, #72	; 0x48
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20005540 	.word	0x20005540
 8005ec8:	20005490 	.word	0x20005490
 8005ecc:	2000548c 	.word	0x2000548c

08005ed0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005edc:	4b07      	ldr	r3, [pc, #28]	; (8005efc <low_level_input+0x2c>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005ee4:	f107 030c 	add.w	r3, r7, #12
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4805      	ldr	r0, [pc, #20]	; (8005f00 <low_level_input+0x30>)
 8005eec:	f7fb fc78 	bl	80017e0 <HAL_ETH_ReadData>
  }

  return p;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20005484 	.word	0x20005484
 8005f00:	20005490 	.word	0x20005490

08005f04 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f14:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <ethernetif_input+0x50>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f04f 31ff 	mov.w	r1, #4294967295
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fbc7 	bl	80066b0 <osSemaphoreWait>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1f5      	bne.n	8005f14 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005f28:	68b8      	ldr	r0, [r7, #8]
 8005f2a:	f7ff ffd1 	bl	8005ed0 <low_level_input>
 8005f2e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	4798      	blx	r3
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f005 fd6e 	bl	800ba28 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1ea      	bne.n	8005f28 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005f52:	e7df      	b.n	8005f14 <ethernetif_input+0x10>
 8005f54:	20005488 	.word	0x20005488

08005f58 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <ethernetif_init+0x1c>
 8005f66:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <ethernetif_init+0x48>)
 8005f68:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005f6c:	490d      	ldr	r1, [pc, #52]	; (8005fa4 <ethernetif_init+0x4c>)
 8005f6e:	480e      	ldr	r0, [pc, #56]	; (8005fa8 <ethernetif_init+0x50>)
 8005f70:	f00f fa56 	bl	8015420 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2273      	movs	r2, #115	; 0x73
 8005f78:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2274      	movs	r2, #116	; 0x74
 8005f80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a09      	ldr	r2, [pc, #36]	; (8005fac <ethernetif_init+0x54>)
 8005f88:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <ethernetif_init+0x58>)
 8005f8e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff fdd3 	bl	8005b3c <low_level_init>

  return ERR_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	08016768 	.word	0x08016768
 8005fa4:	08016784 	.word	0x08016784
 8005fa8:	08016794 	.word	0x08016794
 8005fac:	0801297d 	.word	0x0801297d
 8005fb0:	08005da9 	.word	0x08005da9

08005fb4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005fc0:	68f9      	ldr	r1, [r7, #12]
 8005fc2:	4809      	ldr	r0, [pc, #36]	; (8005fe8 <pbuf_free_custom+0x34>)
 8005fc4:	f004 fe6a 	bl	800ac9c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <pbuf_free_custom+0x38>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <pbuf_free_custom+0x38>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005fd6:	4b06      	ldr	r3, [pc, #24]	; (8005ff0 <pbuf_free_custom+0x3c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fbb6 	bl	800674c <osSemaphoreRelease>
  }
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	08019568 	.word	0x08019568
 8005fec:	20005484 	.word	0x20005484
 8005ff0:	20005488 	.word	0x20005488

08005ff4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ff8:	f7fb f89a 	bl	8001130 <HAL_GetTick>
 8005ffc:	4603      	mov	r3, r0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	bd80      	pop	{r7, pc}
	...

08006004 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08e      	sub	sp, #56	; 0x38
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800600c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	609a      	str	r2, [r3, #8]
 8006018:	60da      	str	r2, [r3, #12]
 800601a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a52      	ldr	r2, [pc, #328]	; (800616c <HAL_ETH_MspInit+0x168>)
 8006022:	4293      	cmp	r3, r2
 8006024:	f040 809e 	bne.w	8006164 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006028:	4b51      	ldr	r3, [pc, #324]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	4a50      	ldr	r2, [pc, #320]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 800602e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006032:	6313      	str	r3, [r2, #48]	; 0x30
 8006034:	4b4e      	ldr	r3, [pc, #312]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603c:	623b      	str	r3, [r7, #32]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	4b4b      	ldr	r3, [pc, #300]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	4a4a      	ldr	r2, [pc, #296]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 8006046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800604a:	6313      	str	r3, [r2, #48]	; 0x30
 800604c:	4b48      	ldr	r3, [pc, #288]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	4b45      	ldr	r3, [pc, #276]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	4a44      	ldr	r2, [pc, #272]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 800605e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006062:	6313      	str	r3, [r2, #48]	; 0x30
 8006064:	4b42      	ldr	r3, [pc, #264]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006070:	4b3f      	ldr	r3, [pc, #252]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	4a3e      	ldr	r2, [pc, #248]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	6313      	str	r3, [r2, #48]	; 0x30
 800607c:	4b3c      	ldr	r3, [pc, #240]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 800607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006088:	4b39      	ldr	r3, [pc, #228]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	4a38      	ldr	r2, [pc, #224]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	6313      	str	r3, [r2, #48]	; 0x30
 8006094:	4b36      	ldr	r3, [pc, #216]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060a0:	4b33      	ldr	r3, [pc, #204]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	4a32      	ldr	r2, [pc, #200]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 80060a6:	f043 0302 	orr.w	r3, r3, #2
 80060aa:	6313      	str	r3, [r2, #48]	; 0x30
 80060ac:	4b30      	ldr	r3, [pc, #192]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060b8:	4b2d      	ldr	r3, [pc, #180]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	4a2c      	ldr	r2, [pc, #176]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 80060be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060c2:	6313      	str	r3, [r2, #48]	; 0x30
 80060c4:	4b2a      	ldr	r3, [pc, #168]	; (8006170 <HAL_ETH_MspInit+0x16c>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060d0:	2332      	movs	r3, #50	; 0x32
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d4:	2302      	movs	r3, #2
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d8:	2300      	movs	r3, #0
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060dc:	2303      	movs	r3, #3
 80060de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060e0:	230b      	movs	r3, #11
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060e8:	4619      	mov	r1, r3
 80060ea:	4822      	ldr	r0, [pc, #136]	; (8006174 <HAL_ETH_MspInit+0x170>)
 80060ec:	f7fc fbe0 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80060f0:	2386      	movs	r3, #134	; 0x86
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f4:	2302      	movs	r3, #2
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fc:	2303      	movs	r3, #3
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006100:	230b      	movs	r3, #11
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006108:	4619      	mov	r1, r3
 800610a:	481b      	ldr	r0, [pc, #108]	; (8006178 <HAL_ETH_MspInit+0x174>)
 800610c:	f7fc fbd0 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006116:	2302      	movs	r3, #2
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611a:	2300      	movs	r3, #0
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800611e:	2303      	movs	r3, #3
 8006120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006122:	230b      	movs	r3, #11
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800612a:	4619      	mov	r1, r3
 800612c:	4813      	ldr	r0, [pc, #76]	; (800617c <HAL_ETH_MspInit+0x178>)
 800612e:	f7fc fbbf 	bl	80028b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006132:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006138:	2302      	movs	r3, #2
 800613a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006140:	2303      	movs	r3, #3
 8006142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006144:	230b      	movs	r3, #11
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800614c:	4619      	mov	r1, r3
 800614e:	480c      	ldr	r0, [pc, #48]	; (8006180 <HAL_ETH_MspInit+0x17c>)
 8006150:	f7fc fbae 	bl	80028b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006154:	2200      	movs	r2, #0
 8006156:	2105      	movs	r1, #5
 8006158:	203d      	movs	r0, #61	; 0x3d
 800615a:	f7fb f8d1 	bl	8001300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800615e:	203d      	movs	r0, #61	; 0x3d
 8006160:	f7fb f8ea 	bl	8001338 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006164:	bf00      	nop
 8006166:	3738      	adds	r7, #56	; 0x38
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40028000 	.word	0x40028000
 8006170:	40023800 	.word	0x40023800
 8006174:	40020800 	.word	0x40020800
 8006178:	40020000 	.word	0x40020000
 800617c:	40020400 	.word	0x40020400
 8006180:	40021800 	.word	0x40021800

08006184 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006188:	4802      	ldr	r0, [pc, #8]	; (8006194 <ETH_PHY_IO_Init+0x10>)
 800618a:	f7fb ff2b 	bl	8001fe4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	bd80      	pop	{r7, pc}
 8006194:	20005490 	.word	0x20005490

08006198 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  return 0;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	68f9      	ldr	r1, [r7, #12]
 80061ba:	4807      	ldr	r0, [pc, #28]	; (80061d8 <ETH_PHY_IO_ReadReg+0x30>)
 80061bc:	f7fb fd7a 	bl	8001cb4 <HAL_ETH_ReadPHYRegister>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80061c6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ca:	e000      	b.n	80061ce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20005490 	.word	0x20005490

080061dc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	68f9      	ldr	r1, [r7, #12]
 80061ee:	4807      	ldr	r0, [pc, #28]	; (800620c <ETH_PHY_IO_WriteReg+0x30>)
 80061f0:	f7fb fdab 	bl	8001d4a <HAL_ETH_WritePHYRegister>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80061fa:	f04f 33ff 	mov.w	r3, #4294967295
 80061fe:	e000      	b.n	8006202 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20005490 	.word	0x20005490

08006210 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006214:	f7fa ff8c 	bl	8001130 <HAL_GetTick>
 8006218:	4603      	mov	r3, r0
}
 800621a:	4618      	mov	r0, r3
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b0a0      	sub	sp, #128	; 0x80
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	2264      	movs	r2, #100	; 0x64
 800622e:	2100      	movs	r1, #0
 8006230:	4618      	mov	r0, r3
 8006232:	f00f f858 	bl	80152e6 <memset>
  int32_t PHYLinkState = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800623e:	2300      	movs	r3, #0
 8006240:	67bb      	str	r3, [r7, #120]	; 0x78
 8006242:	2300      	movs	r3, #0
 8006244:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800624a:	483a      	ldr	r0, [pc, #232]	; (8006334 <ethernet_link_thread+0x114>)
 800624c:	f7fa fec7 	bl	8000fde <LAN8742_GetLinkState>
 8006250:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006254:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00c      	beq.n	800627e <ethernet_link_thread+0x5e>
 8006264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006266:	2b01      	cmp	r3, #1
 8006268:	dc09      	bgt.n	800627e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800626a:	4833      	ldr	r0, [pc, #204]	; (8006338 <ethernet_link_thread+0x118>)
 800626c:	f7fb f9dc 	bl	8001628 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006270:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006272:	f004 ff97 	bl	800b1a4 <netif_set_down>
    netif_set_link_down(netif);
 8006276:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006278:	f004 fffa 	bl	800b270 <netif_set_link_down>
 800627c:	e055      	b.n	800632a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800627e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d14e      	bne.n	800632a <ethernet_link_thread+0x10a>
 800628c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800628e:	2b01      	cmp	r3, #1
 8006290:	dd4b      	ble.n	800632a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006294:	3b02      	subs	r3, #2
 8006296:	2b03      	cmp	r3, #3
 8006298:	d82a      	bhi.n	80062f0 <ethernet_link_thread+0xd0>
 800629a:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <ethernet_link_thread+0x80>)
 800629c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a0:	080062b1 	.word	0x080062b1
 80062a4:	080062c3 	.word	0x080062c3
 80062a8:	080062d3 	.word	0x080062d3
 80062ac:	080062e3 	.word	0x080062e3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80062b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80062b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80062bc:	2301      	movs	r3, #1
 80062be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80062c0:	e017      	b.n	80062f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80062c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80062ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80062cc:	2301      	movs	r3, #1
 80062ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80062d0:	e00f      	b.n	80062f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80062d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062d6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80062d8:	2300      	movs	r3, #0
 80062da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80062dc:	2301      	movs	r3, #1
 80062de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80062e0:	e007      	b.n	80062f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80062e6:	2300      	movs	r3, #0
 80062e8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80062ea:	2301      	movs	r3, #1
 80062ec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80062ee:	e000      	b.n	80062f2 <ethernet_link_thread+0xd2>
    default:
      break;
 80062f0:	bf00      	nop
    }

    if(linkchanged)
 80062f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d018      	beq.n	800632a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80062f8:	f107 0308 	add.w	r3, r7, #8
 80062fc:	4619      	mov	r1, r3
 80062fe:	480e      	ldr	r0, [pc, #56]	; (8006338 <ethernet_link_thread+0x118>)
 8006300:	f7fb fd6c 	bl	8001ddc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006306:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800630a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	4619      	mov	r1, r3
 8006312:	4809      	ldr	r0, [pc, #36]	; (8006338 <ethernet_link_thread+0x118>)
 8006314:	f7fb fe4c 	bl	8001fb0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006318:	4807      	ldr	r0, [pc, #28]	; (8006338 <ethernet_link_thread+0x118>)
 800631a:	f7fb f897 	bl	800144c <HAL_ETH_Start>
      netif_set_up(netif);
 800631e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006320:	f004 fed4 	bl	800b0cc <netif_set_up>
      netif_set_link_up(netif);
 8006324:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006326:	f004 ff6f 	bl	800b208 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800632a:	2064      	movs	r0, #100	; 0x64
 800632c:	f000 f910 	bl	8006550 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006330:	e78b      	b.n	800624a <ethernet_link_thread+0x2a>
 8006332:	bf00      	nop
 8006334:	20005578 	.word	0x20005578
 8006338:	20005490 	.word	0x20005490

0800633c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af02      	add	r7, sp, #8
 8006342:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006344:	4812      	ldr	r0, [pc, #72]	; (8006390 <HAL_ETH_RxAllocateCallback+0x54>)
 8006346:	f004 fc35 	bl	800abb4 <memp_malloc_pool>
 800634a:	60f8      	str	r0, [r7, #12]
  if (p)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d014      	beq.n	800637c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f103 0220 	add.w	r2, r3, #32
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a0d      	ldr	r2, [pc, #52]	; (8006394 <HAL_ETH_RxAllocateCallback+0x58>)
 8006360:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800636a:	9201      	str	r2, [sp, #4]
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2241      	movs	r2, #65	; 0x41
 8006372:	2100      	movs	r1, #0
 8006374:	2000      	movs	r0, #0
 8006376:	f005 f99f 	bl	800b6b8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800637a:	e005      	b.n	8006388 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800637c:	4b06      	ldr	r3, [pc, #24]	; (8006398 <HAL_ETH_RxAllocateCallback+0x5c>)
 800637e:	2201      	movs	r2, #1
 8006380:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	08019568 	.word	0x08019568
 8006394:	08005fb5 	.word	0x08005fb5
 8006398:	20005484 	.word	0x20005484

0800639c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80063b2:	2300      	movs	r3, #0
 80063b4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3b20      	subs	r3, #32
 80063ba:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	2200      	movs	r2, #0
 80063c6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	887a      	ldrh	r2, [r7, #2]
 80063cc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d103      	bne.n	80063de <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e003      	b.n	80063e6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	61fb      	str	r3, [r7, #28]
 80063f2:	e009      	b.n	8006408 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	891a      	ldrh	r2, [r3, #8]
 80063f8:	887b      	ldrh	r3, [r7, #2]
 80063fa:	4413      	add	r3, r2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f2      	bne.n	80063f4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800640e:	887b      	ldrh	r3, [r7, #2]
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fb2e 	bl	8005a74 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006418:	bf00      	nop
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f005 fafd 	bl	800ba28 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	4603      	mov	r3, r0
 800643e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006448:	2b84      	cmp	r3, #132	; 0x84
 800644a:	d005      	beq.n	8006458 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800644c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	3303      	adds	r3, #3
 8006456:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006458:	68fb      	ldr	r3, [r7, #12]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800646c:	f3ef 8305 	mrs	r3, IPSR
 8006470:	607b      	str	r3, [r7, #4]
  return(result);
 8006472:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006474:	2b00      	cmp	r3, #0
 8006476:	bf14      	ite	ne
 8006478:	2301      	movne	r3, #1
 800647a:	2300      	moveq	r3, #0
 800647c:	b2db      	uxtb	r3, r3
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800648e:	f001 fee7 	bl	8008260 <vTaskStartScheduler>
  
  return osOK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	bd80      	pop	{r7, pc}

08006498 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800649c:	f7ff ffe3 	bl	8006466 <inHandlerMode>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80064a6:	f002 f81f 	bl	80084e8 <xTaskGetTickCountFromISR>
 80064aa:	4603      	mov	r3, r0
 80064ac:	e002      	b.n	80064b4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80064ae:	f002 f80b 	bl	80084c8 <xTaskGetTickCount>
 80064b2:	4603      	mov	r3, r0
  }
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ba:	b089      	sub	sp, #36	; 0x24
 80064bc:	af04      	add	r7, sp, #16
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d020      	beq.n	800650c <osThreadCreate+0x54>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01c      	beq.n	800650c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685c      	ldr	r4, [r3, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681d      	ldr	r5, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691e      	ldr	r6, [r3, #16]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff ffa6 	bl	8006436 <makeFreeRtosPriority>
 80064ea:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064f4:	9202      	str	r2, [sp, #8]
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	9100      	str	r1, [sp, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	4632      	mov	r2, r6
 80064fe:	4629      	mov	r1, r5
 8006500:	4620      	mov	r0, r4
 8006502:	f001 fa87 	bl	8007a14 <xTaskCreateStatic>
 8006506:	4603      	mov	r3, r0
 8006508:	60fb      	str	r3, [r7, #12]
 800650a:	e01c      	b.n	8006546 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685c      	ldr	r4, [r3, #4]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006518:	b29e      	uxth	r6, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff88 	bl	8006436 <makeFreeRtosPriority>
 8006526:	4602      	mov	r2, r0
 8006528:	f107 030c 	add.w	r3, r7, #12
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	9200      	str	r2, [sp, #0]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	4632      	mov	r2, r6
 8006534:	4629      	mov	r1, r5
 8006536:	4620      	mov	r0, r4
 8006538:	f001 facf 	bl	8007ada <xTaskCreate>
 800653c:	4603      	mov	r3, r0
 800653e:	2b01      	cmp	r3, #1
 8006540:	d001      	beq.n	8006546 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	e000      	b.n	8006548 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006546:	68fb      	ldr	r3, [r7, #12]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006550 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <osDelay+0x16>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	e000      	b.n	8006568 <osDelay+0x18>
 8006566:	2301      	movs	r3, #1
 8006568:	4618      	mov	r0, r3
 800656a:	f001 fd1b 	bl	8007fa4 <vTaskDelay>
  
  return osOK;
 800656e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d007      	beq.n	8006598 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	4619      	mov	r1, r3
 800658e:	2001      	movs	r0, #1
 8006590:	f000 fc21 	bl	8006dd6 <xQueueCreateMutexStatic>
 8006594:	4603      	mov	r3, r0
 8006596:	e003      	b.n	80065a0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006598:	2001      	movs	r0, #1
 800659a:	f000 fc04 	bl	8006da6 <xQueueCreateMutex>
 800659e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80065b2:	2300      	movs	r3, #0
 80065b4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <osMutexWait+0x18>
    return osErrorParameter;
 80065bc:	2380      	movs	r3, #128	; 0x80
 80065be:	e03a      	b.n	8006636 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d103      	bne.n	80065d4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80065cc:	f04f 33ff 	mov.w	r3, #4294967295
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	e009      	b.n	80065e8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d006      	beq.n	80065e8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <osMutexWait+0x40>
      ticks = 1;
 80065e4:	2301      	movs	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80065e8:	f7ff ff3d 	bl	8006466 <inHandlerMode>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d017      	beq.n	8006622 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	461a      	mov	r2, r3
 80065f8:	2100      	movs	r1, #0
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 f83c 	bl	8007678 <xQueueReceiveFromISR>
 8006600:	4603      	mov	r3, r0
 8006602:	2b01      	cmp	r3, #1
 8006604:	d001      	beq.n	800660a <osMutexWait+0x62>
      return osErrorOS;
 8006606:	23ff      	movs	r3, #255	; 0xff
 8006608:	e015      	b.n	8006636 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d011      	beq.n	8006634 <osMutexWait+0x8c>
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <osMutexWait+0x98>)
 8006612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	e008      	b.n	8006634 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 ff13 	bl	8007450 <xQueueSemaphoreTake>
 800662a:	4603      	mov	r3, r0
 800662c:	2b01      	cmp	r3, #1
 800662e:	d001      	beq.n	8006634 <osMutexWait+0x8c>
    return osErrorOS;
 8006630:	23ff      	movs	r3, #255	; 0xff
 8006632:	e000      	b.n	8006636 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	e000ed04 	.word	0xe000ed04

08006644 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006654:	f7ff ff07 	bl	8006466 <inHandlerMode>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d016      	beq.n	800668c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800665e:	f107 0308 	add.w	r3, r7, #8
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fd77 	bl	8007158 <xQueueGiveFromISR>
 800666a:	4603      	mov	r3, r0
 800666c:	2b01      	cmp	r3, #1
 800666e:	d001      	beq.n	8006674 <osMutexRelease+0x30>
      return osErrorOS;
 8006670:	23ff      	movs	r3, #255	; 0xff
 8006672:	e017      	b.n	80066a4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d013      	beq.n	80066a2 <osMutexRelease+0x5e>
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <osMutexRelease+0x68>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	e00a      	b.n	80066a2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800668c:	2300      	movs	r3, #0
 800668e:	2200      	movs	r2, #0
 8006690:	2100      	movs	r1, #0
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fbba 	bl	8006e0c <xQueueGenericSend>
 8006698:	4603      	mov	r3, r0
 800669a:	2b01      	cmp	r3, #1
 800669c:	d001      	beq.n	80066a2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800669e:	23ff      	movs	r3, #255	; 0xff
 80066a0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80066a2:	68fb      	ldr	r3, [r7, #12]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80066c4:	2380      	movs	r3, #128	; 0x80
 80066c6:	e03a      	b.n	800673e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d2:	d103      	bne.n	80066dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80066d4:	f04f 33ff 	mov.w	r3, #4294967295
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	e009      	b.n	80066f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d006      	beq.n	80066f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80066ec:	2301      	movs	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80066f0:	f7ff feb9 	bl	8006466 <inHandlerMode>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d017      	beq.n	800672a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80066fa:	f107 0308 	add.w	r3, r7, #8
 80066fe:	461a      	mov	r2, r3
 8006700:	2100      	movs	r1, #0
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 ffb8 	bl	8007678 <xQueueReceiveFromISR>
 8006708:	4603      	mov	r3, r0
 800670a:	2b01      	cmp	r3, #1
 800670c:	d001      	beq.n	8006712 <osSemaphoreWait+0x62>
      return osErrorOS;
 800670e:	23ff      	movs	r3, #255	; 0xff
 8006710:	e015      	b.n	800673e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d011      	beq.n	800673c <osSemaphoreWait+0x8c>
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <osSemaphoreWait+0x98>)
 800671a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	e008      	b.n	800673c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fe8f 	bl	8007450 <xQueueSemaphoreTake>
 8006732:	4603      	mov	r3, r0
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006738:	23ff      	movs	r3, #255	; 0xff
 800673a:	e000      	b.n	800673e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006758:	2300      	movs	r3, #0
 800675a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800675c:	f7ff fe83 	bl	8006466 <inHandlerMode>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d016      	beq.n	8006794 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006766:	f107 0308 	add.w	r3, r7, #8
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fcf3 	bl	8007158 <xQueueGiveFromISR>
 8006772:	4603      	mov	r3, r0
 8006774:	2b01      	cmp	r3, #1
 8006776:	d001      	beq.n	800677c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006778:	23ff      	movs	r3, #255	; 0xff
 800677a:	e017      	b.n	80067ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d013      	beq.n	80067aa <osSemaphoreRelease+0x5e>
 8006782:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <osSemaphoreRelease+0x68>)
 8006784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	e00a      	b.n	80067aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006794:	2300      	movs	r3, #0
 8006796:	2200      	movs	r2, #0
 8006798:	2100      	movs	r1, #0
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fb36 	bl	8006e0c <xQueueGenericSend>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d001      	beq.n	80067aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80067a6:	23ff      	movs	r3, #255	; 0xff
 80067a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80067aa:	68fb      	ldr	r3, [r7, #12]
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	e000ed04 	.word	0xe000ed04

080067b8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af02      	add	r7, sp, #8
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d011      	beq.n	80067ee <osMessageCreate+0x36>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6818      	ldr	r0, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6859      	ldr	r1, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2400      	movs	r4, #0
 80067e4:	9400      	str	r4, [sp, #0]
 80067e6:	f000 f9e1 	bl	8006bac <xQueueGenericCreateStatic>
 80067ea:	4603      	mov	r3, r0
 80067ec:	e008      	b.n	8006800 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	4619      	mov	r1, r3
 80067fa:	f000 fa59 	bl	8006cb0 <xQueueGenericCreate>
 80067fe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	bd90      	pop	{r4, r7, pc}

08006808 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <osMessagePut+0x1e>
    ticks = 1;
 8006822:	2301      	movs	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006826:	f7ff fe1e 	bl	8006466 <inHandlerMode>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d018      	beq.n	8006862 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006830:	f107 0210 	add.w	r2, r7, #16
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	2300      	movs	r3, #0
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 fbec 	bl	8007018 <xQueueGenericSendFromISR>
 8006840:	4603      	mov	r3, r0
 8006842:	2b01      	cmp	r3, #1
 8006844:	d001      	beq.n	800684a <osMessagePut+0x42>
      return osErrorOS;
 8006846:	23ff      	movs	r3, #255	; 0xff
 8006848:	e018      	b.n	800687c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d014      	beq.n	800687a <osMessagePut+0x72>
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <osMessagePut+0x7c>)
 8006852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	e00b      	b.n	800687a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006862:	f107 0108 	add.w	r1, r7, #8
 8006866:	2300      	movs	r3, #0
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 face 	bl	8006e0c <xQueueGenericSend>
 8006870:	4603      	mov	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d001      	beq.n	800687a <osMessagePut+0x72>
      return osErrorOS;
 8006876:	23ff      	movs	r3, #255	; 0xff
 8006878:	e000      	b.n	800687c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	e000ed04 	.word	0xe000ed04

08006888 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b08b      	sub	sp, #44	; 0x2c
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80068a2:	2380      	movs	r3, #128	; 0x80
 80068a4:	617b      	str	r3, [r7, #20]
    return event;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	461c      	mov	r4, r3
 80068aa:	f107 0314 	add.w	r3, r7, #20
 80068ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80068b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80068b6:	e054      	b.n	8006962 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80068b8:	2300      	movs	r3, #0
 80068ba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d103      	bne.n	80068d0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80068c8:	f04f 33ff 	mov.w	r3, #4294967295
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
 80068ce:	e009      	b.n	80068e4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d006      	beq.n	80068e4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <osMessageGet+0x5c>
      ticks = 1;
 80068e0:	2301      	movs	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80068e4:	f7ff fdbf 	bl	8006466 <inHandlerMode>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01c      	beq.n	8006928 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80068ee:	f107 0220 	add.w	r2, r7, #32
 80068f2:	f107 0314 	add.w	r3, r7, #20
 80068f6:	3304      	adds	r3, #4
 80068f8:	4619      	mov	r1, r3
 80068fa:	68b8      	ldr	r0, [r7, #8]
 80068fc:	f000 febc 	bl	8007678 <xQueueReceiveFromISR>
 8006900:	4603      	mov	r3, r0
 8006902:	2b01      	cmp	r3, #1
 8006904:	d102      	bne.n	800690c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006906:	2310      	movs	r3, #16
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	e001      	b.n	8006910 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01d      	beq.n	8006952 <osMessageGet+0xca>
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <osMessageGet+0xe4>)
 8006918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	e014      	b.n	8006952 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006928:	f107 0314 	add.w	r3, r7, #20
 800692c:	3304      	adds	r3, #4
 800692e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006930:	4619      	mov	r1, r3
 8006932:	68b8      	ldr	r0, [r7, #8]
 8006934:	f000 fca6 	bl	8007284 <xQueueReceive>
 8006938:	4603      	mov	r3, r0
 800693a:	2b01      	cmp	r3, #1
 800693c:	d102      	bne.n	8006944 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800693e:	2310      	movs	r3, #16
 8006940:	617b      	str	r3, [r7, #20]
 8006942:	e006      	b.n	8006952 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <osMessageGet+0xc6>
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <osMessageGet+0xc8>
 800694e:	2340      	movs	r3, #64	; 0x40
 8006950:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	461c      	mov	r4, r3
 8006956:	f107 0314 	add.w	r3, r7, #20
 800695a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800695e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	372c      	adds	r7, #44	; 0x2c
 8006966:	46bd      	mov	sp, r7
 8006968:	bd90      	pop	{r4, r7, pc}
 800696a:	bf00      	nop
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f103 0208 	add.w	r2, r3, #8
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f04f 32ff 	mov.w	r2, #4294967295
 8006988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f103 0208 	add.w	r2, r3, #8
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f103 0208 	add.w	r2, r3, #8
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr

08006a12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a12:	b480      	push	{r7}
 8006a14:	b085      	sub	sp, #20
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a28:	d103      	bne.n	8006a32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e00c      	b.n	8006a4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3308      	adds	r3, #8
 8006a36:	60fb      	str	r3, [r7, #12]
 8006a38:	e002      	b.n	8006a40 <vListInsert+0x2e>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d2f6      	bcs.n	8006a3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	601a      	str	r2, [r3, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	6892      	ldr	r2, [r2, #8]
 8006a9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6852      	ldr	r2, [r2, #4]
 8006aa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d103      	bne.n	8006ab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	1e5a      	subs	r2, r3, #1
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3714      	adds	r7, #20
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10c      	bne.n	8006b06 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af0:	b672      	cpsid	i
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	b662      	cpsie	i
 8006b00:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006b06:	f002 fb77 	bl	80091f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b12:	68f9      	ldr	r1, [r7, #12]
 8006b14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	441a      	add	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b36:	3b01      	subs	r3, #1
 8006b38:	68f9      	ldr	r1, [r7, #12]
 8006b3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	441a      	add	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	22ff      	movs	r2, #255	; 0xff
 8006b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	22ff      	movs	r2, #255	; 0xff
 8006b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d114      	bne.n	8006b86 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01a      	beq.n	8006b9a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3310      	adds	r3, #16
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f001 fe13 	bl	8008794 <xTaskRemoveFromEventList>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d012      	beq.n	8006b9a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <xQueueGenericReset+0xd0>)
 8006b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b7a:	601a      	str	r2, [r3, #0]
 8006b7c:	f3bf 8f4f 	dsb	sy
 8006b80:	f3bf 8f6f 	isb	sy
 8006b84:	e009      	b.n	8006b9a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3310      	adds	r3, #16
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fef0 	bl	8006970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3324      	adds	r3, #36	; 0x24
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff feeb 	bl	8006970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b9a:	f002 fb61 	bl	8009260 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b9e:	2301      	movs	r3, #1
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	e000ed04 	.word	0xe000ed04

08006bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08e      	sub	sp, #56	; 0x38
 8006bb0:	af02      	add	r7, sp, #8
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10c      	bne.n	8006bda <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	b672      	cpsid	i
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	b662      	cpsie	i
 8006bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10c      	bne.n	8006bfa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	b672      	cpsid	i
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	b662      	cpsie	i
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <xQueueGenericCreateStatic+0x5a>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <xQueueGenericCreateStatic+0x5e>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <xQueueGenericCreateStatic+0x60>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10c      	bne.n	8006c2a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	b672      	cpsid	i
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	b662      	cpsie	i
 8006c24:	623b      	str	r3, [r7, #32]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d102      	bne.n	8006c36 <xQueueGenericCreateStatic+0x8a>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <xQueueGenericCreateStatic+0x8e>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <xQueueGenericCreateStatic+0x90>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10c      	bne.n	8006c5a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	b672      	cpsid	i
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	b662      	cpsie	i
 8006c54:	61fb      	str	r3, [r7, #28]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c5a:	2348      	movs	r3, #72	; 0x48
 8006c5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b48      	cmp	r3, #72	; 0x48
 8006c62:	d00c      	beq.n	8006c7e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	b672      	cpsid	i
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	b662      	cpsie	i
 8006c78:	61bb      	str	r3, [r7, #24]
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f847 	bl	8006d34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3730      	adds	r7, #48	; 0x30
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10c      	bne.n	8006cde <xQueueGenericCreate+0x2e>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	b672      	cpsid	i
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	b662      	cpsie	i
 8006cd8:	613b      	str	r3, [r7, #16]
}
 8006cda:	bf00      	nop
 8006cdc:	e7fe      	b.n	8006cdc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	e004      	b.n	8006cf4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	3348      	adds	r3, #72	; 0x48
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f002 fbab 	bl	8009454 <pvPortMalloc>
 8006cfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d011      	beq.n	8006d2a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	3348      	adds	r3, #72	; 0x48
 8006d0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d18:	79fa      	ldrb	r2, [r7, #7]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f805 	bl	8006d34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d103      	bne.n	8006d50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e002      	b.n	8006d56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d62:	2101      	movs	r1, #1
 8006d64:	69b8      	ldr	r0, [r7, #24]
 8006d66:	f7ff feb7 	bl	8006ad8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d6a:	bf00      	nop
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00e      	beq.n	8006d9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006d92:	2300      	movs	r3, #0
 8006d94:	2200      	movs	r2, #0
 8006d96:	2100      	movs	r1, #0
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f837 	bl	8006e0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006d9e:	bf00      	nop
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b086      	sub	sp, #24
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	4603      	mov	r3, r0
 8006dae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6939      	ldr	r1, [r7, #16]
 8006dbe:	6978      	ldr	r0, [r7, #20]
 8006dc0:	f7ff ff76 	bl	8006cb0 <xQueueGenericCreate>
 8006dc4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006dc6:	68f8      	ldr	r0, [r7, #12]
 8006dc8:	f7ff ffd3 	bl	8006d72 <prvInitialiseMutex>

		return xNewQueue;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
	}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b088      	sub	sp, #32
 8006dda:	af02      	add	r7, sp, #8
 8006ddc:	4603      	mov	r3, r0
 8006dde:	6039      	str	r1, [r7, #0]
 8006de0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006de2:	2301      	movs	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2200      	movs	r2, #0
 8006df2:	6939      	ldr	r1, [r7, #16]
 8006df4:	6978      	ldr	r0, [r7, #20]
 8006df6:	f7ff fed9 	bl	8006bac <xQueueGenericCreateStatic>
 8006dfa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff ffb8 	bl	8006d72 <prvInitialiseMutex>

		return xNewQueue;
 8006e02:	68fb      	ldr	r3, [r7, #12]
	}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08e      	sub	sp, #56	; 0x38
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10c      	bne.n	8006e42 <xQueueGenericSend+0x36>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	b672      	cpsid	i
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	b662      	cpsie	i
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d103      	bne.n	8006e50 <xQueueGenericSend+0x44>
 8006e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <xQueueGenericSend+0x48>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <xQueueGenericSend+0x4a>
 8006e54:	2300      	movs	r3, #0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10c      	bne.n	8006e74 <xQueueGenericSend+0x68>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5e:	b672      	cpsid	i
 8006e60:	f383 8811 	msr	BASEPRI, r3
 8006e64:	f3bf 8f6f 	isb	sy
 8006e68:	f3bf 8f4f 	dsb	sy
 8006e6c:	b662      	cpsie	i
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d103      	bne.n	8006e82 <xQueueGenericSend+0x76>
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d101      	bne.n	8006e86 <xQueueGenericSend+0x7a>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <xQueueGenericSend+0x7c>
 8006e86:	2300      	movs	r3, #0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10c      	bne.n	8006ea6 <xQueueGenericSend+0x9a>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	b672      	cpsid	i
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	b662      	cpsie	i
 8006ea0:	623b      	str	r3, [r7, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	e7fe      	b.n	8006ea4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ea6:	f001 fe3d 	bl	8008b24 <xTaskGetSchedulerState>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <xQueueGenericSend+0xaa>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <xQueueGenericSend+0xae>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <xQueueGenericSend+0xb0>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10c      	bne.n	8006eda <xQueueGenericSend+0xce>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	b672      	cpsid	i
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	b662      	cpsie	i
 8006ed4:	61fb      	str	r3, [r7, #28]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eda:	f002 f98d 	bl	80091f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d302      	bcc.n	8006ef0 <xQueueGenericSend+0xe4>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d129      	bne.n	8006f44 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ef6:	f000 fc7d 	bl	80077f4 <prvCopyDataToQueue>
 8006efa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	3324      	adds	r3, #36	; 0x24
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 fc43 	bl	8008794 <xTaskRemoveFromEventList>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d013      	beq.n	8006f3c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f14:	4b3f      	ldr	r3, [pc, #252]	; (8007014 <xQueueGenericSend+0x208>)
 8006f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	e00a      	b.n	8006f3c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f2c:	4b39      	ldr	r3, [pc, #228]	; (8007014 <xQueueGenericSend+0x208>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f3c:	f002 f990 	bl	8009260 <vPortExitCritical>
				return pdPASS;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e063      	b.n	800700c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f4a:	f002 f989 	bl	8009260 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e05c      	b.n	800700c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d106      	bne.n	8006f66 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f58:	f107 0314 	add.w	r3, r7, #20
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 fc7d 	bl	800885c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f66:	f002 f97b 	bl	8009260 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f6a:	f001 fa01 	bl	8008370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f6e:	f002 f943 	bl	80091f8 <vPortEnterCritical>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d103      	bne.n	8006f88 <xQueueGenericSend+0x17c>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f8e:	b25b      	sxtb	r3, r3
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d103      	bne.n	8006f9e <xQueueGenericSend+0x192>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f9e:	f002 f95f 	bl	8009260 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fa2:	1d3a      	adds	r2, r7, #4
 8006fa4:	f107 0314 	add.w	r3, r7, #20
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 fc6c 	bl	8008888 <xTaskCheckForTimeOut>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d124      	bne.n	8007000 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fb8:	f000 fd14 	bl	80079e4 <prvIsQueueFull>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d018      	beq.n	8006ff4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 fbbc 	bl	8008748 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fd2:	f000 fc9f 	bl	8007914 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fd6:	f001 f9d9 	bl	800838c <xTaskResumeAll>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f47f af7c 	bne.w	8006eda <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <xQueueGenericSend+0x208>)
 8006fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	e772      	b.n	8006eda <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ff6:	f000 fc8d 	bl	8007914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ffa:	f001 f9c7 	bl	800838c <xTaskResumeAll>
 8006ffe:	e76c      	b.n	8006eda <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007002:	f000 fc87 	bl	8007914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007006:	f001 f9c1 	bl	800838c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800700a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800700c:	4618      	mov	r0, r3
 800700e:	3738      	adds	r7, #56	; 0x38
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	e000ed04 	.word	0xe000ed04

08007018 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08e      	sub	sp, #56	; 0x38
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10c      	bne.n	800704a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	b672      	cpsid	i
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	b662      	cpsie	i
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007046:	bf00      	nop
 8007048:	e7fe      	b.n	8007048 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d103      	bne.n	8007058 <xQueueGenericSendFromISR+0x40>
 8007050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <xQueueGenericSendFromISR+0x44>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <xQueueGenericSendFromISR+0x46>
 800705c:	2300      	movs	r3, #0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10c      	bne.n	800707c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	b672      	cpsid	i
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	b662      	cpsie	i
 8007076:	623b      	str	r3, [r7, #32]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b02      	cmp	r3, #2
 8007080:	d103      	bne.n	800708a <xQueueGenericSendFromISR+0x72>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <xQueueGenericSendFromISR+0x76>
 800708a:	2301      	movs	r3, #1
 800708c:	e000      	b.n	8007090 <xQueueGenericSendFromISR+0x78>
 800708e:	2300      	movs	r3, #0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10c      	bne.n	80070ae <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	b672      	cpsid	i
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	b662      	cpsie	i
 80070a8:	61fb      	str	r3, [r7, #28]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070ae:	f002 f98d 	bl	80093cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070b2:	f3ef 8211 	mrs	r2, BASEPRI
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	b672      	cpsid	i
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	b662      	cpsie	i
 80070ca:	61ba      	str	r2, [r7, #24]
 80070cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d302      	bcc.n	80070e4 <xQueueGenericSendFromISR+0xcc>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d12c      	bne.n	800713e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070f4:	f000 fb7e 	bl	80077f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007100:	d112      	bne.n	8007128 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d016      	beq.n	8007138 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	3324      	adds	r3, #36	; 0x24
 800710e:	4618      	mov	r0, r3
 8007110:	f001 fb40 	bl	8008794 <xTaskRemoveFromEventList>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00e      	beq.n	8007138 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e007      	b.n	8007138 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007128:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800712c:	3301      	adds	r3, #1
 800712e:	b2db      	uxtb	r3, r3
 8007130:	b25a      	sxtb	r2, r3
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007138:	2301      	movs	r3, #1
 800713a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800713c:	e001      	b.n	8007142 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800713e:	2300      	movs	r3, #0
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800714c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800714e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007150:	4618      	mov	r0, r3
 8007152:	3738      	adds	r7, #56	; 0x38
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	; 0x38
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10c      	bne.n	8007186 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	b672      	cpsid	i
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	b662      	cpsie	i
 8007180:	623b      	str	r3, [r7, #32]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	b672      	cpsid	i
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	b662      	cpsie	i
 80071a2:	61fb      	str	r3, [r7, #28]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d103      	bne.n	80071b8 <xQueueGiveFromISR+0x60>
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <xQueueGiveFromISR+0x64>
 80071b8:	2301      	movs	r3, #1
 80071ba:	e000      	b.n	80071be <xQueueGiveFromISR+0x66>
 80071bc:	2300      	movs	r3, #0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10c      	bne.n	80071dc <xQueueGiveFromISR+0x84>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c6:	b672      	cpsid	i
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	b662      	cpsie	i
 80071d6:	61bb      	str	r3, [r7, #24]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071dc:	f002 f8f6 	bl	80093cc <vPortValidateInterruptPriority>
	__asm volatile
 80071e0:	f3ef 8211 	mrs	r2, BASEPRI
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	b672      	cpsid	i
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	b662      	cpsie	i
 80071f8:	617a      	str	r2, [r7, #20]
 80071fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80071fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800720c:	429a      	cmp	r2, r3
 800720e:	d22b      	bcs.n	8007268 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007222:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722a:	d112      	bne.n	8007252 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d016      	beq.n	8007262 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	3324      	adds	r3, #36	; 0x24
 8007238:	4618      	mov	r0, r3
 800723a:	f001 faab 	bl	8008794 <xTaskRemoveFromEventList>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00e      	beq.n	8007262 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2201      	movs	r2, #1
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e007      	b.n	8007262 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007256:	3301      	adds	r3, #1
 8007258:	b2db      	uxtb	r3, r3
 800725a:	b25a      	sxtb	r2, r3
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007262:	2301      	movs	r3, #1
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	e001      	b.n	800726c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007268:	2300      	movs	r3, #0
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f383 8811 	msr	BASEPRI, r3
}
 8007276:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800727a:	4618      	mov	r0, r3
 800727c:	3738      	adds	r7, #56	; 0x38
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08c      	sub	sp, #48	; 0x30
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007290:	2300      	movs	r3, #0
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10c      	bne.n	80072b8 <xQueueReceive+0x34>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	b672      	cpsid	i
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	b662      	cpsie	i
 80072b2:	623b      	str	r3, [r7, #32]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <xQueueReceive+0x42>
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <xQueueReceive+0x46>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e000      	b.n	80072cc <xQueueReceive+0x48>
 80072ca:	2300      	movs	r3, #0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10c      	bne.n	80072ea <xQueueReceive+0x66>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	b672      	cpsid	i
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	b662      	cpsie	i
 80072e4:	61fb      	str	r3, [r7, #28]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072ea:	f001 fc1b 	bl	8008b24 <xTaskGetSchedulerState>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <xQueueReceive+0x76>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <xQueueReceive+0x7a>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xQueueReceive+0x7c>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10c      	bne.n	800731e <xQueueReceive+0x9a>
	__asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	b672      	cpsid	i
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	b662      	cpsie	i
 8007318:	61bb      	str	r3, [r7, #24]
}
 800731a:	bf00      	nop
 800731c:	e7fe      	b.n	800731c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800731e:	f001 ff6b 	bl	80091f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01f      	beq.n	800736e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007332:	f000 fac9 	bl	80078c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	1e5a      	subs	r2, r3, #1
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00f      	beq.n	8007366 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	3310      	adds	r3, #16
 800734a:	4618      	mov	r0, r3
 800734c:	f001 fa22 	bl	8008794 <xTaskRemoveFromEventList>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007356:	4b3d      	ldr	r3, [pc, #244]	; (800744c <xQueueReceive+0x1c8>)
 8007358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007366:	f001 ff7b 	bl	8009260 <vPortExitCritical>
				return pdPASS;
 800736a:	2301      	movs	r3, #1
 800736c:	e069      	b.n	8007442 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d103      	bne.n	800737c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007374:	f001 ff74 	bl	8009260 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007378:	2300      	movs	r3, #0
 800737a:	e062      	b.n	8007442 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007382:	f107 0310 	add.w	r3, r7, #16
 8007386:	4618      	mov	r0, r3
 8007388:	f001 fa68 	bl	800885c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007390:	f001 ff66 	bl	8009260 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007394:	f000 ffec 	bl	8008370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007398:	f001 ff2e 	bl	80091f8 <vPortEnterCritical>
 800739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073a2:	b25b      	sxtb	r3, r3
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d103      	bne.n	80073b2 <xQueueReceive+0x12e>
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073b8:	b25b      	sxtb	r3, r3
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d103      	bne.n	80073c8 <xQueueReceive+0x144>
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c8:	f001 ff4a 	bl	8009260 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073cc:	1d3a      	adds	r2, r7, #4
 80073ce:	f107 0310 	add.w	r3, r7, #16
 80073d2:	4611      	mov	r1, r2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f001 fa57 	bl	8008888 <xTaskCheckForTimeOut>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d123      	bne.n	8007428 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073e2:	f000 fae9 	bl	80079b8 <prvIsQueueEmpty>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d017      	beq.n	800741c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	3324      	adds	r3, #36	; 0x24
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4611      	mov	r1, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 f9a7 	bl	8008748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fc:	f000 fa8a 	bl	8007914 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007400:	f000 ffc4 	bl	800838c <xTaskResumeAll>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d189      	bne.n	800731e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <xQueueReceive+0x1c8>)
 800740c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007410:	601a      	str	r2, [r3, #0]
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	e780      	b.n	800731e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800741c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800741e:	f000 fa79 	bl	8007914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007422:	f000 ffb3 	bl	800838c <xTaskResumeAll>
 8007426:	e77a      	b.n	800731e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800742a:	f000 fa73 	bl	8007914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800742e:	f000 ffad 	bl	800838c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007434:	f000 fac0 	bl	80079b8 <prvIsQueueEmpty>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	f43f af6f 	beq.w	800731e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007440:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007442:	4618      	mov	r0, r3
 8007444:	3730      	adds	r7, #48	; 0x30
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08e      	sub	sp, #56	; 0x38
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800745a:	2300      	movs	r3, #0
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007462:	2300      	movs	r3, #0
 8007464:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10c      	bne.n	8007486 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800746c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007470:	b672      	cpsid	i
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	b662      	cpsie	i
 8007480:	623b      	str	r3, [r7, #32]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00c      	beq.n	80074a8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	b672      	cpsid	i
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	b662      	cpsie	i
 80074a2:	61fb      	str	r3, [r7, #28]
}
 80074a4:	bf00      	nop
 80074a6:	e7fe      	b.n	80074a6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074a8:	f001 fb3c 	bl	8008b24 <xTaskGetSchedulerState>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <xQueueSemaphoreTake+0x68>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <xQueueSemaphoreTake+0x6c>
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <xQueueSemaphoreTake+0x6e>
 80074bc:	2300      	movs	r3, #0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10c      	bne.n	80074dc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	b672      	cpsid	i
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	b662      	cpsie	i
 80074d6:	61bb      	str	r3, [r7, #24]
}
 80074d8:	bf00      	nop
 80074da:	e7fe      	b.n	80074da <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074dc:	f001 fe8c 	bl	80091f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d024      	beq.n	8007536 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	1e5a      	subs	r2, r3, #1
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80074fc:	f001 fcd8 	bl	8008eb0 <pvTaskIncrementMutexHeldCount>
 8007500:	4602      	mov	r2, r0
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00f      	beq.n	800752e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	3310      	adds	r3, #16
 8007512:	4618      	mov	r0, r3
 8007514:	f001 f93e 	bl	8008794 <xTaskRemoveFromEventList>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800751e:	4b55      	ldr	r3, [pc, #340]	; (8007674 <xQueueSemaphoreTake+0x224>)
 8007520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800752e:	f001 fe97 	bl	8009260 <vPortExitCritical>
				return pdPASS;
 8007532:	2301      	movs	r3, #1
 8007534:	e099      	b.n	800766a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d113      	bne.n	8007564 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	b672      	cpsid	i
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	b662      	cpsie	i
 8007556:	617b      	str	r3, [r7, #20]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800755c:	f001 fe80 	bl	8009260 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007560:	2300      	movs	r3, #0
 8007562:	e082      	b.n	800766a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800756a:	f107 030c 	add.w	r3, r7, #12
 800756e:	4618      	mov	r0, r3
 8007570:	f001 f974 	bl	800885c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007578:	f001 fe72 	bl	8009260 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800757c:	f000 fef8 	bl	8008370 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007580:	f001 fe3a 	bl	80091f8 <vPortEnterCritical>
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800758a:	b25b      	sxtb	r3, r3
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d103      	bne.n	800759a <xQueueSemaphoreTake+0x14a>
 8007592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075a0:	b25b      	sxtb	r3, r3
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d103      	bne.n	80075b0 <xQueueSemaphoreTake+0x160>
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075b0:	f001 fe56 	bl	8009260 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075b4:	463a      	mov	r2, r7
 80075b6:	f107 030c 	add.w	r3, r7, #12
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f001 f963 	bl	8008888 <xTaskCheckForTimeOut>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d132      	bne.n	800762e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075ca:	f000 f9f5 	bl	80079b8 <prvIsQueueEmpty>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d026      	beq.n	8007622 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d109      	bne.n	80075f0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80075dc:	f001 fe0c 	bl	80091f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 fabb 	bl	8008b60 <xTaskPriorityInherit>
 80075ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80075ec:	f001 fe38 	bl	8009260 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	3324      	adds	r3, #36	; 0x24
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	4611      	mov	r1, r2
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 f8a5 	bl	8008748 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007600:	f000 f988 	bl	8007914 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007604:	f000 fec2 	bl	800838c <xTaskResumeAll>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	f47f af66 	bne.w	80074dc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007610:	4b18      	ldr	r3, [pc, #96]	; (8007674 <xQueueSemaphoreTake+0x224>)
 8007612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	e75c      	b.n	80074dc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007624:	f000 f976 	bl	8007914 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007628:	f000 feb0 	bl	800838c <xTaskResumeAll>
 800762c:	e756      	b.n	80074dc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800762e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007630:	f000 f970 	bl	8007914 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007634:	f000 feaa 	bl	800838c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007638:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800763a:	f000 f9bd 	bl	80079b8 <prvIsQueueEmpty>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	f43f af4b 	beq.w	80074dc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00d      	beq.n	8007668 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800764c:	f001 fdd4 	bl	80091f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007650:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007652:	f000 f8b7 	bl	80077c4 <prvGetDisinheritPriorityAfterTimeout>
 8007656:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800765e:	4618      	mov	r0, r3
 8007660:	f001 fb88 	bl	8008d74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007664:	f001 fdfc 	bl	8009260 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007668:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800766a:	4618      	mov	r0, r3
 800766c:	3738      	adds	r7, #56	; 0x38
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08e      	sub	sp, #56	; 0x38
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10c      	bne.n	80076a8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	b672      	cpsid	i
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	b662      	cpsie	i
 80076a2:	623b      	str	r3, [r7, #32]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <xQueueReceiveFromISR+0x3e>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <xQueueReceiveFromISR+0x42>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <xQueueReceiveFromISR+0x44>
 80076ba:	2300      	movs	r3, #0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10c      	bne.n	80076da <xQueueReceiveFromISR+0x62>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c4:	b672      	cpsid	i
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	b662      	cpsie	i
 80076d4:	61fb      	str	r3, [r7, #28]
}
 80076d6:	bf00      	nop
 80076d8:	e7fe      	b.n	80076d8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076da:	f001 fe77 	bl	80093cc <vPortValidateInterruptPriority>
	__asm volatile
 80076de:	f3ef 8211 	mrs	r2, BASEPRI
 80076e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e6:	b672      	cpsid	i
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	b662      	cpsie	i
 80076f6:	61ba      	str	r2, [r7, #24]
 80076f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02f      	beq.n	800776a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007718:	f000 f8d6 	bl	80078c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	1e5a      	subs	r2, r3, #1
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d112      	bne.n	8007754 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d016      	beq.n	8007764 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	3310      	adds	r3, #16
 800773a:	4618      	mov	r0, r3
 800773c:	f001 f82a 	bl	8008794 <xTaskRemoveFromEventList>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00e      	beq.n	8007764 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	e007      	b.n	8007764 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007758:	3301      	adds	r3, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	b25a      	sxtb	r2, r3
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007764:	2301      	movs	r3, #1
 8007766:	637b      	str	r3, [r7, #52]	; 0x34
 8007768:	e001      	b.n	800776e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800776a:	2300      	movs	r3, #0
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	f383 8811 	msr	BASEPRI, r3
}
 8007778:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800777a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800777c:	4618      	mov	r0, r3
 800777e:	3738      	adds	r7, #56	; 0x38
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10c      	bne.n	80077ac <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007796:	b672      	cpsid	i
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	b662      	cpsie	i
 80077a6:	60bb      	str	r3, [r7, #8]
}
 80077a8:	bf00      	nop
 80077aa:	e7fe      	b.n	80077aa <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80077ac:	f001 fd24 	bl	80091f8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80077b6:	f001 fd53 	bl	8009260 <vPortExitCritical>

	return uxReturn;
 80077ba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d006      	beq.n	80077e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f1c3 0307 	rsb	r3, r3, #7
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	e001      	b.n	80077e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077e6:	68fb      	ldr	r3, [r7, #12]
	}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10d      	bne.n	800782e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d14d      	bne.n	80078b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	4618      	mov	r0, r3
 8007820:	f001 fa1e 	bl	8008c60 <xTaskPriorityDisinherit>
 8007824:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	609a      	str	r2, [r3, #8]
 800782c:	e043      	b.n	80078b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d119      	bne.n	8007868 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6858      	ldr	r0, [r3, #4]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783c:	461a      	mov	r2, r3
 800783e:	68b9      	ldr	r1, [r7, #8]
 8007840:	f00d fd29 	bl	8015296 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	441a      	add	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	429a      	cmp	r2, r3
 800785c:	d32b      	bcc.n	80078b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]
 8007866:	e026      	b.n	80078b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68d8      	ldr	r0, [r3, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007870:	461a      	mov	r2, r3
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	f00d fd0f 	bl	8015296 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68da      	ldr	r2, [r3, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007880:	425b      	negs	r3, r3
 8007882:	441a      	add	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d207      	bcs.n	80078a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789c:	425b      	negs	r3, r3
 800789e:	441a      	add	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d105      	bne.n	80078b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80078be:	697b      	ldr	r3, [r7, #20]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3718      	adds	r7, #24
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d018      	beq.n	800790c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	441a      	add	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d303      	bcc.n	80078fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68d9      	ldr	r1, [r3, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007904:	461a      	mov	r2, r3
 8007906:	6838      	ldr	r0, [r7, #0]
 8007908:	f00d fcc5 	bl	8015296 <memcpy>
	}
}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800791c:	f001 fc6c 	bl	80091f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007926:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007928:	e011      	b.n	800794e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d012      	beq.n	8007958 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	3324      	adds	r3, #36	; 0x24
 8007936:	4618      	mov	r0, r3
 8007938:	f000 ff2c 	bl	8008794 <xTaskRemoveFromEventList>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007942:	f001 f807 	bl	8008954 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007946:	7bfb      	ldrb	r3, [r7, #15]
 8007948:	3b01      	subs	r3, #1
 800794a:	b2db      	uxtb	r3, r3
 800794c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800794e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dce9      	bgt.n	800792a <prvUnlockQueue+0x16>
 8007956:	e000      	b.n	800795a <prvUnlockQueue+0x46>
					break;
 8007958:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	22ff      	movs	r2, #255	; 0xff
 800795e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007962:	f001 fc7d 	bl	8009260 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007966:	f001 fc47 	bl	80091f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007970:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007972:	e011      	b.n	8007998 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d012      	beq.n	80079a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3310      	adds	r3, #16
 8007980:	4618      	mov	r0, r3
 8007982:	f000 ff07 	bl	8008794 <xTaskRemoveFromEventList>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800798c:	f000 ffe2 	bl	8008954 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	3b01      	subs	r3, #1
 8007994:	b2db      	uxtb	r3, r3
 8007996:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007998:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dce9      	bgt.n	8007974 <prvUnlockQueue+0x60>
 80079a0:	e000      	b.n	80079a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	22ff      	movs	r2, #255	; 0xff
 80079a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80079ac:	f001 fc58 	bl	8009260 <vPortExitCritical>
}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079c0:	f001 fc1a 	bl	80091f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e001      	b.n	80079d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079d6:	f001 fc43 	bl	8009260 <vPortExitCritical>

	return xReturn;
 80079da:	68fb      	ldr	r3, [r7, #12]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079ec:	f001 fc04 	bl	80091f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d102      	bne.n	8007a02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	e001      	b.n	8007a06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a06:	f001 fc2b 	bl	8009260 <vPortExitCritical>

	return xReturn;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08e      	sub	sp, #56	; 0x38
 8007a18:	af04      	add	r7, sp, #16
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <xTaskCreateStatic+0x2e>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	623b      	str	r3, [r7, #32]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d10c      	bne.n	8007a62 <xTaskCreateStatic+0x4e>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4c:	b672      	cpsid	i
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	b662      	cpsie	i
 8007a5c:	61fb      	str	r3, [r7, #28]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a62:	23b4      	movs	r3, #180	; 0xb4
 8007a64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	2bb4      	cmp	r3, #180	; 0xb4
 8007a6a:	d00c      	beq.n	8007a86 <xTaskCreateStatic+0x72>
	__asm volatile
 8007a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a70:	b672      	cpsid	i
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	b662      	cpsie	i
 8007a80:	61bb      	str	r3, [r7, #24]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d01e      	beq.n	8007acc <xTaskCreateStatic+0xb8>
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01b      	beq.n	8007acc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	9302      	str	r3, [sp, #8]
 8007aae:	f107 0314 	add.w	r3, r7, #20
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	68b9      	ldr	r1, [r7, #8]
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 f850 	bl	8007b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ac6:	f000 f8ed 	bl	8007ca4 <prvAddNewTaskToReadyList>
 8007aca:	e001      	b.n	8007ad0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007acc:	2300      	movs	r3, #0
 8007ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ad0:	697b      	ldr	r3, [r7, #20]
	}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3728      	adds	r7, #40	; 0x28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b08c      	sub	sp, #48	; 0x30
 8007ade:	af04      	add	r7, sp, #16
 8007ae0:	60f8      	str	r0, [r7, #12]
 8007ae2:	60b9      	str	r1, [r7, #8]
 8007ae4:	603b      	str	r3, [r7, #0]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007aea:	88fb      	ldrh	r3, [r7, #6]
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4618      	mov	r0, r3
 8007af0:	f001 fcb0 	bl	8009454 <pvPortMalloc>
 8007af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00e      	beq.n	8007b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007afc:	20b4      	movs	r0, #180	; 0xb4
 8007afe:	f001 fca9 	bl	8009454 <pvPortMalloc>
 8007b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d003      	beq.n	8007b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8007b10:	e005      	b.n	8007b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b12:	6978      	ldr	r0, [r7, #20]
 8007b14:	f001 fd68 	bl	80095e8 <vPortFree>
 8007b18:	e001      	b.n	8007b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d017      	beq.n	8007b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b2c:	88fa      	ldrh	r2, [r7, #6]
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9303      	str	r3, [sp, #12]
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	9302      	str	r3, [sp, #8]
 8007b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68b9      	ldr	r1, [r7, #8]
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f80e 	bl	8007b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b48:	69f8      	ldr	r0, [r7, #28]
 8007b4a:	f000 f8ab 	bl	8007ca4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	e002      	b.n	8007b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b54:	f04f 33ff 	mov.w	r3, #4294967295
 8007b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3720      	adds	r7, #32
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007b7c:	440b      	add	r3, r1
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	f023 0307 	bic.w	r3, r3, #7
 8007b8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	b672      	cpsid	i
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	b662      	cpsie	i
 8007baa:	617b      	str	r3, [r7, #20]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d01f      	beq.n	8007bf6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	e012      	b.n	8007be2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	7819      	ldrb	r1, [r3, #0]
 8007bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	4413      	add	r3, r2
 8007bca:	3334      	adds	r3, #52	; 0x34
 8007bcc:	460a      	mov	r2, r1
 8007bce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d006      	beq.n	8007bea <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	2b0f      	cmp	r3, #15
 8007be6:	d9e9      	bls.n	8007bbc <prvInitialiseNewTask+0x58>
 8007be8:	e000      	b.n	8007bec <prvInitialiseNewTask+0x88>
			{
				break;
 8007bea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bf4:	e003      	b.n	8007bfe <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	2b06      	cmp	r3, #6
 8007c02:	d901      	bls.n	8007c08 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c04:	2306      	movs	r3, #6
 8007c06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	2200      	movs	r2, #0
 8007c18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fec6 	bl	80069b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	3318      	adds	r3, #24
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fec1 	bl	80069b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	f1c3 0207 	rsb	r2, r3, #7
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	2200      	movs	r2, #0
 8007c48:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	334c      	adds	r3, #76	; 0x4c
 8007c58:	2260      	movs	r2, #96	; 0x60
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f00d fb42 	bl	80152e6 <memset>
 8007c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c64:	4a0c      	ldr	r2, [pc, #48]	; (8007c98 <prvInitialiseNewTask+0x134>)
 8007c66:	651a      	str	r2, [r3, #80]	; 0x50
 8007c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6a:	4a0c      	ldr	r2, [pc, #48]	; (8007c9c <prvInitialiseNewTask+0x138>)
 8007c6c:	655a      	str	r2, [r3, #84]	; 0x54
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	4a0b      	ldr	r2, [pc, #44]	; (8007ca0 <prvInitialiseNewTask+0x13c>)
 8007c72:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	68f9      	ldr	r1, [r7, #12]
 8007c78:	69b8      	ldr	r0, [r7, #24]
 8007c7a:	f001 f993 	bl	8008fa4 <pxPortInitialiseStack>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c90:	bf00      	nop
 8007c92:	3720      	adds	r7, #32
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	080196c0 	.word	0x080196c0
 8007c9c:	080196e0 	.word	0x080196e0
 8007ca0:	080196a0 	.word	0x080196a0

08007ca4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cac:	f001 faa4 	bl	80091f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cb0:	4b2a      	ldr	r3, [pc, #168]	; (8007d5c <prvAddNewTaskToReadyList+0xb8>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	4a29      	ldr	r2, [pc, #164]	; (8007d5c <prvAddNewTaskToReadyList+0xb8>)
 8007cb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cba:	4b29      	ldr	r3, [pc, #164]	; (8007d60 <prvAddNewTaskToReadyList+0xbc>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d109      	bne.n	8007cd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cc2:	4a27      	ldr	r2, [pc, #156]	; (8007d60 <prvAddNewTaskToReadyList+0xbc>)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007cc8:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <prvAddNewTaskToReadyList+0xb8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d110      	bne.n	8007cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007cd0:	f000 fe64 	bl	800899c <prvInitialiseTaskLists>
 8007cd4:	e00d      	b.n	8007cf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cd6:	4b23      	ldr	r3, [pc, #140]	; (8007d64 <prvAddNewTaskToReadyList+0xc0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cde:	4b20      	ldr	r3, [pc, #128]	; (8007d60 <prvAddNewTaskToReadyList+0xbc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d802      	bhi.n	8007cf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007cec:	4a1c      	ldr	r2, [pc, #112]	; (8007d60 <prvAddNewTaskToReadyList+0xbc>)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007cf2:	4b1d      	ldr	r3, [pc, #116]	; (8007d68 <prvAddNewTaskToReadyList+0xc4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	4a1b      	ldr	r2, [pc, #108]	; (8007d68 <prvAddNewTaskToReadyList+0xc4>)
 8007cfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	2201      	movs	r2, #1
 8007d02:	409a      	lsls	r2, r3
 8007d04:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <prvAddNewTaskToReadyList+0xc8>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	4a18      	ldr	r2, [pc, #96]	; (8007d6c <prvAddNewTaskToReadyList+0xc8>)
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d12:	4613      	mov	r3, r2
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4a15      	ldr	r2, [pc, #84]	; (8007d70 <prvAddNewTaskToReadyList+0xcc>)
 8007d1c:	441a      	add	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f7fe fe50 	bl	80069ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d2a:	f001 fa99 	bl	8009260 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	; (8007d64 <prvAddNewTaskToReadyList+0xc0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00e      	beq.n	8007d54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <prvAddNewTaskToReadyList+0xbc>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d207      	bcs.n	8007d54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d44:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <prvAddNewTaskToReadyList+0xd0>)
 8007d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20005698 	.word	0x20005698
 8007d60:	20005598 	.word	0x20005598
 8007d64:	200056a4 	.word	0x200056a4
 8007d68:	200056b4 	.word	0x200056b4
 8007d6c:	200056a0 	.word	0x200056a0
 8007d70:	2000559c 	.word	0x2000559c
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d80:	f001 fa3a 	bl	80091f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <vTaskDelete+0x18>
 8007d8a:	4b3a      	ldr	r3, [pc, #232]	; (8007e74 <vTaskDelete+0xfc>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	e000      	b.n	8007d92 <vTaskDelete+0x1a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe fe73 	bl	8006a84 <uxListRemove>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d115      	bne.n	8007dd0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da8:	4933      	ldr	r1, [pc, #204]	; (8007e78 <vTaskDelete+0x100>)
 8007daa:	4613      	mov	r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	4413      	add	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	440b      	add	r3, r1
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10a      	bne.n	8007dd0 <vTaskDelete+0x58>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc4:	43da      	mvns	r2, r3
 8007dc6:	4b2d      	ldr	r3, [pc, #180]	; (8007e7c <vTaskDelete+0x104>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	4a2b      	ldr	r2, [pc, #172]	; (8007e7c <vTaskDelete+0x104>)
 8007dce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d004      	beq.n	8007de2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3318      	adds	r3, #24
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe fe51 	bl	8006a84 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007de2:	4b27      	ldr	r3, [pc, #156]	; (8007e80 <vTaskDelete+0x108>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3301      	adds	r3, #1
 8007de8:	4a25      	ldr	r2, [pc, #148]	; (8007e80 <vTaskDelete+0x108>)
 8007dea:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007dec:	4b21      	ldr	r3, [pc, #132]	; (8007e74 <vTaskDelete+0xfc>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d10b      	bne.n	8007e0e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4821      	ldr	r0, [pc, #132]	; (8007e84 <vTaskDelete+0x10c>)
 8007dfe:	f7fe fde4 	bl	80069ca <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007e02:	4b21      	ldr	r3, [pc, #132]	; (8007e88 <vTaskDelete+0x110>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3301      	adds	r3, #1
 8007e08:	4a1f      	ldr	r2, [pc, #124]	; (8007e88 <vTaskDelete+0x110>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	e009      	b.n	8007e22 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007e0e:	4b1f      	ldr	r3, [pc, #124]	; (8007e8c <vTaskDelete+0x114>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	4a1d      	ldr	r2, [pc, #116]	; (8007e8c <vTaskDelete+0x114>)
 8007e16:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 fe2d 	bl	8008a78 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007e1e:	f000 fe61 	bl	8008ae4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007e22:	f001 fa1d 	bl	8009260 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007e26:	4b1a      	ldr	r3, [pc, #104]	; (8007e90 <vTaskDelete+0x118>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d01d      	beq.n	8007e6a <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8007e2e:	4b11      	ldr	r3, [pc, #68]	; (8007e74 <vTaskDelete+0xfc>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d118      	bne.n	8007e6a <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007e38:	4b16      	ldr	r3, [pc, #88]	; (8007e94 <vTaskDelete+0x11c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00c      	beq.n	8007e5a <vTaskDelete+0xe2>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	b672      	cpsid	i
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	b662      	cpsie	i
 8007e54:	60bb      	str	r3, [r7, #8]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8007e5a:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <vTaskDelete+0x120>)
 8007e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e60:	601a      	str	r2, [r3, #0]
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20005598 	.word	0x20005598
 8007e78:	2000559c 	.word	0x2000559c
 8007e7c:	200056a0 	.word	0x200056a0
 8007e80:	200056b4 	.word	0x200056b4
 8007e84:	2000566c 	.word	0x2000566c
 8007e88:	20005680 	.word	0x20005680
 8007e8c:	20005698 	.word	0x20005698
 8007e90:	200056a4 	.word	0x200056a4
 8007e94:	200056c0 	.word	0x200056c0
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10c      	bne.n	8007eca <vTaskDelayUntil+0x2e>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	b672      	cpsid	i
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	b662      	cpsie	i
 8007ec4:	617b      	str	r3, [r7, #20]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10c      	bne.n	8007eea <vTaskDelayUntil+0x4e>
	__asm volatile
 8007ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed4:	b672      	cpsid	i
 8007ed6:	f383 8811 	msr	BASEPRI, r3
 8007eda:	f3bf 8f6f 	isb	sy
 8007ede:	f3bf 8f4f 	dsb	sy
 8007ee2:	b662      	cpsie	i
 8007ee4:	613b      	str	r3, [r7, #16]
}
 8007ee6:	bf00      	nop
 8007ee8:	e7fe      	b.n	8007ee8 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8007eea:	4b2b      	ldr	r3, [pc, #172]	; (8007f98 <vTaskDelayUntil+0xfc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00c      	beq.n	8007f0c <vTaskDelayUntil+0x70>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	b672      	cpsid	i
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	b662      	cpsie	i
 8007f06:	60fb      	str	r3, [r7, #12]
}
 8007f08:	bf00      	nop
 8007f0a:	e7fe      	b.n	8007f0a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8007f0c:	f000 fa30 	bl	8008370 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f10:	4b22      	ldr	r3, [pc, #136]	; (8007f9c <vTaskDelayUntil+0x100>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6a3a      	ldr	r2, [r7, #32]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d20b      	bcs.n	8007f42 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d211      	bcs.n	8007f58 <vTaskDelayUntil+0xbc>
 8007f34:	69fa      	ldr	r2, [r7, #28]
 8007f36:	6a3b      	ldr	r3, [r7, #32]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d90d      	bls.n	8007f58 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f40:	e00a      	b.n	8007f58 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69fa      	ldr	r2, [r7, #28]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d303      	bcc.n	8007f54 <vTaskDelayUntil+0xb8>
 8007f4c:	69fa      	ldr	r2, [r7, #28]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d901      	bls.n	8007f58 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8007f54:	2301      	movs	r3, #1
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d006      	beq.n	8007f72 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 ffb3 	bl	8008ed8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007f72:	f000 fa0b 	bl	800838c <xTaskResumeAll>
 8007f76:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d107      	bne.n	8007f8e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8007f7e:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <vTaskDelayUntil+0x104>)
 8007f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f8e:	bf00      	nop
 8007f90:	3728      	adds	r7, #40	; 0x28
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	200056c0 	.word	0x200056c0
 8007f9c:	2000569c 	.word	0x2000569c
 8007fa0:	e000ed04 	.word	0xe000ed04

08007fa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d019      	beq.n	8007fea <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007fb6:	4b14      	ldr	r3, [pc, #80]	; (8008008 <vTaskDelay+0x64>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <vTaskDelay+0x34>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	b672      	cpsid	i
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	b662      	cpsie	i
 8007fd2:	60bb      	str	r3, [r7, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007fd8:	f000 f9ca 	bl	8008370 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007fdc:	2100      	movs	r1, #0
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 ff7a 	bl	8008ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007fe4:	f000 f9d2 	bl	800838c <xTaskResumeAll>
 8007fe8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d107      	bne.n	8008000 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <vTaskDelay+0x68>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008000:	bf00      	nop
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	200056c0 	.word	0x200056c0
 800800c:	e000ed04 	.word	0xe000ed04

08008010 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008018:	f001 f8ee 	bl	80091f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d102      	bne.n	8008028 <vTaskSuspend+0x18>
 8008022:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <vTaskSuspend+0x108>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	e000      	b.n	800802a <vTaskSuspend+0x1a>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3304      	adds	r3, #4
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe fd27 	bl	8006a84 <uxListRemove>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d115      	bne.n	8008068 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	4936      	ldr	r1, [pc, #216]	; (800811c <vTaskSuspend+0x10c>)
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	440b      	add	r3, r1
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <vTaskSuspend+0x58>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	2201      	movs	r2, #1
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	43da      	mvns	r2, r3
 800805e:	4b30      	ldr	r3, [pc, #192]	; (8008120 <vTaskSuspend+0x110>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4013      	ands	r3, r2
 8008064:	4a2e      	ldr	r2, [pc, #184]	; (8008120 <vTaskSuspend+0x110>)
 8008066:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3318      	adds	r3, #24
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fd05 	bl	8006a84 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	4828      	ldr	r0, [pc, #160]	; (8008124 <vTaskSuspend+0x114>)
 8008082:	f7fe fca2 	bl	80069ca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b01      	cmp	r3, #1
 8008090:	d103      	bne.n	800809a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800809a:	f001 f8e1 	bl	8009260 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800809e:	4b22      	ldr	r3, [pc, #136]	; (8008128 <vTaskSuspend+0x118>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d005      	beq.n	80080b2 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80080a6:	f001 f8a7 	bl	80091f8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80080aa:	f000 fd1b 	bl	8008ae4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80080ae:	f001 f8d7 	bl	8009260 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80080b2:	4b19      	ldr	r3, [pc, #100]	; (8008118 <vTaskSuspend+0x108>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d129      	bne.n	8008110 <vTaskSuspend+0x100>
		{
			if( xSchedulerRunning != pdFALSE )
 80080bc:	4b1a      	ldr	r3, [pc, #104]	; (8008128 <vTaskSuspend+0x118>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d019      	beq.n	80080f8 <vTaskSuspend+0xe8>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80080c4:	4b19      	ldr	r3, [pc, #100]	; (800812c <vTaskSuspend+0x11c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00c      	beq.n	80080e6 <vTaskSuspend+0xd6>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	b672      	cpsid	i
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	b662      	cpsie	i
 80080e0:	60bb      	str	r3, [r7, #8]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <vTaskSuspend+0xd4>
				portYIELD_WITHIN_API();
 80080e6:	4b12      	ldr	r3, [pc, #72]	; (8008130 <vTaskSuspend+0x120>)
 80080e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080f6:	e00b      	b.n	8008110 <vTaskSuspend+0x100>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <vTaskSuspend+0x114>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <vTaskSuspend+0x124>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d103      	bne.n	800810c <vTaskSuspend+0xfc>
					pxCurrentTCB = NULL;
 8008104:	4b04      	ldr	r3, [pc, #16]	; (8008118 <vTaskSuspend+0x108>)
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]
	}
 800810a:	e001      	b.n	8008110 <vTaskSuspend+0x100>
					vTaskSwitchContext();
 800810c:	f000 fab8 	bl	8008680 <vTaskSwitchContext>
	}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20005598 	.word	0x20005598
 800811c:	2000559c 	.word	0x2000559c
 8008120:	200056a0 	.word	0x200056a0
 8008124:	20005684 	.word	0x20005684
 8008128:	200056a4 	.word	0x200056a4
 800812c:	200056c0 	.word	0x200056c0
 8008130:	e000ed04 	.word	0xe000ed04
 8008134:	20005698 	.word	0x20005698

08008138 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8008140:	2300      	movs	r3, #0
 8008142:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10c      	bne.n	8008168 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 800814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008152:	b672      	cpsid	i
 8008154:	f383 8811 	msr	BASEPRI, r3
 8008158:	f3bf 8f6f 	isb	sy
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	b662      	cpsie	i
 8008162:	60fb      	str	r3, [r7, #12]
}
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	4a0a      	ldr	r2, [pc, #40]	; (8008198 <prvTaskIsTaskSuspended+0x60>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d10a      	bne.n	8008188 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	4a09      	ldr	r2, [pc, #36]	; (800819c <prvTaskIsTaskSuspended+0x64>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d005      	beq.n	8008188 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008188:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800818a:	4618      	mov	r0, r3
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20005684 	.word	0x20005684
 800819c:	20005658 	.word	0x20005658

080081a0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10c      	bne.n	80081cc <vTaskResume+0x2c>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b6:	b672      	cpsid	i
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	b662      	cpsie	i
 80081c6:	60bb      	str	r3, [r7, #8]
}
 80081c8:	bf00      	nop
 80081ca:	e7fe      	b.n	80081ca <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80081cc:	4b20      	ldr	r3, [pc, #128]	; (8008250 <vTaskResume+0xb0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d037      	beq.n	8008246 <vTaskResume+0xa6>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d034      	beq.n	8008246 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 80081dc:	f001 f80c 	bl	80091f8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff ffa9 	bl	8008138 <prvTaskIsTaskSuspended>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d02a      	beq.n	8008242 <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe fc47 	bl	8006a84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	2201      	movs	r2, #1
 80081fc:	409a      	lsls	r2, r3
 80081fe:	4b15      	ldr	r3, [pc, #84]	; (8008254 <vTaskResume+0xb4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4313      	orrs	r3, r2
 8008204:	4a13      	ldr	r2, [pc, #76]	; (8008254 <vTaskResume+0xb4>)
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4a10      	ldr	r2, [pc, #64]	; (8008258 <vTaskResume+0xb8>)
 8008216:	441a      	add	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3304      	adds	r3, #4
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f7fe fbd3 	bl	80069ca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <vTaskResume+0xb0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	429a      	cmp	r2, r3
 8008230:	d307      	bcc.n	8008242 <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8008232:	4b0a      	ldr	r3, [pc, #40]	; (800825c <vTaskResume+0xbc>)
 8008234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8008242:	f001 f80d 	bl	8009260 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20005598 	.word	0x20005598
 8008254:	200056a0 	.word	0x200056a0
 8008258:	2000559c 	.word	0x2000559c
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b08a      	sub	sp, #40	; 0x28
 8008264:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800826a:	2300      	movs	r3, #0
 800826c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800826e:	463a      	mov	r2, r7
 8008270:	1d39      	adds	r1, r7, #4
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4618      	mov	r0, r3
 8008278:	f7f8 f9a4 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	9202      	str	r2, [sp, #8]
 8008284:	9301      	str	r3, [sp, #4]
 8008286:	2300      	movs	r3, #0
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	460a      	mov	r2, r1
 800828e:	4923      	ldr	r1, [pc, #140]	; (800831c <vTaskStartScheduler+0xbc>)
 8008290:	4823      	ldr	r0, [pc, #140]	; (8008320 <vTaskStartScheduler+0xc0>)
 8008292:	f7ff fbbf 	bl	8007a14 <xTaskCreateStatic>
 8008296:	4603      	mov	r3, r0
 8008298:	4a22      	ldr	r2, [pc, #136]	; (8008324 <vTaskStartScheduler+0xc4>)
 800829a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800829c:	4b21      	ldr	r3, [pc, #132]	; (8008324 <vTaskStartScheduler+0xc4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80082a4:	2301      	movs	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	e001      	b.n	80082ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d11d      	bne.n	80082f0 <vTaskStartScheduler+0x90>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	b672      	cpsid	i
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	b662      	cpsie	i
 80082c8:	613b      	str	r3, [r7, #16]
}
 80082ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082cc:	4b16      	ldr	r3, [pc, #88]	; (8008328 <vTaskStartScheduler+0xc8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	334c      	adds	r3, #76	; 0x4c
 80082d2:	4a16      	ldr	r2, [pc, #88]	; (800832c <vTaskStartScheduler+0xcc>)
 80082d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80082d6:	4b16      	ldr	r3, [pc, #88]	; (8008330 <vTaskStartScheduler+0xd0>)
 80082d8:	f04f 32ff 	mov.w	r2, #4294967295
 80082dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <vTaskStartScheduler+0xd4>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80082e4:	4b14      	ldr	r3, [pc, #80]	; (8008338 <vTaskStartScheduler+0xd8>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80082ea:	f000 fee9 	bl	80090c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80082ee:	e010      	b.n	8008312 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f6:	d10c      	bne.n	8008312 <vTaskStartScheduler+0xb2>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	b672      	cpsid	i
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	b662      	cpsie	i
 800830c:	60fb      	str	r3, [r7, #12]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <vTaskStartScheduler+0xb0>
}
 8008312:	bf00      	nop
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	080167bc 	.word	0x080167bc
 8008320:	0800896d 	.word	0x0800896d
 8008324:	200056bc 	.word	0x200056bc
 8008328:	20005598 	.word	0x20005598
 800832c:	20000054 	.word	0x20000054
 8008330:	200056b8 	.word	0x200056b8
 8008334:	200056a4 	.word	0x200056a4
 8008338:	2000569c 	.word	0x2000569c

0800833c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	b672      	cpsid	i
 8008348:	f383 8811 	msr	BASEPRI, r3
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f3bf 8f4f 	dsb	sy
 8008354:	b662      	cpsie	i
 8008356:	607b      	str	r3, [r7, #4]
}
 8008358:	bf00      	nop
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
	xSchedulerRunning = pdFALSE;
 800835a:	4b04      	ldr	r3, [pc, #16]	; (800836c <vTaskEndScheduler+0x30>)
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8008360:	f000 ff2c 	bl	80091bc <vPortEndScheduler>
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	200056a4 	.word	0x200056a4

08008370 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008374:	4b04      	ldr	r3, [pc, #16]	; (8008388 <vTaskSuspendAll+0x18>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a03      	ldr	r2, [pc, #12]	; (8008388 <vTaskSuspendAll+0x18>)
 800837c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800837e:	bf00      	nop
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	200056c0 	.word	0x200056c0

0800838c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008396:	2300      	movs	r3, #0
 8008398:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800839a:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <xTaskResumeAll+0x118>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10c      	bne.n	80083bc <xTaskResumeAll+0x30>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	b672      	cpsid	i
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	b662      	cpsie	i
 80083b6:	603b      	str	r3, [r7, #0]
}
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083bc:	f000 ff1c 	bl	80091f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083c0:	4b38      	ldr	r3, [pc, #224]	; (80084a4 <xTaskResumeAll+0x118>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	4a37      	ldr	r2, [pc, #220]	; (80084a4 <xTaskResumeAll+0x118>)
 80083c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ca:	4b36      	ldr	r3, [pc, #216]	; (80084a4 <xTaskResumeAll+0x118>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d161      	bne.n	8008496 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80083d2:	4b35      	ldr	r3, [pc, #212]	; (80084a8 <xTaskResumeAll+0x11c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d05d      	beq.n	8008496 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083da:	e02e      	b.n	800843a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083dc:	4b33      	ldr	r3, [pc, #204]	; (80084ac <xTaskResumeAll+0x120>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3318      	adds	r3, #24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fb4b 	bl	8006a84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3304      	adds	r3, #4
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fe fb46 	bl	8006a84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fc:	2201      	movs	r2, #1
 80083fe:	409a      	lsls	r2, r3
 8008400:	4b2b      	ldr	r3, [pc, #172]	; (80084b0 <xTaskResumeAll+0x124>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4313      	orrs	r3, r2
 8008406:	4a2a      	ldr	r2, [pc, #168]	; (80084b0 <xTaskResumeAll+0x124>)
 8008408:	6013      	str	r3, [r2, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840e:	4613      	mov	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4a27      	ldr	r2, [pc, #156]	; (80084b4 <xTaskResumeAll+0x128>)
 8008418:	441a      	add	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3304      	adds	r3, #4
 800841e:	4619      	mov	r1, r3
 8008420:	4610      	mov	r0, r2
 8008422:	f7fe fad2 	bl	80069ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842a:	4b23      	ldr	r3, [pc, #140]	; (80084b8 <xTaskResumeAll+0x12c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008430:	429a      	cmp	r2, r3
 8008432:	d302      	bcc.n	800843a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008434:	4b21      	ldr	r3, [pc, #132]	; (80084bc <xTaskResumeAll+0x130>)
 8008436:	2201      	movs	r2, #1
 8008438:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800843a:	4b1c      	ldr	r3, [pc, #112]	; (80084ac <xTaskResumeAll+0x120>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1cc      	bne.n	80083dc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008448:	f000 fb4c 	bl	8008ae4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800844c:	4b1c      	ldr	r3, [pc, #112]	; (80084c0 <xTaskResumeAll+0x134>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d010      	beq.n	800847a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008458:	f000 f858 	bl	800850c <xTaskIncrementTick>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008462:	4b16      	ldr	r3, [pc, #88]	; (80084bc <xTaskResumeAll+0x130>)
 8008464:	2201      	movs	r2, #1
 8008466:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3b01      	subs	r3, #1
 800846c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1f1      	bne.n	8008458 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008474:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <xTaskResumeAll+0x134>)
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <xTaskResumeAll+0x130>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d009      	beq.n	8008496 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008482:	2301      	movs	r3, #1
 8008484:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <xTaskResumeAll+0x138>)
 8008488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008496:	f000 fee3 	bl	8009260 <vPortExitCritical>

	return xAlreadyYielded;
 800849a:	68bb      	ldr	r3, [r7, #8]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	200056c0 	.word	0x200056c0
 80084a8:	20005698 	.word	0x20005698
 80084ac:	20005658 	.word	0x20005658
 80084b0:	200056a0 	.word	0x200056a0
 80084b4:	2000559c 	.word	0x2000559c
 80084b8:	20005598 	.word	0x20005598
 80084bc:	200056ac 	.word	0x200056ac
 80084c0:	200056a8 	.word	0x200056a8
 80084c4:	e000ed04 	.word	0xe000ed04

080084c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80084ce:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <xTaskGetTickCount+0x1c>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80084d4:	687b      	ldr	r3, [r7, #4]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	2000569c 	.word	0x2000569c

080084e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084ee:	f000 ff6d 	bl	80093cc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80084f6:	4b04      	ldr	r3, [pc, #16]	; (8008508 <xTaskGetTickCountFromISR+0x20>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084fc:	683b      	ldr	r3, [r7, #0]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	2000569c 	.word	0x2000569c

0800850c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008512:	2300      	movs	r3, #0
 8008514:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008516:	4b4f      	ldr	r3, [pc, #316]	; (8008654 <xTaskIncrementTick+0x148>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	f040 808a 	bne.w	8008634 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008520:	4b4d      	ldr	r3, [pc, #308]	; (8008658 <xTaskIncrementTick+0x14c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3301      	adds	r3, #1
 8008526:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008528:	4a4b      	ldr	r2, [pc, #300]	; (8008658 <xTaskIncrementTick+0x14c>)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d122      	bne.n	800857a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008534:	4b49      	ldr	r3, [pc, #292]	; (800865c <xTaskIncrementTick+0x150>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00c      	beq.n	8008558 <xTaskIncrementTick+0x4c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	b672      	cpsid	i
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	b662      	cpsie	i
 8008552:	603b      	str	r3, [r7, #0]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <xTaskIncrementTick+0x4a>
 8008558:	4b40      	ldr	r3, [pc, #256]	; (800865c <xTaskIncrementTick+0x150>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60fb      	str	r3, [r7, #12]
 800855e:	4b40      	ldr	r3, [pc, #256]	; (8008660 <xTaskIncrementTick+0x154>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a3e      	ldr	r2, [pc, #248]	; (800865c <xTaskIncrementTick+0x150>)
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	4a3e      	ldr	r2, [pc, #248]	; (8008660 <xTaskIncrementTick+0x154>)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	4b3d      	ldr	r3, [pc, #244]	; (8008664 <xTaskIncrementTick+0x158>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3301      	adds	r3, #1
 8008572:	4a3c      	ldr	r2, [pc, #240]	; (8008664 <xTaskIncrementTick+0x158>)
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	f000 fab5 	bl	8008ae4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800857a:	4b3b      	ldr	r3, [pc, #236]	; (8008668 <xTaskIncrementTick+0x15c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	429a      	cmp	r2, r3
 8008582:	d348      	bcc.n	8008616 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008584:	4b35      	ldr	r3, [pc, #212]	; (800865c <xTaskIncrementTick+0x150>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800858e:	4b36      	ldr	r3, [pc, #216]	; (8008668 <xTaskIncrementTick+0x15c>)
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	601a      	str	r2, [r3, #0]
					break;
 8008596:	e03e      	b.n	8008616 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008598:	4b30      	ldr	r3, [pc, #192]	; (800865c <xTaskIncrementTick+0x150>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d203      	bcs.n	80085b8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085b0:	4a2d      	ldr	r2, [pc, #180]	; (8008668 <xTaskIncrementTick+0x15c>)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085b6:	e02e      	b.n	8008616 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	3304      	adds	r3, #4
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe fa61 	bl	8006a84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d004      	beq.n	80085d4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	3318      	adds	r3, #24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fa58 	bl	8006a84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	2201      	movs	r2, #1
 80085da:	409a      	lsls	r2, r3
 80085dc:	4b23      	ldr	r3, [pc, #140]	; (800866c <xTaskIncrementTick+0x160>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	4a22      	ldr	r2, [pc, #136]	; (800866c <xTaskIncrementTick+0x160>)
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4a1f      	ldr	r2, [pc, #124]	; (8008670 <xTaskIncrementTick+0x164>)
 80085f4:	441a      	add	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f7fe f9e4 	bl	80069ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008606:	4b1b      	ldr	r3, [pc, #108]	; (8008674 <xTaskIncrementTick+0x168>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	429a      	cmp	r2, r3
 800860e:	d3b9      	bcc.n	8008584 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008610:	2301      	movs	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008614:	e7b6      	b.n	8008584 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008616:	4b17      	ldr	r3, [pc, #92]	; (8008674 <xTaskIncrementTick+0x168>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4914      	ldr	r1, [pc, #80]	; (8008670 <xTaskIncrementTick+0x164>)
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d907      	bls.n	800863e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800862e:	2301      	movs	r3, #1
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e004      	b.n	800863e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008634:	4b10      	ldr	r3, [pc, #64]	; (8008678 <xTaskIncrementTick+0x16c>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3301      	adds	r3, #1
 800863a:	4a0f      	ldr	r2, [pc, #60]	; (8008678 <xTaskIncrementTick+0x16c>)
 800863c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800863e:	4b0f      	ldr	r3, [pc, #60]	; (800867c <xTaskIncrementTick+0x170>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d001      	beq.n	800864a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008646:	2301      	movs	r3, #1
 8008648:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800864a:	697b      	ldr	r3, [r7, #20]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	200056c0 	.word	0x200056c0
 8008658:	2000569c 	.word	0x2000569c
 800865c:	20005650 	.word	0x20005650
 8008660:	20005654 	.word	0x20005654
 8008664:	200056b0 	.word	0x200056b0
 8008668:	200056b8 	.word	0x200056b8
 800866c:	200056a0 	.word	0x200056a0
 8008670:	2000559c 	.word	0x2000559c
 8008674:	20005598 	.word	0x20005598
 8008678:	200056a8 	.word	0x200056a8
 800867c:	200056ac 	.word	0x200056ac

08008680 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008686:	4b2a      	ldr	r3, [pc, #168]	; (8008730 <vTaskSwitchContext+0xb0>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800868e:	4b29      	ldr	r3, [pc, #164]	; (8008734 <vTaskSwitchContext+0xb4>)
 8008690:	2201      	movs	r2, #1
 8008692:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008694:	e046      	b.n	8008724 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008696:	4b27      	ldr	r3, [pc, #156]	; (8008734 <vTaskSwitchContext+0xb4>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800869c:	4b26      	ldr	r3, [pc, #152]	; (8008738 <vTaskSwitchContext+0xb8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	fab3 f383 	clz	r3, r3
 80086a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80086aa:	7afb      	ldrb	r3, [r7, #11]
 80086ac:	f1c3 031f 	rsb	r3, r3, #31
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	4922      	ldr	r1, [pc, #136]	; (800873c <vTaskSwitchContext+0xbc>)
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	4613      	mov	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10c      	bne.n	80086e0 <vTaskSwitchContext+0x60>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	b672      	cpsid	i
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	b662      	cpsie	i
 80086da:	607b      	str	r3, [r7, #4]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <vTaskSwitchContext+0x5e>
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4a14      	ldr	r2, [pc, #80]	; (800873c <vTaskSwitchContext+0xbc>)
 80086ec:	4413      	add	r3, r2
 80086ee:	613b      	str	r3, [r7, #16]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	605a      	str	r2, [r3, #4]
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	3308      	adds	r3, #8
 8008702:	429a      	cmp	r2, r3
 8008704:	d104      	bne.n	8008710 <vTaskSwitchContext+0x90>
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	605a      	str	r2, [r3, #4]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	4a0a      	ldr	r2, [pc, #40]	; (8008740 <vTaskSwitchContext+0xc0>)
 8008718:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800871a:	4b09      	ldr	r3, [pc, #36]	; (8008740 <vTaskSwitchContext+0xc0>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	334c      	adds	r3, #76	; 0x4c
 8008720:	4a08      	ldr	r2, [pc, #32]	; (8008744 <vTaskSwitchContext+0xc4>)
 8008722:	6013      	str	r3, [r2, #0]
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	200056c0 	.word	0x200056c0
 8008734:	200056ac 	.word	0x200056ac
 8008738:	200056a0 	.word	0x200056a0
 800873c:	2000559c 	.word	0x2000559c
 8008740:	20005598 	.word	0x20005598
 8008744:	20000054 	.word	0x20000054

08008748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10c      	bne.n	8008772 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	b672      	cpsid	i
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	b662      	cpsie	i
 800876c:	60fb      	str	r3, [r7, #12]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008772:	4b07      	ldr	r3, [pc, #28]	; (8008790 <vTaskPlaceOnEventList+0x48>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3318      	adds	r3, #24
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7fe f949 	bl	8006a12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008780:	2101      	movs	r1, #1
 8008782:	6838      	ldr	r0, [r7, #0]
 8008784:	f000 fba8 	bl	8008ed8 <prvAddCurrentTaskToDelayedList>
}
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20005598 	.word	0x20005598

08008794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10c      	bne.n	80087c4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80087aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ae:	b672      	cpsid	i
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	b662      	cpsie	i
 80087be:	60fb      	str	r3, [r7, #12]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	3318      	adds	r3, #24
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fe f95b 	bl	8006a84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ce:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <xTaskRemoveFromEventList+0xb0>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d11c      	bne.n	8008810 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	3304      	adds	r3, #4
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe f952 	bl	8006a84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	2201      	movs	r2, #1
 80087e6:	409a      	lsls	r2, r3
 80087e8:	4b17      	ldr	r3, [pc, #92]	; (8008848 <xTaskRemoveFromEventList+0xb4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	4a16      	ldr	r2, [pc, #88]	; (8008848 <xTaskRemoveFromEventList+0xb4>)
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f6:	4613      	mov	r3, r2
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4a13      	ldr	r2, [pc, #76]	; (800884c <xTaskRemoveFromEventList+0xb8>)
 8008800:	441a      	add	r2, r3
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3304      	adds	r3, #4
 8008806:	4619      	mov	r1, r3
 8008808:	4610      	mov	r0, r2
 800880a:	f7fe f8de 	bl	80069ca <vListInsertEnd>
 800880e:	e005      	b.n	800881c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	3318      	adds	r3, #24
 8008814:	4619      	mov	r1, r3
 8008816:	480e      	ldr	r0, [pc, #56]	; (8008850 <xTaskRemoveFromEventList+0xbc>)
 8008818:	f7fe f8d7 	bl	80069ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008820:	4b0c      	ldr	r3, [pc, #48]	; (8008854 <xTaskRemoveFromEventList+0xc0>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008826:	429a      	cmp	r2, r3
 8008828:	d905      	bls.n	8008836 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800882a:	2301      	movs	r3, #1
 800882c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800882e:	4b0a      	ldr	r3, [pc, #40]	; (8008858 <xTaskRemoveFromEventList+0xc4>)
 8008830:	2201      	movs	r2, #1
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	e001      	b.n	800883a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800883a:	697b      	ldr	r3, [r7, #20]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	200056c0 	.word	0x200056c0
 8008848:	200056a0 	.word	0x200056a0
 800884c:	2000559c 	.word	0x2000559c
 8008850:	20005658 	.word	0x20005658
 8008854:	20005598 	.word	0x20005598
 8008858:	200056ac 	.word	0x200056ac

0800885c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008864:	4b06      	ldr	r3, [pc, #24]	; (8008880 <vTaskInternalSetTimeOutState+0x24>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800886c:	4b05      	ldr	r3, [pc, #20]	; (8008884 <vTaskInternalSetTimeOutState+0x28>)
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	605a      	str	r2, [r3, #4]
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	200056b0 	.word	0x200056b0
 8008884:	2000569c 	.word	0x2000569c

08008888 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10c      	bne.n	80088b2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	b672      	cpsid	i
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	b662      	cpsie	i
 80088ac:	613b      	str	r3, [r7, #16]
}
 80088ae:	bf00      	nop
 80088b0:	e7fe      	b.n	80088b0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10c      	bne.n	80088d2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80088b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088bc:	b672      	cpsid	i
 80088be:	f383 8811 	msr	BASEPRI, r3
 80088c2:	f3bf 8f6f 	isb	sy
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	b662      	cpsie	i
 80088cc:	60fb      	str	r3, [r7, #12]
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80088d2:	f000 fc91 	bl	80091f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80088d6:	4b1d      	ldr	r3, [pc, #116]	; (800894c <xTaskCheckForTimeOut+0xc4>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	1ad3      	subs	r3, r2, r3
 80088e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	d102      	bne.n	80088f6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61fb      	str	r3, [r7, #28]
 80088f4:	e023      	b.n	800893e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b15      	ldr	r3, [pc, #84]	; (8008950 <xTaskCheckForTimeOut+0xc8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d007      	beq.n	8008912 <xTaskCheckForTimeOut+0x8a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	69ba      	ldr	r2, [r7, #24]
 8008908:	429a      	cmp	r2, r3
 800890a:	d302      	bcc.n	8008912 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800890c:	2301      	movs	r3, #1
 800890e:	61fb      	str	r3, [r7, #28]
 8008910:	e015      	b.n	800893e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	429a      	cmp	r2, r3
 800891a:	d20b      	bcs.n	8008934 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff ff97 	bl	800885c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800892e:	2300      	movs	r3, #0
 8008930:	61fb      	str	r3, [r7, #28]
 8008932:	e004      	b.n	800893e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	2200      	movs	r2, #0
 8008938:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800893a:	2301      	movs	r3, #1
 800893c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800893e:	f000 fc8f 	bl	8009260 <vPortExitCritical>

	return xReturn;
 8008942:	69fb      	ldr	r3, [r7, #28]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3720      	adds	r7, #32
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	2000569c 	.word	0x2000569c
 8008950:	200056b0 	.word	0x200056b0

08008954 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008958:	4b03      	ldr	r3, [pc, #12]	; (8008968 <vTaskMissedYield+0x14>)
 800895a:	2201      	movs	r2, #1
 800895c:	601a      	str	r2, [r3, #0]
}
 800895e:	bf00      	nop
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	200056ac 	.word	0x200056ac

0800896c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008974:	f000 f852 	bl	8008a1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008978:	4b06      	ldr	r3, [pc, #24]	; (8008994 <prvIdleTask+0x28>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d9f9      	bls.n	8008974 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008980:	4b05      	ldr	r3, [pc, #20]	; (8008998 <prvIdleTask+0x2c>)
 8008982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008990:	e7f0      	b.n	8008974 <prvIdleTask+0x8>
 8008992:	bf00      	nop
 8008994:	2000559c 	.word	0x2000559c
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089a2:	2300      	movs	r3, #0
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	e00c      	b.n	80089c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4613      	mov	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4a12      	ldr	r2, [pc, #72]	; (80089fc <prvInitialiseTaskLists+0x60>)
 80089b4:	4413      	add	r3, r2
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fd ffda 	bl	8006970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3301      	adds	r3, #1
 80089c0:	607b      	str	r3, [r7, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2b06      	cmp	r3, #6
 80089c6:	d9ef      	bls.n	80089a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80089c8:	480d      	ldr	r0, [pc, #52]	; (8008a00 <prvInitialiseTaskLists+0x64>)
 80089ca:	f7fd ffd1 	bl	8006970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80089ce:	480d      	ldr	r0, [pc, #52]	; (8008a04 <prvInitialiseTaskLists+0x68>)
 80089d0:	f7fd ffce 	bl	8006970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80089d4:	480c      	ldr	r0, [pc, #48]	; (8008a08 <prvInitialiseTaskLists+0x6c>)
 80089d6:	f7fd ffcb 	bl	8006970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80089da:	480c      	ldr	r0, [pc, #48]	; (8008a0c <prvInitialiseTaskLists+0x70>)
 80089dc:	f7fd ffc8 	bl	8006970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80089e0:	480b      	ldr	r0, [pc, #44]	; (8008a10 <prvInitialiseTaskLists+0x74>)
 80089e2:	f7fd ffc5 	bl	8006970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80089e6:	4b0b      	ldr	r3, [pc, #44]	; (8008a14 <prvInitialiseTaskLists+0x78>)
 80089e8:	4a05      	ldr	r2, [pc, #20]	; (8008a00 <prvInitialiseTaskLists+0x64>)
 80089ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80089ec:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <prvInitialiseTaskLists+0x7c>)
 80089ee:	4a05      	ldr	r2, [pc, #20]	; (8008a04 <prvInitialiseTaskLists+0x68>)
 80089f0:	601a      	str	r2, [r3, #0]
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	2000559c 	.word	0x2000559c
 8008a00:	20005628 	.word	0x20005628
 8008a04:	2000563c 	.word	0x2000563c
 8008a08:	20005658 	.word	0x20005658
 8008a0c:	2000566c 	.word	0x2000566c
 8008a10:	20005684 	.word	0x20005684
 8008a14:	20005650 	.word	0x20005650
 8008a18:	20005654 	.word	0x20005654

08008a1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a22:	e019      	b.n	8008a58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a24:	f000 fbe8 	bl	80091f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a28:	4b10      	ldr	r3, [pc, #64]	; (8008a6c <prvCheckTasksWaitingTermination+0x50>)
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3304      	adds	r3, #4
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fe f825 	bl	8006a84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008a3a:	4b0d      	ldr	r3, [pc, #52]	; (8008a70 <prvCheckTasksWaitingTermination+0x54>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	4a0b      	ldr	r2, [pc, #44]	; (8008a70 <prvCheckTasksWaitingTermination+0x54>)
 8008a42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008a44:	4b0b      	ldr	r3, [pc, #44]	; (8008a74 <prvCheckTasksWaitingTermination+0x58>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <prvCheckTasksWaitingTermination+0x58>)
 8008a4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008a4e:	f000 fc07 	bl	8009260 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f810 	bl	8008a78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a58:	4b06      	ldr	r3, [pc, #24]	; (8008a74 <prvCheckTasksWaitingTermination+0x58>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e1      	bne.n	8008a24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008a60:	bf00      	nop
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	2000566c 	.word	0x2000566c
 8008a70:	20005698 	.word	0x20005698
 8008a74:	20005680 	.word	0x20005680

08008a78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	334c      	adds	r3, #76	; 0x4c
 8008a84:	4618      	mov	r0, r3
 8008a86:	f00c fda5 	bl	80155d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d108      	bne.n	8008aa6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fda5 	bl	80095e8 <vPortFree>
				vPortFree( pxTCB );
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fda2 	bl	80095e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008aa4:	e01a      	b.n	8008adc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d103      	bne.n	8008ab8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fd99 	bl	80095e8 <vPortFree>
	}
 8008ab6:	e011      	b.n	8008adc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d00c      	beq.n	8008adc <prvDeleteTCB+0x64>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	b672      	cpsid	i
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	b662      	cpsie	i
 8008ad6:	60fb      	str	r3, [r7, #12]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <prvDeleteTCB+0x62>
	}
 8008adc:	bf00      	nop
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008aea:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <prvResetNextTaskUnblockTime+0x38>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d104      	bne.n	8008afe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008af4:	4b0a      	ldr	r3, [pc, #40]	; (8008b20 <prvResetNextTaskUnblockTime+0x3c>)
 8008af6:	f04f 32ff 	mov.w	r2, #4294967295
 8008afa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008afc:	e008      	b.n	8008b10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008afe:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <prvResetNextTaskUnblockTime+0x38>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4a04      	ldr	r2, [pc, #16]	; (8008b20 <prvResetNextTaskUnblockTime+0x3c>)
 8008b0e:	6013      	str	r3, [r2, #0]
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	20005650 	.word	0x20005650
 8008b20:	200056b8 	.word	0x200056b8

08008b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008b2a:	4b0b      	ldr	r3, [pc, #44]	; (8008b58 <xTaskGetSchedulerState+0x34>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008b32:	2301      	movs	r3, #1
 8008b34:	607b      	str	r3, [r7, #4]
 8008b36:	e008      	b.n	8008b4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b38:	4b08      	ldr	r3, [pc, #32]	; (8008b5c <xTaskGetSchedulerState+0x38>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d102      	bne.n	8008b46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008b40:	2302      	movs	r3, #2
 8008b42:	607b      	str	r3, [r7, #4]
 8008b44:	e001      	b.n	8008b4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008b46:	2300      	movs	r3, #0
 8008b48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008b4a:	687b      	ldr	r3, [r7, #4]
	}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	200056a4 	.word	0x200056a4
 8008b5c:	200056c0 	.word	0x200056c0

08008b60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d069      	beq.n	8008c4a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7a:	4b36      	ldr	r3, [pc, #216]	; (8008c54 <xTaskPriorityInherit+0xf4>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d259      	bcs.n	8008c38 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	db06      	blt.n	8008b9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b8c:	4b31      	ldr	r3, [pc, #196]	; (8008c54 <xTaskPriorityInherit+0xf4>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b92:	f1c3 0207 	rsb	r2, r3, #7
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	6959      	ldr	r1, [r3, #20]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4a2b      	ldr	r2, [pc, #172]	; (8008c58 <xTaskPriorityInherit+0xf8>)
 8008bac:	4413      	add	r3, r2
 8008bae:	4299      	cmp	r1, r3
 8008bb0:	d13a      	bne.n	8008c28 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fd ff64 	bl	8006a84 <uxListRemove>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d115      	bne.n	8008bee <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc6:	4924      	ldr	r1, [pc, #144]	; (8008c58 <xTaskPriorityInherit+0xf8>)
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xTaskPriorityInherit+0x8e>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	2201      	movs	r2, #1
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	43da      	mvns	r2, r3
 8008be4:	4b1d      	ldr	r3, [pc, #116]	; (8008c5c <xTaskPriorityInherit+0xfc>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4013      	ands	r3, r2
 8008bea:	4a1c      	ldr	r2, [pc, #112]	; (8008c5c <xTaskPriorityInherit+0xfc>)
 8008bec:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008bee:	4b19      	ldr	r3, [pc, #100]	; (8008c54 <xTaskPriorityInherit+0xf4>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	409a      	lsls	r2, r3
 8008c00:	4b16      	ldr	r3, [pc, #88]	; (8008c5c <xTaskPriorityInherit+0xfc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <xTaskPriorityInherit+0xfc>)
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <xTaskPriorityInherit+0xf8>)
 8008c18:	441a      	add	r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	3304      	adds	r3, #4
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f7fd fed2 	bl	80069ca <vListInsertEnd>
 8008c26:	e004      	b.n	8008c32 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c28:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <xTaskPriorityInherit+0xf4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c32:	2301      	movs	r3, #1
 8008c34:	60fb      	str	r3, [r7, #12]
 8008c36:	e008      	b.n	8008c4a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <xTaskPriorityInherit+0xf4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d201      	bcs.n	8008c4a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c46:	2301      	movs	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
	}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	20005598 	.word	0x20005598
 8008c58:	2000559c 	.word	0x2000559c
 8008c5c:	200056a0 	.word	0x200056a0

08008c60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d072      	beq.n	8008d5c <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c76:	4b3c      	ldr	r3, [pc, #240]	; (8008d68 <xTaskPriorityDisinherit+0x108>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d00c      	beq.n	8008c9a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	b672      	cpsid	i
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	b662      	cpsie	i
 8008c94:	60fb      	str	r3, [r7, #12]
}
 8008c96:	bf00      	nop
 8008c98:	e7fe      	b.n	8008c98 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10c      	bne.n	8008cbc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	b672      	cpsid	i
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	b662      	cpsie	i
 8008cb6:	60bb      	str	r3, [r7, #8]
}
 8008cb8:	bf00      	nop
 8008cba:	e7fe      	b.n	8008cba <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cc0:	1e5a      	subs	r2, r3, #1
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d044      	beq.n	8008d5c <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d140      	bne.n	8008d5c <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	3304      	adds	r3, #4
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fd fed0 	bl	8006a84 <uxListRemove>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d115      	bne.n	8008d16 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cee:	491f      	ldr	r1, [pc, #124]	; (8008d6c <xTaskPriorityDisinherit+0x10c>)
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <xTaskPriorityDisinherit+0xb6>
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	2201      	movs	r2, #1
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43da      	mvns	r2, r3
 8008d0c:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <xTaskPriorityDisinherit+0x110>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4013      	ands	r3, r2
 8008d12:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <xTaskPriorityDisinherit+0x110>)
 8008d14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d22:	f1c3 0207 	rsb	r2, r3, #7
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	2201      	movs	r2, #1
 8008d30:	409a      	lsls	r2, r3
 8008d32:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <xTaskPriorityDisinherit+0x110>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <xTaskPriorityDisinherit+0x110>)
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	4613      	mov	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4a08      	ldr	r2, [pc, #32]	; (8008d6c <xTaskPriorityDisinherit+0x10c>)
 8008d4a:	441a      	add	r2, r3
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	3304      	adds	r3, #4
 8008d50:	4619      	mov	r1, r3
 8008d52:	4610      	mov	r0, r2
 8008d54:	f7fd fe39 	bl	80069ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d5c:	697b      	ldr	r3, [r7, #20]
	}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20005598 	.word	0x20005598
 8008d6c:	2000559c 	.word	0x2000559c
 8008d70:	200056a0 	.word	0x200056a0

08008d74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d82:	2301      	movs	r3, #1
 8008d84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8087 	beq.w	8008e9c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10c      	bne.n	8008db0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	b672      	cpsid	i
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	b662      	cpsie	i
 8008daa:	60fb      	str	r3, [r7, #12]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d902      	bls.n	8008dc0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	e002      	b.n	8008dc6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d065      	beq.n	8008e9c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d160      	bne.n	8008e9c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dda:	4b32      	ldr	r3, [pc, #200]	; (8008ea4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d10c      	bne.n	8008dfe <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	b672      	cpsid	i
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	b662      	cpsie	i
 8008df8:	60bb      	str	r3, [r7, #8]
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	69fa      	ldr	r2, [r7, #28]
 8008e08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	db04      	blt.n	8008e1c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	f1c3 0207 	rsb	r2, r3, #7
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	6959      	ldr	r1, [r3, #20]
 8008e20:	693a      	ldr	r2, [r7, #16]
 8008e22:	4613      	mov	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	4a1f      	ldr	r2, [pc, #124]	; (8008ea8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e2c:	4413      	add	r3, r2
 8008e2e:	4299      	cmp	r1, r3
 8008e30:	d134      	bne.n	8008e9c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	3304      	adds	r3, #4
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd fe24 	bl	8006a84 <uxListRemove>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d115      	bne.n	8008e6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e46:	4918      	ldr	r1, [pc, #96]	; (8008ea8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e48:	4613      	mov	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4413      	add	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e62:	43da      	mvns	r2, r3
 8008e64:	4b11      	ldr	r3, [pc, #68]	; (8008eac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	4a10      	ldr	r2, [pc, #64]	; (8008eac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e6c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e72:	2201      	movs	r2, #1
 8008e74:	409a      	lsls	r2, r3
 8008e76:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	4a0b      	ldr	r2, [pc, #44]	; (8008eac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e84:	4613      	mov	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	4413      	add	r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4a06      	ldr	r2, [pc, #24]	; (8008ea8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008e8e:	441a      	add	r2, r3
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4619      	mov	r1, r3
 8008e96:	4610      	mov	r0, r2
 8008e98:	f7fd fd97 	bl	80069ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e9c:	bf00      	nop
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	20005598 	.word	0x20005598
 8008ea8:	2000559c 	.word	0x2000559c
 8008eac:	200056a0 	.word	0x200056a0

08008eb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008eb0:	b480      	push	{r7}
 8008eb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008eb4:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d004      	beq.n	8008ec6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ec2:	3201      	adds	r2, #1
 8008ec4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008ec6:	4b03      	ldr	r3, [pc, #12]	; (8008ed4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
	}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	20005598 	.word	0x20005598

08008ed8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ee2:	4b29      	ldr	r3, [pc, #164]	; (8008f88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ee8:	4b28      	ldr	r3, [pc, #160]	; (8008f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fd fdc8 	bl	8006a84 <uxListRemove>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10b      	bne.n	8008f12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008efa:	4b24      	ldr	r3, [pc, #144]	; (8008f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	2201      	movs	r2, #1
 8008f02:	fa02 f303 	lsl.w	r3, r2, r3
 8008f06:	43da      	mvns	r2, r3
 8008f08:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4013      	ands	r3, r2
 8008f0e:	4a20      	ldr	r2, [pc, #128]	; (8008f90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008f10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f18:	d10a      	bne.n	8008f30 <prvAddCurrentTaskToDelayedList+0x58>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d007      	beq.n	8008f30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f20:	4b1a      	ldr	r3, [pc, #104]	; (8008f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4619      	mov	r1, r3
 8008f28:	481a      	ldr	r0, [pc, #104]	; (8008f94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008f2a:	f7fd fd4e 	bl	80069ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f2e:	e026      	b.n	8008f7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4413      	add	r3, r2
 8008f36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f38:	4b14      	ldr	r3, [pc, #80]	; (8008f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d209      	bcs.n	8008f5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f48:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	4b0f      	ldr	r3, [pc, #60]	; (8008f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3304      	adds	r3, #4
 8008f52:	4619      	mov	r1, r3
 8008f54:	4610      	mov	r0, r2
 8008f56:	f7fd fd5c 	bl	8006a12 <vListInsert>
}
 8008f5a:	e010      	b.n	8008f7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7fd fd52 	bl	8006a12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f6e:	4b0c      	ldr	r3, [pc, #48]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d202      	bcs.n	8008f7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008f78:	4a09      	ldr	r2, [pc, #36]	; (8008fa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	6013      	str	r3, [r2, #0]
}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	2000569c 	.word	0x2000569c
 8008f8c:	20005598 	.word	0x20005598
 8008f90:	200056a0 	.word	0x200056a0
 8008f94:	20005684 	.word	0x20005684
 8008f98:	20005654 	.word	0x20005654
 8008f9c:	20005650 	.word	0x20005650
 8008fa0:	200056b8 	.word	0x200056b8

08008fa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3b04      	subs	r3, #4
 8008fb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	3b04      	subs	r3, #4
 8008fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f023 0201 	bic.w	r2, r3, #1
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3b04      	subs	r3, #4
 8008fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fd4:	4a0c      	ldr	r2, [pc, #48]	; (8009008 <pxPortInitialiseStack+0x64>)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3b14      	subs	r3, #20
 8008fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	3b04      	subs	r3, #4
 8008fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f06f 0202 	mvn.w	r2, #2
 8008ff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	3b20      	subs	r3, #32
 8008ff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	0800900d 	.word	0x0800900d

0800900c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800900c:	b480      	push	{r7}
 800900e:	b085      	sub	sp, #20
 8009010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009016:	4b14      	ldr	r3, [pc, #80]	; (8009068 <prvTaskExitError+0x5c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901e:	d00c      	beq.n	800903a <prvTaskExitError+0x2e>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	b672      	cpsid	i
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	b662      	cpsie	i
 8009034:	60fb      	str	r3, [r7, #12]
}
 8009036:	bf00      	nop
 8009038:	e7fe      	b.n	8009038 <prvTaskExitError+0x2c>
	__asm volatile
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	b672      	cpsid	i
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	b662      	cpsie	i
 800904e:	60bb      	str	r3, [r7, #8]
}
 8009050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009052:	bf00      	nop
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0fc      	beq.n	8009054 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800905a:	bf00      	nop
 800905c:	bf00      	nop
 800905e:	3714      	adds	r7, #20
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	20000020 	.word	0x20000020
 800906c:	00000000 	.word	0x00000000

08009070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009070:	4b07      	ldr	r3, [pc, #28]	; (8009090 <pxCurrentTCBConst2>)
 8009072:	6819      	ldr	r1, [r3, #0]
 8009074:	6808      	ldr	r0, [r1, #0]
 8009076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907a:	f380 8809 	msr	PSP, r0
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f04f 0000 	mov.w	r0, #0
 8009086:	f380 8811 	msr	BASEPRI, r0
 800908a:	4770      	bx	lr
 800908c:	f3af 8000 	nop.w

08009090 <pxCurrentTCBConst2>:
 8009090:	20005598 	.word	0x20005598
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop

08009098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009098:	4808      	ldr	r0, [pc, #32]	; (80090bc <prvPortStartFirstTask+0x24>)
 800909a:	6800      	ldr	r0, [r0, #0]
 800909c:	6800      	ldr	r0, [r0, #0]
 800909e:	f380 8808 	msr	MSP, r0
 80090a2:	f04f 0000 	mov.w	r0, #0
 80090a6:	f380 8814 	msr	CONTROL, r0
 80090aa:	b662      	cpsie	i
 80090ac:	b661      	cpsie	f
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	f3bf 8f6f 	isb	sy
 80090b6:	df00      	svc	0
 80090b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090ba:	bf00      	nop
 80090bc:	e000ed08 	.word	0xe000ed08

080090c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80090c6:	4b37      	ldr	r3, [pc, #220]	; (80091a4 <xPortStartScheduler+0xe4>)
 80090c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	22ff      	movs	r2, #255	; 0xff
 80090d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	4b2f      	ldr	r3, [pc, #188]	; (80091a8 <xPortStartScheduler+0xe8>)
 80090ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80090ee:	4b2f      	ldr	r3, [pc, #188]	; (80091ac <xPortStartScheduler+0xec>)
 80090f0:	2207      	movs	r2, #7
 80090f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80090f4:	e009      	b.n	800910a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80090f6:	4b2d      	ldr	r3, [pc, #180]	; (80091ac <xPortStartScheduler+0xec>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	4a2b      	ldr	r2, [pc, #172]	; (80091ac <xPortStartScheduler+0xec>)
 80090fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	005b      	lsls	r3, r3, #1
 8009106:	b2db      	uxtb	r3, r3
 8009108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009112:	2b80      	cmp	r3, #128	; 0x80
 8009114:	d0ef      	beq.n	80090f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009116:	4b25      	ldr	r3, [pc, #148]	; (80091ac <xPortStartScheduler+0xec>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f1c3 0307 	rsb	r3, r3, #7
 800911e:	2b04      	cmp	r3, #4
 8009120:	d00c      	beq.n	800913c <xPortStartScheduler+0x7c>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	b672      	cpsid	i
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	b662      	cpsie	i
 8009136:	60bb      	str	r3, [r7, #8]
}
 8009138:	bf00      	nop
 800913a:	e7fe      	b.n	800913a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <xPortStartScheduler+0xec>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	4a1a      	ldr	r2, [pc, #104]	; (80091ac <xPortStartScheduler+0xec>)
 8009144:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009146:	4b19      	ldr	r3, [pc, #100]	; (80091ac <xPortStartScheduler+0xec>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800914e:	4a17      	ldr	r2, [pc, #92]	; (80091ac <xPortStartScheduler+0xec>)
 8009150:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	b2da      	uxtb	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800915a:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <xPortStartScheduler+0xf0>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a14      	ldr	r2, [pc, #80]	; (80091b0 <xPortStartScheduler+0xf0>)
 8009160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009164:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009166:	4b12      	ldr	r3, [pc, #72]	; (80091b0 <xPortStartScheduler+0xf0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a11      	ldr	r2, [pc, #68]	; (80091b0 <xPortStartScheduler+0xf0>)
 800916c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009170:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009172:	f000 f8fd 	bl	8009370 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009176:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <xPortStartScheduler+0xf4>)
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800917c:	f000 f91c 	bl	80093b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009180:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <xPortStartScheduler+0xf8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a0c      	ldr	r2, [pc, #48]	; (80091b8 <xPortStartScheduler+0xf8>)
 8009186:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800918a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800918c:	f7ff ff84 	bl	8009098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009190:	f7ff fa76 	bl	8008680 <vTaskSwitchContext>
	prvTaskExitError();
 8009194:	f7ff ff3a 	bl	800900c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	e000e400 	.word	0xe000e400
 80091a8:	200056c4 	.word	0x200056c4
 80091ac:	200056c8 	.word	0x200056c8
 80091b0:	e000ed20 	.word	0xe000ed20
 80091b4:	20000020 	.word	0x20000020
 80091b8:	e000ef34 	.word	0xe000ef34

080091bc <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 80091c2:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <vPortEndScheduler+0x38>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091ca:	d00c      	beq.n	80091e6 <vPortEndScheduler+0x2a>
	__asm volatile
 80091cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d0:	b672      	cpsid	i
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	b662      	cpsie	i
 80091e0:	607b      	str	r3, [r7, #4]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <vPortEndScheduler+0x28>
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20000020 	.word	0x20000020

080091f8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
	__asm volatile
 80091fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009202:	b672      	cpsid	i
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	b662      	cpsie	i
 8009212:	607b      	str	r3, [r7, #4]
}
 8009214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009216:	4b10      	ldr	r3, [pc, #64]	; (8009258 <vPortEnterCritical+0x60>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3301      	adds	r3, #1
 800921c:	4a0e      	ldr	r2, [pc, #56]	; (8009258 <vPortEnterCritical+0x60>)
 800921e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009220:	4b0d      	ldr	r3, [pc, #52]	; (8009258 <vPortEnterCritical+0x60>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d111      	bne.n	800924c <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009228:	4b0c      	ldr	r3, [pc, #48]	; (800925c <vPortEnterCritical+0x64>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	b2db      	uxtb	r3, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00c      	beq.n	800924c <vPortEnterCritical+0x54>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	b672      	cpsid	i
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	b662      	cpsie	i
 8009246:	603b      	str	r3, [r7, #0]
}
 8009248:	bf00      	nop
 800924a:	e7fe      	b.n	800924a <vPortEnterCritical+0x52>
	}
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	20000020 	.word	0x20000020
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009266:	4b13      	ldr	r3, [pc, #76]	; (80092b4 <vPortExitCritical+0x54>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10c      	bne.n	8009288 <vPortExitCritical+0x28>
	__asm volatile
 800926e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009272:	b672      	cpsid	i
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	b662      	cpsie	i
 8009282:	607b      	str	r3, [r7, #4]
}
 8009284:	bf00      	nop
 8009286:	e7fe      	b.n	8009286 <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <vPortExitCritical+0x54>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	3b01      	subs	r3, #1
 800928e:	4a09      	ldr	r2, [pc, #36]	; (80092b4 <vPortExitCritical+0x54>)
 8009290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009292:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <vPortExitCritical+0x54>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d105      	bne.n	80092a6 <vPortExitCritical+0x46>
 800929a:	2300      	movs	r3, #0
 800929c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	f383 8811 	msr	BASEPRI, r3
}
 80092a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092a6:	bf00      	nop
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	20000020 	.word	0x20000020
	...

080092c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092c0:	f3ef 8009 	mrs	r0, PSP
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	4b15      	ldr	r3, [pc, #84]	; (8009320 <pxCurrentTCBConst>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	f01e 0f10 	tst.w	lr, #16
 80092d0:	bf08      	it	eq
 80092d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092da:	6010      	str	r0, [r2, #0]
 80092dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80092e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80092e4:	b672      	cpsid	i
 80092e6:	f380 8811 	msr	BASEPRI, r0
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	b662      	cpsie	i
 80092f4:	f7ff f9c4 	bl	8008680 <vTaskSwitchContext>
 80092f8:	f04f 0000 	mov.w	r0, #0
 80092fc:	f380 8811 	msr	BASEPRI, r0
 8009300:	bc09      	pop	{r0, r3}
 8009302:	6819      	ldr	r1, [r3, #0]
 8009304:	6808      	ldr	r0, [r1, #0]
 8009306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930a:	f01e 0f10 	tst.w	lr, #16
 800930e:	bf08      	it	eq
 8009310:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009314:	f380 8809 	msr	PSP, r0
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop

08009320 <pxCurrentTCBConst>:
 8009320:	20005598 	.word	0x20005598
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop

08009328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
	__asm volatile
 800932e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009332:	b672      	cpsid	i
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	b662      	cpsie	i
 8009342:	607b      	str	r3, [r7, #4]
}
 8009344:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009346:	f7ff f8e1 	bl	800850c <xTaskIncrementTick>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009350:	4b06      	ldr	r3, [pc, #24]	; (800936c <SysTick_Handler+0x44>)
 8009352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	2300      	movs	r3, #0
 800935a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	f383 8811 	msr	BASEPRI, r3
}
 8009362:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009364:	bf00      	nop
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	e000ed04 	.word	0xe000ed04

08009370 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009374:	4b0b      	ldr	r3, [pc, #44]	; (80093a4 <vPortSetupTimerInterrupt+0x34>)
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800937a:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <vPortSetupTimerInterrupt+0x38>)
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009380:	4b0a      	ldr	r3, [pc, #40]	; (80093ac <vPortSetupTimerInterrupt+0x3c>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a0a      	ldr	r2, [pc, #40]	; (80093b0 <vPortSetupTimerInterrupt+0x40>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	099b      	lsrs	r3, r3, #6
 800938c:	4a09      	ldr	r2, [pc, #36]	; (80093b4 <vPortSetupTimerInterrupt+0x44>)
 800938e:	3b01      	subs	r3, #1
 8009390:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009392:	4b04      	ldr	r3, [pc, #16]	; (80093a4 <vPortSetupTimerInterrupt+0x34>)
 8009394:	2207      	movs	r2, #7
 8009396:	601a      	str	r2, [r3, #0]
}
 8009398:	bf00      	nop
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	e000e010 	.word	0xe000e010
 80093a8:	e000e018 	.word	0xe000e018
 80093ac:	20000000 	.word	0x20000000
 80093b0:	10624dd3 	.word	0x10624dd3
 80093b4:	e000e014 	.word	0xe000e014

080093b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80093c8 <vPortEnableVFP+0x10>
 80093bc:	6801      	ldr	r1, [r0, #0]
 80093be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80093c2:	6001      	str	r1, [r0, #0]
 80093c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093c6:	bf00      	nop
 80093c8:	e000ed88 	.word	0xe000ed88

080093cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093d2:	f3ef 8305 	mrs	r3, IPSR
 80093d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b0f      	cmp	r3, #15
 80093dc:	d916      	bls.n	800940c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093de:	4a19      	ldr	r2, [pc, #100]	; (8009444 <vPortValidateInterruptPriority+0x78>)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093e8:	4b17      	ldr	r3, [pc, #92]	; (8009448 <vPortValidateInterruptPriority+0x7c>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	7afa      	ldrb	r2, [r7, #11]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d20c      	bcs.n	800940c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80093f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f6:	b672      	cpsid	i
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	b662      	cpsie	i
 8009406:	607b      	str	r3, [r7, #4]
}
 8009408:	bf00      	nop
 800940a:	e7fe      	b.n	800940a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <vPortValidateInterruptPriority+0x80>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009414:	4b0e      	ldr	r3, [pc, #56]	; (8009450 <vPortValidateInterruptPriority+0x84>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	429a      	cmp	r2, r3
 800941a:	d90c      	bls.n	8009436 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	b672      	cpsid	i
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	b662      	cpsie	i
 8009430:	603b      	str	r3, [r7, #0]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <vPortValidateInterruptPriority+0x68>
	}
 8009436:	bf00      	nop
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	e000e3f0 	.word	0xe000e3f0
 8009448:	200056c4 	.word	0x200056c4
 800944c:	e000ed0c 	.word	0xe000ed0c
 8009450:	200056c8 	.word	0x200056c8

08009454 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b08a      	sub	sp, #40	; 0x28
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800945c:	2300      	movs	r3, #0
 800945e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009460:	f7fe ff86 	bl	8008370 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009464:	4b5b      	ldr	r3, [pc, #364]	; (80095d4 <pvPortMalloc+0x180>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800946c:	f000 f91a 	bl	80096a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009470:	4b59      	ldr	r3, [pc, #356]	; (80095d8 <pvPortMalloc+0x184>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4013      	ands	r3, r2
 8009478:	2b00      	cmp	r3, #0
 800947a:	f040 8092 	bne.w	80095a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01f      	beq.n	80094c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009484:	2208      	movs	r2, #8
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4413      	add	r3, r2
 800948a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f003 0307 	and.w	r3, r3, #7
 8009492:	2b00      	cmp	r3, #0
 8009494:	d016      	beq.n	80094c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f023 0307 	bic.w	r3, r3, #7
 800949c:	3308      	adds	r3, #8
 800949e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f003 0307 	and.w	r3, r3, #7
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00c      	beq.n	80094c4 <pvPortMalloc+0x70>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ae:	b672      	cpsid	i
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	b662      	cpsie	i
 80094be:	617b      	str	r3, [r7, #20]
}
 80094c0:	bf00      	nop
 80094c2:	e7fe      	b.n	80094c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d06b      	beq.n	80095a2 <pvPortMalloc+0x14e>
 80094ca:	4b44      	ldr	r3, [pc, #272]	; (80095dc <pvPortMalloc+0x188>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d866      	bhi.n	80095a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094d4:	4b42      	ldr	r3, [pc, #264]	; (80095e0 <pvPortMalloc+0x18c>)
 80094d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094d8:	4b41      	ldr	r3, [pc, #260]	; (80095e0 <pvPortMalloc+0x18c>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094de:	e004      	b.n	80094ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d903      	bls.n	80094fc <pvPortMalloc+0xa8>
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1f1      	bne.n	80094e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80094fc:	4b35      	ldr	r3, [pc, #212]	; (80095d4 <pvPortMalloc+0x180>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009502:	429a      	cmp	r2, r3
 8009504:	d04d      	beq.n	80095a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2208      	movs	r2, #8
 800950c:	4413      	add	r3, r2
 800950e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	1ad2      	subs	r2, r2, r3
 8009520:	2308      	movs	r3, #8
 8009522:	005b      	lsls	r3, r3, #1
 8009524:	429a      	cmp	r2, r3
 8009526:	d921      	bls.n	800956c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4413      	add	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009530:	69bb      	ldr	r3, [r7, #24]
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00c      	beq.n	8009554 <pvPortMalloc+0x100>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	b672      	cpsid	i
 8009540:	f383 8811 	msr	BASEPRI, r3
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	f3bf 8f4f 	dsb	sy
 800954c:	b662      	cpsie	i
 800954e:	613b      	str	r3, [r7, #16]
}
 8009550:	bf00      	nop
 8009552:	e7fe      	b.n	8009552 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	1ad2      	subs	r2, r2, r3
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009566:	69b8      	ldr	r0, [r7, #24]
 8009568:	f000 f900 	bl	800976c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800956c:	4b1b      	ldr	r3, [pc, #108]	; (80095dc <pvPortMalloc+0x188>)
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	4a19      	ldr	r2, [pc, #100]	; (80095dc <pvPortMalloc+0x188>)
 8009578:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800957a:	4b18      	ldr	r3, [pc, #96]	; (80095dc <pvPortMalloc+0x188>)
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b19      	ldr	r3, [pc, #100]	; (80095e4 <pvPortMalloc+0x190>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d203      	bcs.n	800958e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009586:	4b15      	ldr	r3, [pc, #84]	; (80095dc <pvPortMalloc+0x188>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <pvPortMalloc+0x190>)
 800958c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <pvPortMalloc+0x184>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	431a      	orrs	r2, r3
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	2200      	movs	r2, #0
 80095a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095a2:	f7fe fef3 	bl	800838c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	f003 0307 	and.w	r3, r3, #7
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00c      	beq.n	80095ca <pvPortMalloc+0x176>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	b672      	cpsid	i
 80095b6:	f383 8811 	msr	BASEPRI, r3
 80095ba:	f3bf 8f6f 	isb	sy
 80095be:	f3bf 8f4f 	dsb	sy
 80095c2:	b662      	cpsie	i
 80095c4:	60fb      	str	r3, [r7, #12]
}
 80095c6:	bf00      	nop
 80095c8:	e7fe      	b.n	80095c8 <pvPortMalloc+0x174>
	return pvReturn;
 80095ca:	69fb      	ldr	r3, [r7, #28]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3728      	adds	r7, #40	; 0x28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	200252a4 	.word	0x200252a4
 80095d8:	200252b0 	.word	0x200252b0
 80095dc:	200252a8 	.word	0x200252a8
 80095e0:	2002529c 	.word	0x2002529c
 80095e4:	200252ac 	.word	0x200252ac

080095e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d04c      	beq.n	8009694 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80095fa:	2308      	movs	r3, #8
 80095fc:	425b      	negs	r3, r3
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4413      	add	r3, r2
 8009602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	4b23      	ldr	r3, [pc, #140]	; (800969c <vPortFree+0xb4>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4013      	ands	r3, r2
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10c      	bne.n	8009630 <vPortFree+0x48>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	b672      	cpsid	i
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	b662      	cpsie	i
 800962a:	60fb      	str	r3, [r7, #12]
}
 800962c:	bf00      	nop
 800962e:	e7fe      	b.n	800962e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00c      	beq.n	8009652 <vPortFree+0x6a>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	b672      	cpsid	i
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	b662      	cpsie	i
 800964c:	60bb      	str	r3, [r7, #8]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	4b11      	ldr	r3, [pc, #68]	; (800969c <vPortFree+0xb4>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4013      	ands	r3, r2
 800965c:	2b00      	cmp	r3, #0
 800965e:	d019      	beq.n	8009694 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d115      	bne.n	8009694 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	4b0b      	ldr	r3, [pc, #44]	; (800969c <vPortFree+0xb4>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	43db      	mvns	r3, r3
 8009672:	401a      	ands	r2, r3
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009678:	f7fe fe7a 	bl	8008370 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <vPortFree+0xb8>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4413      	add	r3, r2
 8009686:	4a06      	ldr	r2, [pc, #24]	; (80096a0 <vPortFree+0xb8>)
 8009688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800968a:	6938      	ldr	r0, [r7, #16]
 800968c:	f000 f86e 	bl	800976c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009690:	f7fe fe7c 	bl	800838c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009694:	bf00      	nop
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	200252b0 	.word	0x200252b0
 80096a0:	200252a8 	.word	0x200252a8

080096a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096aa:	4b29      	ldr	r3, [pc, #164]	; (8009750 <prvHeapInit+0xac>)
 80096ac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096ae:	4b29      	ldr	r3, [pc, #164]	; (8009754 <prvHeapInit+0xb0>)
 80096b0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f003 0307 	and.w	r3, r3, #7
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00c      	beq.n	80096d6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3307      	adds	r3, #7
 80096c0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f023 0307 	bic.w	r3, r3, #7
 80096c8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	4a20      	ldr	r2, [pc, #128]	; (8009754 <prvHeapInit+0xb0>)
 80096d2:	4413      	add	r3, r2
 80096d4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80096da:	4a1f      	ldr	r2, [pc, #124]	; (8009758 <prvHeapInit+0xb4>)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80096e0:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <prvHeapInit+0xb4>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	4413      	add	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80096ee:	2208      	movs	r2, #8
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	1a9b      	subs	r3, r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f023 0307 	bic.w	r3, r3, #7
 80096fc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a16      	ldr	r2, [pc, #88]	; (800975c <prvHeapInit+0xb8>)
 8009702:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009704:	4b15      	ldr	r3, [pc, #84]	; (800975c <prvHeapInit+0xb8>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2200      	movs	r2, #0
 800970a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800970c:	4b13      	ldr	r3, [pc, #76]	; (800975c <prvHeapInit+0xb8>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2200      	movs	r2, #0
 8009712:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	1ad2      	subs	r2, r2, r3
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009722:	4b0e      	ldr	r3, [pc, #56]	; (800975c <prvHeapInit+0xb8>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	4a0c      	ldr	r2, [pc, #48]	; (8009760 <prvHeapInit+0xbc>)
 8009730:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	4a0b      	ldr	r2, [pc, #44]	; (8009764 <prvHeapInit+0xc0>)
 8009738:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800973a:	4b0b      	ldr	r3, [pc, #44]	; (8009768 <prvHeapInit+0xc4>)
 800973c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009740:	601a      	str	r2, [r3, #0]
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	0001fbd0 	.word	0x0001fbd0
 8009754:	200056cc 	.word	0x200056cc
 8009758:	2002529c 	.word	0x2002529c
 800975c:	200252a4 	.word	0x200252a4
 8009760:	200252ac 	.word	0x200252ac
 8009764:	200252a8 	.word	0x200252a8
 8009768:	200252b0 	.word	0x200252b0

0800976c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800976c:	b480      	push	{r7}
 800976e:	b085      	sub	sp, #20
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009774:	4b28      	ldr	r3, [pc, #160]	; (8009818 <prvInsertBlockIntoFreeList+0xac>)
 8009776:	60fb      	str	r3, [r7, #12]
 8009778:	e002      	b.n	8009780 <prvInsertBlockIntoFreeList+0x14>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	429a      	cmp	r2, r3
 8009788:	d8f7      	bhi.n	800977a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	4413      	add	r3, r2
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	429a      	cmp	r2, r3
 800979a:	d108      	bne.n	80097ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	685a      	ldr	r2, [r3, #4]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	441a      	add	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	441a      	add	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d118      	bne.n	80097f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	4b15      	ldr	r3, [pc, #84]	; (800981c <prvInsertBlockIntoFreeList+0xb0>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d00d      	beq.n	80097ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	441a      	add	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	e008      	b.n	80097fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80097ea:	4b0c      	ldr	r3, [pc, #48]	; (800981c <prvInsertBlockIntoFreeList+0xb0>)
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	e003      	b.n	80097fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	429a      	cmp	r2, r3
 8009802:	d002      	beq.n	800980a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800980a:	bf00      	nop
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	2002529c 	.word	0x2002529c
 800981c:	200252a4 	.word	0x200252a4

08009820 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800982a:	f007 ff6d 	bl	8011708 <sys_timeouts_sleeptime>
 800982e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009836:	d10b      	bne.n	8009850 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009838:	4813      	ldr	r0, [pc, #76]	; (8009888 <tcpip_timeouts_mbox_fetch+0x68>)
 800983a:	f00a ffde 	bl	80147fa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800983e:	2200      	movs	r2, #0
 8009840:	6839      	ldr	r1, [r7, #0]
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f00a ff50 	bl	80146e8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009848:	480f      	ldr	r0, [pc, #60]	; (8009888 <tcpip_timeouts_mbox_fetch+0x68>)
 800984a:	f00a ffc7 	bl	80147dc <sys_mutex_lock>
    return;
 800984e:	e018      	b.n	8009882 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d102      	bne.n	800985c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009856:	f007 ff1d 	bl	8011694 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800985a:	e7e6      	b.n	800982a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800985c:	480a      	ldr	r0, [pc, #40]	; (8009888 <tcpip_timeouts_mbox_fetch+0x68>)
 800985e:	f00a ffcc 	bl	80147fa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f00a ff3e 	bl	80146e8 <sys_arch_mbox_fetch>
 800986c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800986e:	4806      	ldr	r0, [pc, #24]	; (8009888 <tcpip_timeouts_mbox_fetch+0x68>)
 8009870:	f00a ffb4 	bl	80147dc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800987a:	d102      	bne.n	8009882 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800987c:	f007 ff0a 	bl	8011694 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009880:	e7d3      	b.n	800982a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	200252c0 	.word	0x200252c0

0800988c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009894:	4810      	ldr	r0, [pc, #64]	; (80098d8 <tcpip_thread+0x4c>)
 8009896:	f00a ffa1 	bl	80147dc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800989a:	4b10      	ldr	r3, [pc, #64]	; (80098dc <tcpip_thread+0x50>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d005      	beq.n	80098ae <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80098a2:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <tcpip_thread+0x50>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a0e      	ldr	r2, [pc, #56]	; (80098e0 <tcpip_thread+0x54>)
 80098a8:	6812      	ldr	r2, [r2, #0]
 80098aa:	4610      	mov	r0, r2
 80098ac:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80098ae:	f107 030c 	add.w	r3, r7, #12
 80098b2:	4619      	mov	r1, r3
 80098b4:	480b      	ldr	r0, [pc, #44]	; (80098e4 <tcpip_thread+0x58>)
 80098b6:	f7ff ffb3 	bl	8009820 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80098c0:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <tcpip_thread+0x5c>)
 80098c2:	2291      	movs	r2, #145	; 0x91
 80098c4:	4909      	ldr	r1, [pc, #36]	; (80098ec <tcpip_thread+0x60>)
 80098c6:	480a      	ldr	r0, [pc, #40]	; (80098f0 <tcpip_thread+0x64>)
 80098c8:	f00b fdaa 	bl	8015420 <iprintf>
      continue;
 80098cc:	e003      	b.n	80098d6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 f80f 	bl	80098f4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80098d6:	e7ea      	b.n	80098ae <tcpip_thread+0x22>
 80098d8:	200252c0 	.word	0x200252c0
 80098dc:	200252b4 	.word	0x200252b4
 80098e0:	200252b8 	.word	0x200252b8
 80098e4:	200252bc 	.word	0x200252bc
 80098e8:	080167c4 	.word	0x080167c4
 80098ec:	080167f4 	.word	0x080167f4
 80098f0:	08016814 	.word	0x08016814

080098f4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b02      	cmp	r3, #2
 8009902:	d026      	beq.n	8009952 <tcpip_thread_handle_msg+0x5e>
 8009904:	2b02      	cmp	r3, #2
 8009906:	dc2b      	bgt.n	8009960 <tcpip_thread_handle_msg+0x6c>
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <tcpip_thread_handle_msg+0x1e>
 800990c:	2b01      	cmp	r3, #1
 800990e:	d015      	beq.n	800993c <tcpip_thread_handle_msg+0x48>
 8009910:	e026      	b.n	8009960 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	6850      	ldr	r0, [r2, #4]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6892      	ldr	r2, [r2, #8]
 800991e:	4611      	mov	r1, r2
 8009920:	4798      	blx	r3
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d004      	beq.n	8009932 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	4618      	mov	r0, r3
 800992e:	f002 f87b 	bl	800ba28 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009932:	6879      	ldr	r1, [r7, #4]
 8009934:	2009      	movs	r0, #9
 8009936:	f001 f9d5 	bl	800ace4 <memp_free>
      break;
 800993a:	e018      	b.n	800996e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	6892      	ldr	r2, [r2, #8]
 8009944:	4610      	mov	r0, r2
 8009946:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	2008      	movs	r0, #8
 800994c:	f001 f9ca 	bl	800ace4 <memp_free>
      break;
 8009950:	e00d      	b.n	800996e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	6892      	ldr	r2, [r2, #8]
 800995a:	4610      	mov	r0, r2
 800995c:	4798      	blx	r3
      break;
 800995e:	e006      	b.n	800996e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009960:	4b05      	ldr	r3, [pc, #20]	; (8009978 <tcpip_thread_handle_msg+0x84>)
 8009962:	22cf      	movs	r2, #207	; 0xcf
 8009964:	4905      	ldr	r1, [pc, #20]	; (800997c <tcpip_thread_handle_msg+0x88>)
 8009966:	4806      	ldr	r0, [pc, #24]	; (8009980 <tcpip_thread_handle_msg+0x8c>)
 8009968:	f00b fd5a 	bl	8015420 <iprintf>
      break;
 800996c:	bf00      	nop
  }
}
 800996e:	bf00      	nop
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	080167c4 	.word	0x080167c4
 800997c:	080167f4 	.word	0x080167f4
 8009980:	08016814 	.word	0x08016814

08009984 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009990:	481a      	ldr	r0, [pc, #104]	; (80099fc <tcpip_inpkt+0x78>)
 8009992:	f00a fee8 	bl	8014766 <sys_mbox_valid>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d105      	bne.n	80099a8 <tcpip_inpkt+0x24>
 800999c:	4b18      	ldr	r3, [pc, #96]	; (8009a00 <tcpip_inpkt+0x7c>)
 800999e:	22fc      	movs	r2, #252	; 0xfc
 80099a0:	4918      	ldr	r1, [pc, #96]	; (8009a04 <tcpip_inpkt+0x80>)
 80099a2:	4819      	ldr	r0, [pc, #100]	; (8009a08 <tcpip_inpkt+0x84>)
 80099a4:	f00b fd3c 	bl	8015420 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80099a8:	2009      	movs	r0, #9
 80099aa:	f001 f925 	bl	800abf8 <memp_malloc>
 80099ae:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <tcpip_inpkt+0x38>
    return ERR_MEM;
 80099b6:	f04f 33ff 	mov.w	r3, #4294967295
 80099ba:	e01a      	b.n	80099f2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2200      	movs	r2, #0
 80099c0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80099d4:	6979      	ldr	r1, [r7, #20]
 80099d6:	4809      	ldr	r0, [pc, #36]	; (80099fc <tcpip_inpkt+0x78>)
 80099d8:	f00a fe6c 	bl	80146b4 <sys_mbox_trypost>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d006      	beq.n	80099f0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80099e2:	6979      	ldr	r1, [r7, #20]
 80099e4:	2009      	movs	r0, #9
 80099e6:	f001 f97d 	bl	800ace4 <memp_free>
    return ERR_MEM;
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295
 80099ee:	e000      	b.n	80099f2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80099f0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3718      	adds	r7, #24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	200252bc 	.word	0x200252bc
 8009a00:	080167c4 	.word	0x080167c4
 8009a04:	0801683c 	.word	0x0801683c
 8009a08:	08016814 	.word	0x08016814

08009a0c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a1c:	f003 0318 	and.w	r3, r3, #24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d006      	beq.n	8009a32 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009a24:	4a08      	ldr	r2, [pc, #32]	; (8009a48 <tcpip_input+0x3c>)
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff ffab 	bl	8009984 <tcpip_inpkt>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	e005      	b.n	8009a3e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009a32:	4a06      	ldr	r2, [pc, #24]	; (8009a4c <tcpip_input+0x40>)
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff ffa4 	bl	8009984 <tcpip_inpkt>
 8009a3c:	4603      	mov	r3, r0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	080144c5 	.word	0x080144c5
 8009a4c:	080133cd 	.word	0x080133cd

08009a50 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009a5a:	4819      	ldr	r0, [pc, #100]	; (8009ac0 <tcpip_try_callback+0x70>)
 8009a5c:	f00a fe83 	bl	8014766 <sys_mbox_valid>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <tcpip_try_callback+0x24>
 8009a66:	4b17      	ldr	r3, [pc, #92]	; (8009ac4 <tcpip_try_callback+0x74>)
 8009a68:	f240 125d 	movw	r2, #349	; 0x15d
 8009a6c:	4916      	ldr	r1, [pc, #88]	; (8009ac8 <tcpip_try_callback+0x78>)
 8009a6e:	4817      	ldr	r0, [pc, #92]	; (8009acc <tcpip_try_callback+0x7c>)
 8009a70:	f00b fcd6 	bl	8015420 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009a74:	2008      	movs	r0, #8
 8009a76:	f001 f8bf 	bl	800abf8 <memp_malloc>
 8009a7a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d102      	bne.n	8009a88 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009a82:	f04f 33ff 	mov.w	r3, #4294967295
 8009a86:	e017      	b.n	8009ab8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009a9a:	68f9      	ldr	r1, [r7, #12]
 8009a9c:	4808      	ldr	r0, [pc, #32]	; (8009ac0 <tcpip_try_callback+0x70>)
 8009a9e:	f00a fe09 	bl	80146b4 <sys_mbox_trypost>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d006      	beq.n	8009ab6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009aa8:	68f9      	ldr	r1, [r7, #12]
 8009aaa:	2008      	movs	r0, #8
 8009aac:	f001 f91a 	bl	800ace4 <memp_free>
    return ERR_MEM;
 8009ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab4:	e000      	b.n	8009ab8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3710      	adds	r7, #16
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200252bc 	.word	0x200252bc
 8009ac4:	080167c4 	.word	0x080167c4
 8009ac8:	0801683c 	.word	0x0801683c
 8009acc:	08016814 	.word	0x08016814

08009ad0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009ada:	f000 fbf5 	bl	800a2c8 <lwip_init>

  tcpip_init_done = initfunc;
 8009ade:	4a17      	ldr	r2, [pc, #92]	; (8009b3c <tcpip_init+0x6c>)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009ae4:	4a16      	ldr	r2, [pc, #88]	; (8009b40 <tcpip_init+0x70>)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009aea:	2106      	movs	r1, #6
 8009aec:	4815      	ldr	r0, [pc, #84]	; (8009b44 <tcpip_init+0x74>)
 8009aee:	f00a fdbf 	bl	8014670 <sys_mbox_new>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d006      	beq.n	8009b06 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009af8:	4b13      	ldr	r3, [pc, #76]	; (8009b48 <tcpip_init+0x78>)
 8009afa:	f240 2261 	movw	r2, #609	; 0x261
 8009afe:	4913      	ldr	r1, [pc, #76]	; (8009b4c <tcpip_init+0x7c>)
 8009b00:	4813      	ldr	r0, [pc, #76]	; (8009b50 <tcpip_init+0x80>)
 8009b02:	f00b fc8d 	bl	8015420 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009b06:	4813      	ldr	r0, [pc, #76]	; (8009b54 <tcpip_init+0x84>)
 8009b08:	f00a fe4c 	bl	80147a4 <sys_mutex_new>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d006      	beq.n	8009b20 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009b12:	4b0d      	ldr	r3, [pc, #52]	; (8009b48 <tcpip_init+0x78>)
 8009b14:	f240 2265 	movw	r2, #613	; 0x265
 8009b18:	490f      	ldr	r1, [pc, #60]	; (8009b58 <tcpip_init+0x88>)
 8009b1a:	480d      	ldr	r0, [pc, #52]	; (8009b50 <tcpip_init+0x80>)
 8009b1c:	f00b fc80 	bl	8015420 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009b20:	2300      	movs	r3, #0
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b28:	2200      	movs	r2, #0
 8009b2a:	490c      	ldr	r1, [pc, #48]	; (8009b5c <tcpip_init+0x8c>)
 8009b2c:	480c      	ldr	r0, [pc, #48]	; (8009b60 <tcpip_init+0x90>)
 8009b2e:	f00a fe71 	bl	8014814 <sys_thread_new>
}
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	200252b4 	.word	0x200252b4
 8009b40:	200252b8 	.word	0x200252b8
 8009b44:	200252bc 	.word	0x200252bc
 8009b48:	080167c4 	.word	0x080167c4
 8009b4c:	0801684c 	.word	0x0801684c
 8009b50:	08016814 	.word	0x08016814
 8009b54:	200252c0 	.word	0x200252c0
 8009b58:	08016870 	.word	0x08016870
 8009b5c:	0800988d 	.word	0x0800988d
 8009b60:	08016894 	.word	0x08016894

08009b64 <close_handle>:

static void tftp_tmr(void *arg);

static void
close_handle(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	af00      	add	r7, sp, #0
  tftp_state.port = 0;
 8009b68:	4b12      	ldr	r3, [pc, #72]	; (8009bb4 <close_handle+0x50>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	829a      	strh	r2, [r3, #20]
  ip_addr_set_any(0, &tftp_state.addr);
 8009b6e:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <close_handle+0x50>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	611a      	str	r2, [r3, #16]

  if (tftp_state.last_data != NULL) {
 8009b74:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <close_handle+0x50>)
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d007      	beq.n	8009b8c <close_handle+0x28>
    pbuf_free(tftp_state.last_data);
 8009b7c:	4b0d      	ldr	r3, [pc, #52]	; (8009bb4 <close_handle+0x50>)
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 ff51 	bl	800ba28 <pbuf_free>
    tftp_state.last_data = NULL;
 8009b86:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <close_handle+0x50>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	609a      	str	r2, [r3, #8]
  }

  sys_untimeout(tftp_tmr, NULL);
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	480a      	ldr	r0, [pc, #40]	; (8009bb8 <close_handle+0x54>)
 8009b90:	f007 fd46 	bl	8011620 <sys_untimeout>

  if (tftp_state.handle) {
 8009b94:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <close_handle+0x50>)
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d009      	beq.n	8009bb0 <close_handle+0x4c>
    tftp_state.ctx->close(tftp_state.handle);
 8009b9c:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <close_handle+0x50>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	4a04      	ldr	r2, [pc, #16]	; (8009bb4 <close_handle+0x50>)
 8009ba4:	6852      	ldr	r2, [r2, #4]
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	4798      	blx	r3
    tftp_state.handle = NULL;
 8009baa:	4b02      	ldr	r3, [pc, #8]	; (8009bb4 <close_handle+0x50>)
 8009bac:	2200      	movs	r2, #0
 8009bae:	605a      	str	r2, [r3, #4]
    LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: closing\n"));
  }
}
 8009bb0:	bf00      	nop
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	200252c4 	.word	0x200252c4
 8009bb8:	0800a175 	.word	0x0800a175

08009bbc <send_error>:

static void
send_error(const ip_addr_t *addr, u16_t port, enum tftp_error code, const char *str)
{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b089      	sub	sp, #36	; 0x24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	607b      	str	r3, [r7, #4]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	817b      	strh	r3, [r7, #10]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	727b      	strb	r3, [r7, #9]
  int str_length = strlen(str);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7f6 fb1e 	bl	8000210 <strlen>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	61fb      	str	r3, [r7, #28]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(TFTP_HEADER_LENGTH + str_length + 1), PBUF_RAM);
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	3305      	adds	r3, #5
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009be4:	4619      	mov	r1, r3
 8009be6:	2036      	movs	r0, #54	; 0x36
 8009be8:	f001 fc3c 	bl	800b464 <pbuf_alloc>
 8009bec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d022      	beq.n	8009c3a <send_error+0x7e>
    return;
  }

  payload = (u16_t *) p->payload;
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	617b      	str	r3, [r7, #20]
  payload[0] = PP_HTONS(TFTP_ERROR);
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8009c00:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(code);
 8009c02:	7a7b      	ldrb	r3, [r7, #9]
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	1c9c      	adds	r4, r3, #2
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f000 fb2e 	bl	800a26c <lwip_htons>
 8009c10:	4603      	mov	r3, r0
 8009c12:	8023      	strh	r3, [r4, #0]
  MEMCPY(&payload[2], str, str_length + 1);
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	1d18      	adds	r0, r3, #4
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	f00b fb39 	bl	8015296 <memcpy>

  udp_sendto(tftp_state.upcb, p, addr, port);
 8009c24:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <send_error+0x88>)
 8009c26:	68d8      	ldr	r0, [r3, #12]
 8009c28:	897b      	ldrh	r3, [r7, #10]
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	69b9      	ldr	r1, [r7, #24]
 8009c2e:	f007 ff65 	bl	8011afc <udp_sendto>
  pbuf_free(p);
 8009c32:	69b8      	ldr	r0, [r7, #24]
 8009c34:	f001 fef8 	bl	800ba28 <pbuf_free>
 8009c38:	e000      	b.n	8009c3c <send_error+0x80>
    return;
 8009c3a:	bf00      	nop
}
 8009c3c:	3724      	adds	r7, #36	; 0x24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd90      	pop	{r4, r7, pc}
 8009c42:	bf00      	nop
 8009c44:	200252c4 	.word	0x200252c4

08009c48 <send_ack>:

static void
send_ack(u16_t blknum)
{
 8009c48:	b590      	push	{r4, r7, lr}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t *payload;

  p = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH, PBUF_RAM);
 8009c52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009c56:	2104      	movs	r1, #4
 8009c58:	2036      	movs	r0, #54	; 0x36
 8009c5a:	f001 fc03 	bl	800b464 <pbuf_alloc>
 8009c5e:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01a      	beq.n	8009c9c <send_ack+0x54>
    return;
  }
  payload = (u16_t *) p->payload;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	60bb      	str	r3, [r7, #8]

  payload[0] = PP_HTONS(TFTP_ACK);
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c72:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(blknum);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	1c9c      	adds	r4, r3, #2
 8009c78:	88fb      	ldrh	r3, [r7, #6]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 faf6 	bl	800a26c <lwip_htons>
 8009c80:	4603      	mov	r3, r0
 8009c82:	8023      	strh	r3, [r4, #0]
  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 8009c84:	4b07      	ldr	r3, [pc, #28]	; (8009ca4 <send_ack+0x5c>)
 8009c86:	68d8      	ldr	r0, [r3, #12]
 8009c88:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <send_ack+0x5c>)
 8009c8a:	8a9b      	ldrh	r3, [r3, #20]
 8009c8c:	4a06      	ldr	r2, [pc, #24]	; (8009ca8 <send_ack+0x60>)
 8009c8e:	68f9      	ldr	r1, [r7, #12]
 8009c90:	f007 ff34 	bl	8011afc <udp_sendto>
  pbuf_free(p);
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f001 fec7 	bl	800ba28 <pbuf_free>
 8009c9a:	e000      	b.n	8009c9e <send_ack+0x56>
    return;
 8009c9c:	bf00      	nop
}
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd90      	pop	{r4, r7, pc}
 8009ca4:	200252c4 	.word	0x200252c4
 8009ca8:	200252d4 	.word	0x200252d4

08009cac <resend_data>:

static void
resend_data(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
  struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, tftp_state.last_data->len, PBUF_RAM);
 8009cb2:	4b15      	ldr	r3, [pc, #84]	; (8009d08 <resend_data+0x5c>)
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	895b      	ldrh	r3, [r3, #10]
 8009cb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	2036      	movs	r0, #54	; 0x36
 8009cc0:	f001 fbd0 	bl	800b464 <pbuf_alloc>
 8009cc4:	6078      	str	r0, [r7, #4]
  if (p == NULL) {
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d018      	beq.n	8009cfe <resend_data+0x52>
    return;
  }

  if (pbuf_copy(p, tftp_state.last_data) != ERR_OK) {
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <resend_data+0x5c>)
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 ffdc 	bl	800bc90 <pbuf_copy>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <resend_data+0x3a>
    pbuf_free(p);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 fea2 	bl	800ba28 <pbuf_free>
    return;
 8009ce4:	e00c      	b.n	8009d00 <resend_data+0x54>
  }

  udp_sendto(tftp_state.upcb, p, &tftp_state.addr, tftp_state.port);
 8009ce6:	4b08      	ldr	r3, [pc, #32]	; (8009d08 <resend_data+0x5c>)
 8009ce8:	68d8      	ldr	r0, [r3, #12]
 8009cea:	4b07      	ldr	r3, [pc, #28]	; (8009d08 <resend_data+0x5c>)
 8009cec:	8a9b      	ldrh	r3, [r3, #20]
 8009cee:	4a07      	ldr	r2, [pc, #28]	; (8009d0c <resend_data+0x60>)
 8009cf0:	6879      	ldr	r1, [r7, #4]
 8009cf2:	f007 ff03 	bl	8011afc <udp_sendto>
  pbuf_free(p);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f001 fe96 	bl	800ba28 <pbuf_free>
 8009cfc:	e000      	b.n	8009d00 <resend_data+0x54>
    return;
 8009cfe:	bf00      	nop
}
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	200252c4 	.word	0x200252c4
 8009d0c:	200252d4 	.word	0x200252d4

08009d10 <send_data>:

static void
send_data(void)
{
 8009d10:	b590      	push	{r4, r7, lr}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
  u16_t *payload;
  int ret;

  if (tftp_state.last_data != NULL) {
 8009d16:	4b28      	ldr	r3, [pc, #160]	; (8009db8 <send_data+0xa8>)
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <send_data+0x18>
    pbuf_free(tftp_state.last_data);
 8009d1e:	4b26      	ldr	r3, [pc, #152]	; (8009db8 <send_data+0xa8>)
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 fe80 	bl	800ba28 <pbuf_free>
  }

  tftp_state.last_data = pbuf_alloc(PBUF_TRANSPORT, TFTP_HEADER_LENGTH + TFTP_MAX_PAYLOAD_SIZE, PBUF_RAM);
 8009d28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009d30:	2036      	movs	r0, #54	; 0x36
 8009d32:	f001 fb97 	bl	800b464 <pbuf_alloc>
 8009d36:	4603      	mov	r3, r0
 8009d38:	4a1f      	ldr	r2, [pc, #124]	; (8009db8 <send_data+0xa8>)
 8009d3a:	6093      	str	r3, [r2, #8]
  if (tftp_state.last_data == NULL) {
 8009d3c:	4b1e      	ldr	r3, [pc, #120]	; (8009db8 <send_data+0xa8>)
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d035      	beq.n	8009db0 <send_data+0xa0>
    return;
  }

  payload = (u16_t *) tftp_state.last_data->payload;
 8009d44:	4b1c      	ldr	r3, [pc, #112]	; (8009db8 <send_data+0xa8>)
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	607b      	str	r3, [r7, #4]
  payload[0] = PP_HTONS(TFTP_DATA);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009d52:	801a      	strh	r2, [r3, #0]
  payload[1] = lwip_htons(tftp_state.blknum);
 8009d54:	4b18      	ldr	r3, [pc, #96]	; (8009db8 <send_data+0xa8>)
 8009d56:	8c1a      	ldrh	r2, [r3, #32]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	1c9c      	adds	r4, r3, #2
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	f000 fa85 	bl	800a26c <lwip_htons>
 8009d62:	4603      	mov	r3, r0
 8009d64:	8023      	strh	r3, [r4, #0]

  ret = tftp_state.ctx->read(tftp_state.handle, &payload[2], TFTP_MAX_PAYLOAD_SIZE);
 8009d66:	4b14      	ldr	r3, [pc, #80]	; (8009db8 <send_data+0xa8>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	4a12      	ldr	r2, [pc, #72]	; (8009db8 <send_data+0xa8>)
 8009d6e:	6850      	ldr	r0, [r2, #4]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	1d11      	adds	r1, r2, #4
 8009d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d78:	4798      	blx	r3
 8009d7a:	6038      	str	r0, [r7, #0]
  if (ret < 0) {
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	da09      	bge.n	8009d96 <send_data+0x86>
    send_error(&tftp_state.addr, tftp_state.port, TFTP_ERROR_ACCESS_VIOLATION, "Error occured while reading the file.");
 8009d82:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <send_data+0xa8>)
 8009d84:	8a99      	ldrh	r1, [r3, #20]
 8009d86:	4b0d      	ldr	r3, [pc, #52]	; (8009dbc <send_data+0xac>)
 8009d88:	2202      	movs	r2, #2
 8009d8a:	480d      	ldr	r0, [pc, #52]	; (8009dc0 <send_data+0xb0>)
 8009d8c:	f7ff ff16 	bl	8009bbc <send_error>
    close_handle();
 8009d90:	f7ff fee8 	bl	8009b64 <close_handle>
    return;
 8009d94:	e00d      	b.n	8009db2 <send_data+0xa2>
  }

  pbuf_realloc(tftp_state.last_data, (u16_t)(TFTP_HEADER_LENGTH + ret));
 8009d96:	4b08      	ldr	r3, [pc, #32]	; (8009db8 <send_data+0xa8>)
 8009d98:	689a      	ldr	r2, [r3, #8]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	3304      	adds	r3, #4
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4619      	mov	r1, r3
 8009da4:	4610      	mov	r0, r2
 8009da6:	f001 fcbb 	bl	800b720 <pbuf_realloc>
  resend_data();
 8009daa:	f7ff ff7f 	bl	8009cac <resend_data>
 8009dae:	e000      	b.n	8009db2 <send_data+0xa2>
    return;
 8009db0:	bf00      	nop
}
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd90      	pop	{r4, r7, pc}
 8009db8:	200252c4 	.word	0x200252c4
 8009dbc:	080168a4 	.word	0x080168a4
 8009dc0:	200252d4 	.word	0x200252d4

08009dc4 <recv>:

static void
recv(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b096      	sub	sp, #88	; 0x58
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
 8009dd0:	603b      	str	r3, [r7, #0]
  u16_t *sbuf = (u16_t *) p->payload;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	653b      	str	r3, [r7, #80]	; 0x50
  int opcode;

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(upcb);

  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8009dd8:	4ba8      	ldr	r3, [pc, #672]	; (800a07c <recv+0x2b8>)
 8009dda:	8a9b      	ldrh	r3, [r3, #20]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d005      	beq.n	8009dec <recv+0x28>
 8009de0:	4ba6      	ldr	r3, [pc, #664]	; (800a07c <recv+0x2b8>)
 8009de2:	8a9b      	ldrh	r3, [r3, #20]
 8009de4:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d109      	bne.n	8009e00 <recv+0x3c>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8009dec:	4ba3      	ldr	r3, [pc, #652]	; (800a07c <recv+0x2b8>)
 8009dee:	691b      	ldr	r3, [r3, #16]
  if (((tftp_state.port != 0) && (port != tftp_state.port)) ||
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d010      	beq.n	8009e16 <recv+0x52>
      (!ip_addr_isany_val(tftp_state.addr) && !ip_addr_cmp(&tftp_state.addr, addr))) {
 8009df4:	4ba1      	ldr	r3, [pc, #644]	; (800a07c <recv+0x2b8>)
 8009df6:	691a      	ldr	r2, [r3, #16]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d00a      	beq.n	8009e16 <recv+0x52>
    send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 8009e00:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8009e04:	4b9e      	ldr	r3, [pc, #632]	; (800a080 <recv+0x2bc>)
 8009e06:	2202      	movs	r2, #2
 8009e08:	6838      	ldr	r0, [r7, #0]
 8009e0a:	f7ff fed7 	bl	8009bbc <send_error>
    pbuf_free(p);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f001 fe0a 	bl	800ba28 <pbuf_free>
    return;
 8009e14:	e1a0      	b.n	800a158 <recv+0x394>
  }

  opcode = sbuf[0];
 8009e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	64fb      	str	r3, [r7, #76]	; 0x4c

  tftp_state.last_pkt = tftp_state.timer;
 8009e1c:	4b97      	ldr	r3, [pc, #604]	; (800a07c <recv+0x2b8>)
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	4a96      	ldr	r2, [pc, #600]	; (800a07c <recv+0x2b8>)
 8009e22:	61d3      	str	r3, [r2, #28]
  tftp_state.retries = 0;
 8009e24:	4b95      	ldr	r3, [pc, #596]	; (800a07c <recv+0x2b8>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  switch (opcode) {
 8009e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e32:	f000 8137 	beq.w	800a0a4 <recv+0x2e0>
 8009e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e3c:	f300 8181 	bgt.w	800a142 <recv+0x37e>
 8009e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e46:	f000 80ad 	beq.w	8009fa4 <recv+0x1e0>
 8009e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e50:	f300 8177 	bgt.w	800a142 <recv+0x37e>
 8009e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5a:	d004      	beq.n	8009e66 <recv+0xa2>
 8009e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e62:	f040 816e 	bne.w	800a142 <recv+0x37e>
    case PP_HTONS(TFTP_RRQ): /* fall through */
    case PP_HTONS(TFTP_WRQ): {
      const char tftp_null = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      char filename[TFTP_MAX_FILENAME_LEN + 1];
      char mode[TFTP_MAX_MODE_LEN + 1];
      u16_t filename_end_offset;
      u16_t mode_end_offset;

      if (tftp_state.handle != NULL) {
 8009e6c:	4b83      	ldr	r3, [pc, #524]	; (800a07c <recv+0x2b8>)
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d007      	beq.n	8009e84 <recv+0xc0>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Only one connection at a time is supported");
 8009e74:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8009e78:	4b81      	ldr	r3, [pc, #516]	; (800a080 <recv+0x2bc>)
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	6838      	ldr	r0, [r7, #0]
 8009e7e:	f7ff fe9d 	bl	8009bbc <send_error>
        break;
 8009e82:	e166      	b.n	800a152 <recv+0x38e>
      }

      sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 8009e84:	2200      	movs	r2, #0
 8009e86:	497f      	ldr	r1, [pc, #508]	; (800a084 <recv+0x2c0>)
 8009e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e8c:	f007 fba2 	bl	80115d4 <sys_timeout>

      /* find \0 in pbuf -> end of filename string */
      filename_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), 2);
 8009e90:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8009e94:	2302      	movs	r3, #2
 8009e96:	2201      	movs	r2, #1
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f002 f927 	bl	800c0ec <pbuf_memfind>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      if ((u16_t)(filename_end_offset - 1) > sizeof(filename)) {
 8009ea4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	2b15      	cmp	r3, #21
 8009eae:	d907      	bls.n	8009ec0 <recv+0xfc>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Filename too long/not NULL terminated");
 8009eb0:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8009eb4:	4b74      	ldr	r3, [pc, #464]	; (800a088 <recv+0x2c4>)
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	6838      	ldr	r0, [r7, #0]
 8009eba:	f7ff fe7f 	bl	8009bbc <send_error>
        break;
 8009ebe:	e148      	b.n	800a152 <recv+0x38e>
      }
      pbuf_copy_partial(p, filename, filename_end_offset - 1, 2);
 8009ec0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8009ecc:	2302      	movs	r3, #2
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f001 ffb0 	bl	800be34 <pbuf_copy_partial>

      /* find \0 in pbuf -> end of mode string */
      mode_end_offset = pbuf_memfind(p, &tftp_null, sizeof(tftp_null), filename_end_offset + 1);
 8009ed4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ed8:	3301      	adds	r3, #1
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f002 f902 	bl	800c0ec <pbuf_memfind>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
      if ((u16_t)(mode_end_offset - filename_end_offset) > sizeof(mode)) {
 8009eee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009ef2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	2b11      	cmp	r3, #17
 8009efc:	d907      	bls.n	8009f0e <recv+0x14a>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Mode too long/not NULL terminated");
 8009efe:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8009f02:	4b62      	ldr	r3, [pc, #392]	; (800a08c <recv+0x2c8>)
 8009f04:	2202      	movs	r2, #2
 8009f06:	6838      	ldr	r0, [r7, #0]
 8009f08:	f7ff fe58 	bl	8009bbc <send_error>
        break;
 8009f0c:	e121      	b.n	800a152 <recv+0x38e>
      }
      pbuf_copy_partial(p, mode, mode_end_offset - filename_end_offset, filename_end_offset + 1);
 8009f0e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009f12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f1e:	3301      	adds	r3, #1
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	f107 0114 	add.w	r1, r7, #20
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f001 ff84 	bl	800be34 <pbuf_copy_partial>

      tftp_state.handle = tftp_state.ctx->open(filename, mode, opcode == PP_HTONS(TFTP_WRQ));
 8009f2c:	4b53      	ldr	r3, [pc, #332]	; (800a07c <recv+0x2b8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f34:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009f38:	bf0c      	ite	eq
 8009f3a:	2201      	moveq	r2, #1
 8009f3c:	2200      	movne	r2, #0
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	f107 0114 	add.w	r1, r7, #20
 8009f44:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8009f48:	4798      	blx	r3
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	4a4b      	ldr	r2, [pc, #300]	; (800a07c <recv+0x2b8>)
 8009f4e:	6053      	str	r3, [r2, #4]
      tftp_state.blknum = 1;
 8009f50:	4b4a      	ldr	r3, [pc, #296]	; (800a07c <recv+0x2b8>)
 8009f52:	2201      	movs	r2, #1
 8009f54:	841a      	strh	r2, [r3, #32]

      if (!tftp_state.handle) {
 8009f56:	4b49      	ldr	r3, [pc, #292]	; (800a07c <recv+0x2b8>)
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <recv+0x1aa>
        send_error(addr, port, TFTP_ERROR_FILE_NOT_FOUND, "Unable to open requested file.");
 8009f5e:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8009f62:	4b4b      	ldr	r3, [pc, #300]	; (800a090 <recv+0x2cc>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	6838      	ldr	r0, [r7, #0]
 8009f68:	f7ff fe28 	bl	8009bbc <send_error>
        break;
 8009f6c:	e0f1      	b.n	800a152 <recv+0x38e>

      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: %s request from ", (opcode == PP_HTONS(TFTP_WRQ)) ? "write" : "read"));
      ip_addr_debug_print(TFTP_DEBUG | LWIP_DBG_STATE, addr);
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, (" for '%s' mode '%s'\n", filename, mode));

      ip_addr_copy(tftp_state.addr, *addr);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a42      	ldr	r2, [pc, #264]	; (800a07c <recv+0x2b8>)
 8009f74:	6113      	str	r3, [r2, #16]
      tftp_state.port = port;
 8009f76:	4a41      	ldr	r2, [pc, #260]	; (800a07c <recv+0x2b8>)
 8009f78:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8009f7c:	8293      	strh	r3, [r2, #20]

      if (opcode == PP_HTONS(TFTP_WRQ)) {
 8009f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f84:	d107      	bne.n	8009f96 <recv+0x1d2>
        tftp_state.mode_write = 1;
 8009f86:	4b3d      	ldr	r3, [pc, #244]	; (800a07c <recv+0x2b8>)
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_ack(0);
 8009f8e:	2000      	movs	r0, #0
 8009f90:	f7ff fe5a 	bl	8009c48 <send_ack>
      } else {
        tftp_state.mode_write = 0;
        send_data();
      }

      break;
 8009f94:	e0dd      	b.n	800a152 <recv+0x38e>
        tftp_state.mode_write = 0;
 8009f96:	4b39      	ldr	r3, [pc, #228]	; (800a07c <recv+0x2b8>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        send_data();
 8009f9e:	f7ff feb7 	bl	8009d10 <send_data>
      break;
 8009fa2:	e0d6      	b.n	800a152 <recv+0x38e>

    case PP_HTONS(TFTP_DATA): {
      int ret;
      u16_t blknum;

      if (tftp_state.handle == NULL) {
 8009fa4:	4b35      	ldr	r3, [pc, #212]	; (800a07c <recv+0x2b8>)
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d107      	bne.n	8009fbc <recv+0x1f8>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 8009fac:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8009fb0:	4b38      	ldr	r3, [pc, #224]	; (800a094 <recv+0x2d0>)
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	6838      	ldr	r0, [r7, #0]
 8009fb6:	f7ff fe01 	bl	8009bbc <send_error>
        break;
 8009fba:	e0ca      	b.n	800a152 <recv+0x38e>
      }

      if (tftp_state.mode_write != 1) {
 8009fbc:	4b2f      	ldr	r3, [pc, #188]	; (800a07c <recv+0x2b8>)
 8009fbe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d007      	beq.n	8009fd6 <recv+0x212>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a write connection");
 8009fc6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 8009fca:	4b33      	ldr	r3, [pc, #204]	; (800a098 <recv+0x2d4>)
 8009fcc:	2202      	movs	r2, #2
 8009fce:	6838      	ldr	r0, [r7, #0]
 8009fd0:	f7ff fdf4 	bl	8009bbc <send_error>
        break;
 8009fd4:	e0bd      	b.n	800a152 <recv+0x38e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 8009fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fd8:	3302      	adds	r3, #2
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 f945 	bl	800a26c <lwip_htons>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
      if (blknum == tftp_state.blknum) {
 8009fe8:	4b24      	ldr	r3, [pc, #144]	; (800a07c <recv+0x2b8>)
 8009fea:	8c1b      	ldrh	r3, [r3, #32]
 8009fec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d12d      	bne.n	800a050 <recv+0x28c>
        pbuf_remove_header(p, TFTP_HEADER_LENGTH);
 8009ff4:	2104      	movs	r1, #4
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 fc90 	bl	800b91c <pbuf_remove_header>

        ret = tftp_state.ctx->write(tftp_state.handle, p);
 8009ffc:	4b1f      	ldr	r3, [pc, #124]	; (800a07c <recv+0x2b8>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	4a1e      	ldr	r2, [pc, #120]	; (800a07c <recv+0x2b8>)
 800a004:	6852      	ldr	r2, [r2, #4]
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	4610      	mov	r0, r2
 800a00a:	4798      	blx	r3
 800a00c:	6478      	str	r0, [r7, #68]	; 0x44
        if (ret < 0) {
 800a00e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a010:	2b00      	cmp	r3, #0
 800a012:	da09      	bge.n	800a028 <recv+0x264>
          send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "error writing file");
 800a014:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800a018:	4b20      	ldr	r3, [pc, #128]	; (800a09c <recv+0x2d8>)
 800a01a:	2202      	movs	r2, #2
 800a01c:	6838      	ldr	r0, [r7, #0]
 800a01e:	f7ff fdcd 	bl	8009bbc <send_error>
          close_handle();
 800a022:	f7ff fd9f 	bl	8009b64 <close_handle>
 800a026:	e004      	b.n	800a032 <recv+0x26e>
        } else {
          send_ack(blknum);
 800a028:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7ff fe0b 	bl	8009c48 <send_ack>
        }

        if (p->tot_len < TFTP_MAX_PAYLOAD_SIZE) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	891b      	ldrh	r3, [r3, #8]
 800a036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a03a:	d202      	bcs.n	800a042 <recv+0x27e>
          close_handle();
 800a03c:	f7ff fd92 	bl	8009b64 <close_handle>
        /* retransmit of previous block, ack again (casting to u16_t to care for overflow) */
        send_ack(blknum);
      } else {
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
      }
      break;
 800a040:	e087      	b.n	800a152 <recv+0x38e>
          tftp_state.blknum++;
 800a042:	4b0e      	ldr	r3, [pc, #56]	; (800a07c <recv+0x2b8>)
 800a044:	8c1b      	ldrh	r3, [r3, #32]
 800a046:	3301      	adds	r3, #1
 800a048:	b29a      	uxth	r2, r3
 800a04a:	4b0c      	ldr	r3, [pc, #48]	; (800a07c <recv+0x2b8>)
 800a04c:	841a      	strh	r2, [r3, #32]
      break;
 800a04e:	e080      	b.n	800a152 <recv+0x38e>
      } else if ((u16_t)(blknum + 1) == tftp_state.blknum) {
 800a050:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a054:	3301      	adds	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	4b08      	ldr	r3, [pc, #32]	; (800a07c <recv+0x2b8>)
 800a05a:	8c1b      	ldrh	r3, [r3, #32]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d105      	bne.n	800a06c <recv+0x2a8>
        send_ack(blknum);
 800a060:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fdef 	bl	8009c48 <send_ack>
      break;
 800a06a:	e072      	b.n	800a152 <recv+0x38e>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 800a06c:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800a070:	4b0b      	ldr	r3, [pc, #44]	; (800a0a0 <recv+0x2dc>)
 800a072:	2205      	movs	r2, #5
 800a074:	6838      	ldr	r0, [r7, #0]
 800a076:	f7ff fda1 	bl	8009bbc <send_error>
      break;
 800a07a:	e06a      	b.n	800a152 <recv+0x38e>
 800a07c:	200252c4 	.word	0x200252c4
 800a080:	080168cc 	.word	0x080168cc
 800a084:	0800a175 	.word	0x0800a175
 800a088:	080168f8 	.word	0x080168f8
 800a08c:	08016920 	.word	0x08016920
 800a090:	08016944 	.word	0x08016944
 800a094:	08016964 	.word	0x08016964
 800a098:	08016974 	.word	0x08016974
 800a09c:	0801698c 	.word	0x0801698c
 800a0a0:	080169a0 	.word	0x080169a0

    case PP_HTONS(TFTP_ACK): {
      u16_t blknum;
      int lastpkt;

      if (tftp_state.handle == NULL) {
 800a0a4:	4b2e      	ldr	r3, [pc, #184]	; (800a160 <recv+0x39c>)
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d107      	bne.n	800a0bc <recv+0x2f8>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "No connection");
 800a0ac:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800a0b0:	4b2c      	ldr	r3, [pc, #176]	; (800a164 <recv+0x3a0>)
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	6838      	ldr	r0, [r7, #0]
 800a0b6:	f7ff fd81 	bl	8009bbc <send_error>
        break;
 800a0ba:	e04a      	b.n	800a152 <recv+0x38e>
      }

      if (tftp_state.mode_write != 0) {
 800a0bc:	4b28      	ldr	r3, [pc, #160]	; (800a160 <recv+0x39c>)
 800a0be:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <recv+0x312>
        send_error(addr, port, TFTP_ERROR_ACCESS_VIOLATION, "Not a read connection");
 800a0c6:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800a0ca:	4b27      	ldr	r3, [pc, #156]	; (800a168 <recv+0x3a4>)
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	6838      	ldr	r0, [r7, #0]
 800a0d0:	f7ff fd74 	bl	8009bbc <send_error>
        break;
 800a0d4:	e03d      	b.n	800a152 <recv+0x38e>
      }

      blknum = lwip_ntohs(sbuf[1]);
 800a0d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d8:	3302      	adds	r3, #2
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f000 f8c5 	bl	800a26c <lwip_htons>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      if (blknum != tftp_state.blknum) {
 800a0e8:	4b1d      	ldr	r3, [pc, #116]	; (800a160 <recv+0x39c>)
 800a0ea:	8c1b      	ldrh	r3, [r3, #32]
 800a0ec:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d007      	beq.n	800a104 <recv+0x340>
        send_error(addr, port, TFTP_ERROR_UNKNOWN_TRFR_ID, "Wrong block number");
 800a0f4:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800a0f8:	4b1c      	ldr	r3, [pc, #112]	; (800a16c <recv+0x3a8>)
 800a0fa:	2205      	movs	r2, #5
 800a0fc:	6838      	ldr	r0, [r7, #0]
 800a0fe:	f7ff fd5d 	bl	8009bbc <send_error>
        break;
 800a102:	e026      	b.n	800a152 <recv+0x38e>
      }

      lastpkt = 0;
 800a104:	2300      	movs	r3, #0
 800a106:	657b      	str	r3, [r7, #84]	; 0x54

      if (tftp_state.last_data != NULL) {
 800a108:	4b15      	ldr	r3, [pc, #84]	; (800a160 <recv+0x39c>)
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d009      	beq.n	800a124 <recv+0x360>
        lastpkt = tftp_state.last_data->tot_len != (TFTP_MAX_PAYLOAD_SIZE + TFTP_HEADER_LENGTH);
 800a110:	4b13      	ldr	r3, [pc, #76]	; (800a160 <recv+0x39c>)
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	891b      	ldrh	r3, [r3, #8]
 800a116:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800a11a:	bf14      	ite	ne
 800a11c:	2301      	movne	r3, #1
 800a11e:	2300      	moveq	r3, #0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	657b      	str	r3, [r7, #84]	; 0x54
      }

      if (!lastpkt) {
 800a124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a126:	2b00      	cmp	r3, #0
 800a128:	d108      	bne.n	800a13c <recv+0x378>
        tftp_state.blknum++;
 800a12a:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <recv+0x39c>)
 800a12c:	8c1b      	ldrh	r3, [r3, #32]
 800a12e:	3301      	adds	r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <recv+0x39c>)
 800a134:	841a      	strh	r2, [r3, #32]
        send_data();
 800a136:	f7ff fdeb 	bl	8009d10 <send_data>
      } else {
        close_handle();
      }

      break;
 800a13a:	e00a      	b.n	800a152 <recv+0x38e>
        close_handle();
 800a13c:	f7ff fd12 	bl	8009b64 <close_handle>
      break;
 800a140:	e007      	b.n	800a152 <recv+0x38e>
    }

    default:
      send_error(addr, port, TFTP_ERROR_ILLEGAL_OPERATION, "Unknown operation");
 800a142:	f8b7 1060 	ldrh.w	r1, [r7, #96]	; 0x60
 800a146:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <recv+0x3ac>)
 800a148:	2204      	movs	r2, #4
 800a14a:	6838      	ldr	r0, [r7, #0]
 800a14c:	f7ff fd36 	bl	8009bbc <send_error>
      break;
 800a150:	bf00      	nop
  }

  pbuf_free(p);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f001 fc68 	bl	800ba28 <pbuf_free>
}
 800a158:	3758      	adds	r7, #88	; 0x58
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	200252c4 	.word	0x200252c4
 800a164:	08016964 	.word	0x08016964
 800a168:	080169b4 	.word	0x080169b4
 800a16c:	080169a0 	.word	0x080169a0
 800a170:	080169cc 	.word	0x080169cc

0800a174 <tftp_tmr>:

static void
tftp_tmr(void *arg)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  tftp_state.timer++;
 800a17c:	4b18      	ldr	r3, [pc, #96]	; (800a1e0 <tftp_tmr+0x6c>)
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	3301      	adds	r3, #1
 800a182:	4a17      	ldr	r2, [pc, #92]	; (800a1e0 <tftp_tmr+0x6c>)
 800a184:	6193      	str	r3, [r2, #24]

  if (tftp_state.handle == NULL) {
 800a186:	4b16      	ldr	r3, [pc, #88]	; (800a1e0 <tftp_tmr+0x6c>)
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d023      	beq.n	800a1d6 <tftp_tmr+0x62>
    return;
  }

  sys_timeout(TFTP_TIMER_MSECS, tftp_tmr, NULL);
 800a18e:	2200      	movs	r2, #0
 800a190:	4914      	ldr	r1, [pc, #80]	; (800a1e4 <tftp_tmr+0x70>)
 800a192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a196:	f007 fa1d 	bl	80115d4 <sys_timeout>

  if ((tftp_state.timer - tftp_state.last_pkt) > (TFTP_TIMEOUT_MSECS / TFTP_TIMER_MSECS)) {
 800a19a:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <tftp_tmr+0x6c>)
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <tftp_tmr+0x6c>)
 800a1a0:	69db      	ldr	r3, [r3, #28]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	2b0a      	cmp	r3, #10
 800a1a6:	dd17      	ble.n	800a1d8 <tftp_tmr+0x64>
    if ((tftp_state.last_data != NULL) && (tftp_state.retries < TFTP_MAX_RETRIES)) {
 800a1a8:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <tftp_tmr+0x6c>)
 800a1aa:	689b      	ldr	r3, [r3, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00f      	beq.n	800a1d0 <tftp_tmr+0x5c>
 800a1b0:	4b0b      	ldr	r3, [pc, #44]	; (800a1e0 <tftp_tmr+0x6c>)
 800a1b2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d80a      	bhi.n	800a1d0 <tftp_tmr+0x5c>
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout, retrying\n"));
      resend_data();
 800a1ba:	f7ff fd77 	bl	8009cac <resend_data>
      tftp_state.retries++;
 800a1be:	4b08      	ldr	r3, [pc, #32]	; (800a1e0 <tftp_tmr+0x6c>)
 800a1c0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	4b05      	ldr	r3, [pc, #20]	; (800a1e0 <tftp_tmr+0x6c>)
 800a1ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800a1ce:	e003      	b.n	800a1d8 <tftp_tmr+0x64>
    } else {
      LWIP_DEBUGF(TFTP_DEBUG | LWIP_DBG_STATE, ("tftp: timeout\n"));
      close_handle();
 800a1d0:	f7ff fcc8 	bl	8009b64 <close_handle>
 800a1d4:	e000      	b.n	800a1d8 <tftp_tmr+0x64>
    return;
 800a1d6:	bf00      	nop
    }
  }
}
 800a1d8:	3708      	adds	r7, #8
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	200252c4 	.word	0x200252c4
 800a1e4:	0800a175 	.word	0x0800a175

0800a1e8 <tftp_init>:
 * Initialize TFTP server.
 * @param ctx TFTP callback struct
 */
err_t
tftp_init(const struct tftp_context *ctx)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  err_t ret;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */
  struct udp_pcb *pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800a1f0:	202e      	movs	r0, #46	; 0x2e
 800a1f2:	f007 ff3a 	bl	801206a <udp_new_ip_type>
 800a1f6:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d102      	bne.n	800a204 <tftp_init+0x1c>
    return ERR_MEM;
 800a1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a202:	e028      	b.n	800a256 <tftp_init+0x6e>
  }

  ret = udp_bind(pcb, IP_ANY_TYPE, TFTP_PORT);
 800a204:	2245      	movs	r2, #69	; 0x45
 800a206:	4916      	ldr	r1, [pc, #88]	; (800a260 <tftp_init+0x78>)
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f007 fe2d 	bl	8011e68 <udp_bind>
 800a20e:	4603      	mov	r3, r0
 800a210:	72fb      	strb	r3, [r7, #11]
  if (ret != ERR_OK) {
 800a212:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d005      	beq.n	800a226 <tftp_init+0x3e>
    udp_remove(pcb);
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f007 fecc 	bl	8011fb8 <udp_remove>
    return ret;
 800a220:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a224:	e017      	b.n	800a256 <tftp_init+0x6e>
  }

  tftp_state.handle    = NULL;
 800a226:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <tftp_init+0x7c>)
 800a228:	2200      	movs	r2, #0
 800a22a:	605a      	str	r2, [r3, #4]
  tftp_state.port      = 0;
 800a22c:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <tftp_init+0x7c>)
 800a22e:	2200      	movs	r2, #0
 800a230:	829a      	strh	r2, [r3, #20]
  tftp_state.ctx       = ctx;
 800a232:	4a0c      	ldr	r2, [pc, #48]	; (800a264 <tftp_init+0x7c>)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6013      	str	r3, [r2, #0]
  tftp_state.timer     = 0;
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <tftp_init+0x7c>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	619a      	str	r2, [r3, #24]
  tftp_state.last_data = NULL;
 800a23e:	4b09      	ldr	r3, [pc, #36]	; (800a264 <tftp_init+0x7c>)
 800a240:	2200      	movs	r2, #0
 800a242:	609a      	str	r2, [r3, #8]
  tftp_state.upcb      = pcb;
 800a244:	4a07      	ldr	r2, [pc, #28]	; (800a264 <tftp_init+0x7c>)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	60d3      	str	r3, [r2, #12]

  udp_recv(pcb, recv, NULL);
 800a24a:	2200      	movs	r2, #0
 800a24c:	4906      	ldr	r1, [pc, #24]	; (800a268 <tftp_init+0x80>)
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f007 fe92 	bl	8011f78 <udp_recv>

  return ERR_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	08019684 	.word	0x08019684
 800a264:	200252c4 	.word	0x200252c4
 800a268:	08009dc5 	.word	0x08009dc5

0800a26c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	021b      	lsls	r3, r3, #8
 800a27a:	b21a      	sxth	r2, r3
 800a27c:	88fb      	ldrh	r3, [r7, #6]
 800a27e:	0a1b      	lsrs	r3, r3, #8
 800a280:	b29b      	uxth	r3, r3
 800a282:	b21b      	sxth	r3, r3
 800a284:	4313      	orrs	r3, r2
 800a286:	b21b      	sxth	r3, r3
 800a288:	b29b      	uxth	r3, r3
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	061a      	lsls	r2, r3, #24
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	021b      	lsls	r3, r3, #8
 800a2a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2aa:	431a      	orrs	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	0a1b      	lsrs	r3, r3, #8
 800a2b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	0e1b      	lsrs	r3, r3, #24
 800a2ba:	4313      	orrs	r3, r2
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a2d2:	f00a fa59 	bl	8014788 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a2d6:	f000 f8d3 	bl	800a480 <mem_init>
  memp_init();
 800a2da:	f000 fc1f 	bl	800ab1c <memp_init>
  pbuf_init();
  netif_init();
 800a2de:	f000 fd2b 	bl	800ad38 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a2e2:	f007 fa49 	bl	8011778 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a2e6:	f001 ff37 	bl	800c158 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a2ea:	f007 f951 	bl	8011590 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800a300:	4b04      	ldr	r3, [pc, #16]	; (800a314 <ptr_to_mem+0x1c>)
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4413      	add	r3, r2
}
 800a308:	4618      	mov	r0, r3
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	2003d9bc 	.word	0x2003d9bc

0800a318 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a320:	4b04      	ldr	r3, [pc, #16]	; (800a334 <mem_to_ptr+0x1c>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	1ad3      	subs	r3, r2, r3
}
 800a328:	4618      	mov	r0, r3
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	2003d9bc 	.word	0x2003d9bc

0800a338 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a338:	b590      	push	{r4, r7, lr}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a340:	4b45      	ldr	r3, [pc, #276]	; (800a458 <plug_holes+0x120>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	429a      	cmp	r2, r3
 800a348:	d206      	bcs.n	800a358 <plug_holes+0x20>
 800a34a:	4b44      	ldr	r3, [pc, #272]	; (800a45c <plug_holes+0x124>)
 800a34c:	f240 12df 	movw	r2, #479	; 0x1df
 800a350:	4943      	ldr	r1, [pc, #268]	; (800a460 <plug_holes+0x128>)
 800a352:	4844      	ldr	r0, [pc, #272]	; (800a464 <plug_holes+0x12c>)
 800a354:	f00b f864 	bl	8015420 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a358:	4b43      	ldr	r3, [pc, #268]	; (800a468 <plug_holes+0x130>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	429a      	cmp	r2, r3
 800a360:	d306      	bcc.n	800a370 <plug_holes+0x38>
 800a362:	4b3e      	ldr	r3, [pc, #248]	; (800a45c <plug_holes+0x124>)
 800a364:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a368:	4940      	ldr	r1, [pc, #256]	; (800a46c <plug_holes+0x134>)
 800a36a:	483e      	ldr	r0, [pc, #248]	; (800a464 <plug_holes+0x12c>)
 800a36c:	f00b f858 	bl	8015420 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	7a1b      	ldrb	r3, [r3, #8]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d006      	beq.n	800a386 <plug_holes+0x4e>
 800a378:	4b38      	ldr	r3, [pc, #224]	; (800a45c <plug_holes+0x124>)
 800a37a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a37e:	493c      	ldr	r1, [pc, #240]	; (800a470 <plug_holes+0x138>)
 800a380:	4838      	ldr	r0, [pc, #224]	; (800a464 <plug_holes+0x12c>)
 800a382:	f00b f84d 	bl	8015420 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a3a      	ldr	r2, [pc, #232]	; (800a474 <plug_holes+0x13c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d906      	bls.n	800a39e <plug_holes+0x66>
 800a390:	4b32      	ldr	r3, [pc, #200]	; (800a45c <plug_holes+0x124>)
 800a392:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a396:	4938      	ldr	r1, [pc, #224]	; (800a478 <plug_holes+0x140>)
 800a398:	4832      	ldr	r0, [pc, #200]	; (800a464 <plug_holes+0x12c>)
 800a39a:	f00b f841 	bl	8015420 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff ffa8 	bl	800a2f8 <ptr_to_mem>
 800a3a8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d024      	beq.n	800a3fc <plug_holes+0xc4>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	7a1b      	ldrb	r3, [r3, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d120      	bne.n	800a3fc <plug_holes+0xc4>
 800a3ba:	4b2b      	ldr	r3, [pc, #172]	; (800a468 <plug_holes+0x130>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d01b      	beq.n	800a3fc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a3c4:	4b2d      	ldr	r3, [pc, #180]	; (800a47c <plug_holes+0x144>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d102      	bne.n	800a3d4 <plug_holes+0x9c>
      lfree = mem;
 800a3ce:	4a2b      	ldr	r2, [pc, #172]	; (800a47c <plug_holes+0x144>)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a24      	ldr	r2, [pc, #144]	; (800a474 <plug_holes+0x13c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00a      	beq.n	800a3fc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7ff ff84 	bl	800a2f8 <ptr_to_mem>
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff ff90 	bl	800a318 <mem_to_ptr>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	4618      	mov	r0, r3
 800a402:	f7ff ff79 	bl	800a2f8 <ptr_to_mem>
 800a406:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a408:	68ba      	ldr	r2, [r7, #8]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d01f      	beq.n	800a450 <plug_holes+0x118>
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	7a1b      	ldrb	r3, [r3, #8]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d11b      	bne.n	800a450 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a418:	4b18      	ldr	r3, [pc, #96]	; (800a47c <plug_holes+0x144>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d102      	bne.n	800a428 <plug_holes+0xf0>
      lfree = pmem;
 800a422:	4a16      	ldr	r2, [pc, #88]	; (800a47c <plug_holes+0x144>)
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a0f      	ldr	r2, [pc, #60]	; (800a474 <plug_holes+0x13c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00a      	beq.n	800a450 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff ff5a 	bl	800a2f8 <ptr_to_mem>
 800a444:	4604      	mov	r4, r0
 800a446:	68b8      	ldr	r0, [r7, #8]
 800a448:	f7ff ff66 	bl	800a318 <mem_to_ptr>
 800a44c:	4603      	mov	r3, r0
 800a44e:	6063      	str	r3, [r4, #4]
    }
  }
}
 800a450:	bf00      	nop
 800a452:	3714      	adds	r7, #20
 800a454:	46bd      	mov	sp, r7
 800a456:	bd90      	pop	{r4, r7, pc}
 800a458:	2003d9bc 	.word	0x2003d9bc
 800a45c:	08016a6c 	.word	0x08016a6c
 800a460:	08016a9c 	.word	0x08016a9c
 800a464:	08016ab4 	.word	0x08016ab4
 800a468:	2003d9c0 	.word	0x2003d9c0
 800a46c:	08016adc 	.word	0x08016adc
 800a470:	08016af8 	.word	0x08016af8
 800a474:	000186a0 	.word	0x000186a0
 800a478:	08016b14 	.word	0x08016b14
 800a47c:	2003d9c8 	.word	0x2003d9c8

0800a480 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a486:	4b1d      	ldr	r3, [pc, #116]	; (800a4fc <mem_init+0x7c>)
 800a488:	3303      	adds	r3, #3
 800a48a:	f023 0303 	bic.w	r3, r3, #3
 800a48e:	461a      	mov	r2, r3
 800a490:	4b1b      	ldr	r3, [pc, #108]	; (800a500 <mem_init+0x80>)
 800a492:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a494:	4b1a      	ldr	r3, [pc, #104]	; (800a500 <mem_init+0x80>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a19      	ldr	r2, [pc, #100]	; (800a504 <mem_init+0x84>)
 800a49e:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a4ac:	4815      	ldr	r0, [pc, #84]	; (800a504 <mem_init+0x84>)
 800a4ae:	f7ff ff23 	bl	800a2f8 <ptr_to_mem>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4a14      	ldr	r2, [pc, #80]	; (800a508 <mem_init+0x88>)
 800a4b6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a4b8:	4b13      	ldr	r3, [pc, #76]	; (800a508 <mem_init+0x88>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a4c0:	4b11      	ldr	r3, [pc, #68]	; (800a508 <mem_init+0x88>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a0f      	ldr	r2, [pc, #60]	; (800a504 <mem_init+0x84>)
 800a4c6:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a4c8:	4b0f      	ldr	r3, [pc, #60]	; (800a508 <mem_init+0x88>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a0d      	ldr	r2, [pc, #52]	; (800a504 <mem_init+0x84>)
 800a4ce:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a4d0:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <mem_init+0x80>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a0d      	ldr	r2, [pc, #52]	; (800a50c <mem_init+0x8c>)
 800a4d6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a4d8:	480d      	ldr	r0, [pc, #52]	; (800a510 <mem_init+0x90>)
 800a4da:	f00a f963 	bl	80147a4 <sys_mutex_new>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d006      	beq.n	800a4f2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a4e4:	4b0b      	ldr	r3, [pc, #44]	; (800a514 <mem_init+0x94>)
 800a4e6:	f240 221f 	movw	r2, #543	; 0x21f
 800a4ea:	490b      	ldr	r1, [pc, #44]	; (800a518 <mem_init+0x98>)
 800a4ec:	480b      	ldr	r0, [pc, #44]	; (800a51c <mem_init+0x9c>)
 800a4ee:	f00a ff97 	bl	8015420 <iprintf>
  }
}
 800a4f2:	bf00      	nop
 800a4f4:	3708      	adds	r7, #8
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	20025300 	.word	0x20025300
 800a500:	2003d9bc 	.word	0x2003d9bc
 800a504:	000186a0 	.word	0x000186a0
 800a508:	2003d9c0 	.word	0x2003d9c0
 800a50c:	2003d9c8 	.word	0x2003d9c8
 800a510:	2003d9c4 	.word	0x2003d9c4
 800a514:	08016a6c 	.word	0x08016a6c
 800a518:	08016b40 	.word	0x08016b40
 800a51c:	08016ab4 	.word	0x08016ab4

0800a520 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f7ff fef5 	bl	800a318 <mem_to_ptr>
 800a52e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4618      	mov	r0, r3
 800a536:	f7ff fedf 	bl	800a2f8 <ptr_to_mem>
 800a53a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff fed9 	bl	800a2f8 <ptr_to_mem>
 800a546:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a11      	ldr	r2, [pc, #68]	; (800a594 <mem_link_valid+0x74>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d818      	bhi.n	800a584 <mem_link_valid+0x64>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	4a0f      	ldr	r2, [pc, #60]	; (800a594 <mem_link_valid+0x74>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d813      	bhi.n	800a584 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	429a      	cmp	r2, r3
 800a564:	d004      	beq.n	800a570 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d109      	bne.n	800a584 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a570:	4b09      	ldr	r3, [pc, #36]	; (800a598 <mem_link_valid+0x78>)
 800a572:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	429a      	cmp	r2, r3
 800a578:	d006      	beq.n	800a588 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	697a      	ldr	r2, [r7, #20]
 800a580:	429a      	cmp	r2, r3
 800a582:	d001      	beq.n	800a588 <mem_link_valid+0x68>
    return 0;
 800a584:	2300      	movs	r3, #0
 800a586:	e000      	b.n	800a58a <mem_link_valid+0x6a>
  }
  return 1;
 800a588:	2301      	movs	r3, #1
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	000186a0 	.word	0x000186a0
 800a598:	2003d9c0 	.word	0x2003d9c0

0800a59c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d070      	beq.n	800a68c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f003 0303 	and.w	r3, r3, #3
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00d      	beq.n	800a5d0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a5b4:	4b37      	ldr	r3, [pc, #220]	; (800a694 <mem_free+0xf8>)
 800a5b6:	f240 2273 	movw	r2, #627	; 0x273
 800a5ba:	4937      	ldr	r1, [pc, #220]	; (800a698 <mem_free+0xfc>)
 800a5bc:	4837      	ldr	r0, [pc, #220]	; (800a69c <mem_free+0x100>)
 800a5be:	f00a ff2f 	bl	8015420 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a5c2:	f00a f94d 	bl	8014860 <sys_arch_protect>
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f00a f957 	bl	801487c <sys_arch_unprotect>
    return;
 800a5ce:	e05e      	b.n	800a68e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3b0c      	subs	r3, #12
 800a5d4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a5d6:	4b32      	ldr	r3, [pc, #200]	; (800a6a0 <mem_free+0x104>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	69fa      	ldr	r2, [r7, #28]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d306      	bcc.n	800a5ee <mem_free+0x52>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f103 020c 	add.w	r2, r3, #12
 800a5e6:	4b2f      	ldr	r3, [pc, #188]	; (800a6a4 <mem_free+0x108>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d90d      	bls.n	800a60a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a5ee:	4b29      	ldr	r3, [pc, #164]	; (800a694 <mem_free+0xf8>)
 800a5f0:	f240 227f 	movw	r2, #639	; 0x27f
 800a5f4:	492c      	ldr	r1, [pc, #176]	; (800a6a8 <mem_free+0x10c>)
 800a5f6:	4829      	ldr	r0, [pc, #164]	; (800a69c <mem_free+0x100>)
 800a5f8:	f00a ff12 	bl	8015420 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a5fc:	f00a f930 	bl	8014860 <sys_arch_protect>
 800a600:	6138      	str	r0, [r7, #16]
 800a602:	6938      	ldr	r0, [r7, #16]
 800a604:	f00a f93a 	bl	801487c <sys_arch_unprotect>
    return;
 800a608:	e041      	b.n	800a68e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a60a:	4828      	ldr	r0, [pc, #160]	; (800a6ac <mem_free+0x110>)
 800a60c:	f00a f8e6 	bl	80147dc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	7a1b      	ldrb	r3, [r3, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d110      	bne.n	800a63a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a618:	4b1e      	ldr	r3, [pc, #120]	; (800a694 <mem_free+0xf8>)
 800a61a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a61e:	4924      	ldr	r1, [pc, #144]	; (800a6b0 <mem_free+0x114>)
 800a620:	481e      	ldr	r0, [pc, #120]	; (800a69c <mem_free+0x100>)
 800a622:	f00a fefd 	bl	8015420 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a626:	4821      	ldr	r0, [pc, #132]	; (800a6ac <mem_free+0x110>)
 800a628:	f00a f8e7 	bl	80147fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a62c:	f00a f918 	bl	8014860 <sys_arch_protect>
 800a630:	6178      	str	r0, [r7, #20]
 800a632:	6978      	ldr	r0, [r7, #20]
 800a634:	f00a f922 	bl	801487c <sys_arch_unprotect>
    return;
 800a638:	e029      	b.n	800a68e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a63a:	69f8      	ldr	r0, [r7, #28]
 800a63c:	f7ff ff70 	bl	800a520 <mem_link_valid>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d110      	bne.n	800a668 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a646:	4b13      	ldr	r3, [pc, #76]	; (800a694 <mem_free+0xf8>)
 800a648:	f240 2295 	movw	r2, #661	; 0x295
 800a64c:	4919      	ldr	r1, [pc, #100]	; (800a6b4 <mem_free+0x118>)
 800a64e:	4813      	ldr	r0, [pc, #76]	; (800a69c <mem_free+0x100>)
 800a650:	f00a fee6 	bl	8015420 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a654:	4815      	ldr	r0, [pc, #84]	; (800a6ac <mem_free+0x110>)
 800a656:	f00a f8d0 	bl	80147fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a65a:	f00a f901 	bl	8014860 <sys_arch_protect>
 800a65e:	61b8      	str	r0, [r7, #24]
 800a660:	69b8      	ldr	r0, [r7, #24]
 800a662:	f00a f90b 	bl	801487c <sys_arch_unprotect>
    return;
 800a666:	e012      	b.n	800a68e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	2200      	movs	r2, #0
 800a66c:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800a66e:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <mem_free+0x11c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	429a      	cmp	r2, r3
 800a676:	d202      	bcs.n	800a67e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a678:	4a0f      	ldr	r2, [pc, #60]	; (800a6b8 <mem_free+0x11c>)
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a67e:	69f8      	ldr	r0, [r7, #28]
 800a680:	f7ff fe5a 	bl	800a338 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a684:	4809      	ldr	r0, [pc, #36]	; (800a6ac <mem_free+0x110>)
 800a686:	f00a f8b8 	bl	80147fa <sys_mutex_unlock>
 800a68a:	e000      	b.n	800a68e <mem_free+0xf2>
    return;
 800a68c:	bf00      	nop
}
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	08016a6c 	.word	0x08016a6c
 800a698:	08016b5c 	.word	0x08016b5c
 800a69c:	08016ab4 	.word	0x08016ab4
 800a6a0:	2003d9bc 	.word	0x2003d9bc
 800a6a4:	2003d9c0 	.word	0x2003d9c0
 800a6a8:	08016b80 	.word	0x08016b80
 800a6ac:	2003d9c4 	.word	0x2003d9c4
 800a6b0:	08016b9c 	.word	0x08016b9c
 800a6b4:	08016bc4 	.word	0x08016bc4
 800a6b8:	2003d9c8 	.word	0x2003d9c8

0800a6bc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b08a      	sub	sp, #40	; 0x28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	3303      	adds	r3, #3
 800a6ca:	f023 0303 	bic.w	r3, r3, #3
 800a6ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	2b0b      	cmp	r3, #11
 800a6d4:	d801      	bhi.n	800a6da <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a6d6:	230c      	movs	r3, #12
 800a6d8:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6dc:	4a6e      	ldr	r2, [pc, #440]	; (800a898 <mem_trim+0x1dc>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d803      	bhi.n	800a6ea <mem_trim+0x2e>
 800a6e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d201      	bcs.n	800a6ee <mem_trim+0x32>
    return NULL;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e0d0      	b.n	800a890 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a6ee:	4b6b      	ldr	r3, [pc, #428]	; (800a89c <mem_trim+0x1e0>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d304      	bcc.n	800a702 <mem_trim+0x46>
 800a6f8:	4b69      	ldr	r3, [pc, #420]	; (800a8a0 <mem_trim+0x1e4>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d306      	bcc.n	800a710 <mem_trim+0x54>
 800a702:	4b68      	ldr	r3, [pc, #416]	; (800a8a4 <mem_trim+0x1e8>)
 800a704:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a708:	4967      	ldr	r1, [pc, #412]	; (800a8a8 <mem_trim+0x1ec>)
 800a70a:	4868      	ldr	r0, [pc, #416]	; (800a8ac <mem_trim+0x1f0>)
 800a70c:	f00a fe88 	bl	8015420 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a710:	4b62      	ldr	r3, [pc, #392]	; (800a89c <mem_trim+0x1e0>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	429a      	cmp	r2, r3
 800a718:	d304      	bcc.n	800a724 <mem_trim+0x68>
 800a71a:	4b61      	ldr	r3, [pc, #388]	; (800a8a0 <mem_trim+0x1e4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	429a      	cmp	r2, r3
 800a722:	d307      	bcc.n	800a734 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a724:	f00a f89c 	bl	8014860 <sys_arch_protect>
 800a728:	60b8      	str	r0, [r7, #8]
 800a72a:	68b8      	ldr	r0, [r7, #8]
 800a72c:	f00a f8a6 	bl	801487c <sys_arch_unprotect>
    return rmem;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	e0ad      	b.n	800a890 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3b0c      	subs	r3, #12
 800a738:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a73a:	6a38      	ldr	r0, [r7, #32]
 800a73c:	f7ff fdec 	bl	800a318 <mem_to_ptr>
 800a740:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	3b0c      	subs	r3, #12
 800a74c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	429a      	cmp	r2, r3
 800a754:	d906      	bls.n	800a764 <mem_trim+0xa8>
 800a756:	4b53      	ldr	r3, [pc, #332]	; (800a8a4 <mem_trim+0x1e8>)
 800a758:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a75c:	4954      	ldr	r1, [pc, #336]	; (800a8b0 <mem_trim+0x1f4>)
 800a75e:	4853      	ldr	r0, [pc, #332]	; (800a8ac <mem_trim+0x1f0>)
 800a760:	f00a fe5e 	bl	8015420 <iprintf>
  if (newsize > size) {
 800a764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d901      	bls.n	800a770 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800a76c:	2300      	movs	r3, #0
 800a76e:	e08f      	b.n	800a890 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800a770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	429a      	cmp	r2, r3
 800a776:	d101      	bne.n	800a77c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	e089      	b.n	800a890 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a77c:	484d      	ldr	r0, [pc, #308]	; (800a8b4 <mem_trim+0x1f8>)
 800a77e:	f00a f82d 	bl	80147dc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff fdb6 	bl	800a2f8 <ptr_to_mem>
 800a78c:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	7a1b      	ldrb	r3, [r3, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d13c      	bne.n	800a810 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a3f      	ldr	r2, [pc, #252]	; (800a898 <mem_trim+0x1dc>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d106      	bne.n	800a7ae <mem_trim+0xf2>
 800a7a0:	4b40      	ldr	r3, [pc, #256]	; (800a8a4 <mem_trim+0x1e8>)
 800a7a2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a7a6:	4944      	ldr	r1, [pc, #272]	; (800a8b8 <mem_trim+0x1fc>)
 800a7a8:	4840      	ldr	r0, [pc, #256]	; (800a8ac <mem_trim+0x1f0>)
 800a7aa:	f00a fe39 	bl	8015420 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a7b4:	69fa      	ldr	r2, [r7, #28]
 800a7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b8:	4413      	add	r3, r2
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800a7be:	4b3f      	ldr	r3, [pc, #252]	; (800a8bc <mem_trim+0x200>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d105      	bne.n	800a7d4 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800a7c8:	6938      	ldr	r0, [r7, #16]
 800a7ca:	f7ff fd95 	bl	800a2f8 <ptr_to_mem>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4a3a      	ldr	r2, [pc, #232]	; (800a8bc <mem_trim+0x200>)
 800a7d2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a7d4:	6938      	ldr	r0, [r7, #16]
 800a7d6:	f7ff fd8f 	bl	800a2f8 <ptr_to_mem>
 800a7da:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	69fa      	ldr	r2, [r7, #28]
 800a7ec:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a27      	ldr	r2, [pc, #156]	; (800a898 <mem_trim+0x1dc>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d044      	beq.n	800a888 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff fd78 	bl	800a2f8 <ptr_to_mem>
 800a808:	4602      	mov	r2, r0
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	6053      	str	r3, [r2, #4]
 800a80e:	e03b      	b.n	800a888 <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	3318      	adds	r3, #24
 800a814:	69ba      	ldr	r2, [r7, #24]
 800a816:	429a      	cmp	r2, r3
 800a818:	d336      	bcc.n	800a888 <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81e:	4413      	add	r3, r2
 800a820:	330c      	adds	r3, #12
 800a822:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a824:	6a3b      	ldr	r3, [r7, #32]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a1b      	ldr	r2, [pc, #108]	; (800a898 <mem_trim+0x1dc>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d106      	bne.n	800a83c <mem_trim+0x180>
 800a82e:	4b1d      	ldr	r3, [pc, #116]	; (800a8a4 <mem_trim+0x1e8>)
 800a830:	f240 3216 	movw	r2, #790	; 0x316
 800a834:	4920      	ldr	r1, [pc, #128]	; (800a8b8 <mem_trim+0x1fc>)
 800a836:	481d      	ldr	r0, [pc, #116]	; (800a8ac <mem_trim+0x1f0>)
 800a838:	f00a fdf2 	bl	8015420 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a83c:	6938      	ldr	r0, [r7, #16]
 800a83e:	f7ff fd5b 	bl	800a2f8 <ptr_to_mem>
 800a842:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800a844:	4b1d      	ldr	r3, [pc, #116]	; (800a8bc <mem_trim+0x200>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d202      	bcs.n	800a854 <mem_trim+0x198>
      lfree = mem2;
 800a84e:	4a1b      	ldr	r2, [pc, #108]	; (800a8bc <mem_trim+0x200>)
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2200      	movs	r2, #0
 800a858:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	69fa      	ldr	r2, [r7, #28]
 800a866:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	693a      	ldr	r2, [r7, #16]
 800a86c:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	4a09      	ldr	r2, [pc, #36]	; (800a898 <mem_trim+0x1dc>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d007      	beq.n	800a888 <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7ff fd3b 	bl	800a2f8 <ptr_to_mem>
 800a882:	4602      	mov	r2, r0
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a888:	480a      	ldr	r0, [pc, #40]	; (800a8b4 <mem_trim+0x1f8>)
 800a88a:	f009 ffb6 	bl	80147fa <sys_mutex_unlock>
  return rmem;
 800a88e:	687b      	ldr	r3, [r7, #4]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3728      	adds	r7, #40	; 0x28
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	000186a0 	.word	0x000186a0
 800a89c:	2003d9bc 	.word	0x2003d9bc
 800a8a0:	2003d9c0 	.word	0x2003d9c0
 800a8a4:	08016a6c 	.word	0x08016a6c
 800a8a8:	08016bf8 	.word	0x08016bf8
 800a8ac:	08016ab4 	.word	0x08016ab4
 800a8b0:	08016c10 	.word	0x08016c10
 800a8b4:	2003d9c4 	.word	0x2003d9c4
 800a8b8:	08016c30 	.word	0x08016c30
 800a8bc:	2003d9c8 	.word	0x2003d9c8

0800a8c0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <mem_malloc+0x12>
    return NULL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	e0d9      	b.n	800aa86 <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3303      	adds	r3, #3
 800a8d6:	f023 0303 	bic.w	r3, r3, #3
 800a8da:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	2b0b      	cmp	r3, #11
 800a8e0:	d801      	bhi.n	800a8e6 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a8e2:	230c      	movs	r3, #12
 800a8e4:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a8e6:	69bb      	ldr	r3, [r7, #24]
 800a8e8:	4a69      	ldr	r2, [pc, #420]	; (800aa90 <mem_malloc+0x1d0>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d803      	bhi.n	800a8f6 <mem_malloc+0x36>
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d201      	bcs.n	800a8fa <mem_malloc+0x3a>
    return NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e0c5      	b.n	800aa86 <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a8fa:	4866      	ldr	r0, [pc, #408]	; (800aa94 <mem_malloc+0x1d4>)
 800a8fc:	f009 ff6e 	bl	80147dc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a900:	4b65      	ldr	r3, [pc, #404]	; (800aa98 <mem_malloc+0x1d8>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4618      	mov	r0, r3
 800a906:	f7ff fd07 	bl	800a318 <mem_to_ptr>
 800a90a:	61f8      	str	r0, [r7, #28]
 800a90c:	e0b0      	b.n	800aa70 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a90e:	69f8      	ldr	r0, [r7, #28]
 800a910:	f7ff fcf2 	bl	800a2f8 <ptr_to_mem>
 800a914:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	7a1b      	ldrb	r3, [r3, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f040 80a2 	bne.w	800aa64 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	f200 8099 	bhi.w	800aa64 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	f1a3 020c 	sub.w	r2, r3, #12
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	3318      	adds	r3, #24
 800a942:	429a      	cmp	r2, r3
 800a944:	d331      	bcc.n	800a9aa <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	4413      	add	r3, r2
 800a94c:	330c      	adds	r3, #12
 800a94e:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4a4f      	ldr	r2, [pc, #316]	; (800aa90 <mem_malloc+0x1d0>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d106      	bne.n	800a966 <mem_malloc+0xa6>
 800a958:	4b50      	ldr	r3, [pc, #320]	; (800aa9c <mem_malloc+0x1dc>)
 800a95a:	f240 3287 	movw	r2, #903	; 0x387
 800a95e:	4950      	ldr	r1, [pc, #320]	; (800aaa0 <mem_malloc+0x1e0>)
 800a960:	4850      	ldr	r0, [pc, #320]	; (800aaa4 <mem_malloc+0x1e4>)
 800a962:	f00a fd5d 	bl	8015420 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff fcc6 	bl	800a2f8 <ptr_to_mem>
 800a96c:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2200      	movs	r2, #0
 800a972:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	69fa      	ldr	r2, [r7, #28]
 800a980:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2201      	movs	r2, #1
 800a98c:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a3f      	ldr	r2, [pc, #252]	; (800aa90 <mem_malloc+0x1d0>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d00b      	beq.n	800a9b0 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff fcab 	bl	800a2f8 <ptr_to_mem>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6053      	str	r3, [r2, #4]
 800a9a8:	e002      	b.n	800a9b0 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a9b0:	4b39      	ldr	r3, [pc, #228]	; (800aa98 <mem_malloc+0x1d8>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d127      	bne.n	800aa0a <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800a9ba:	4b37      	ldr	r3, [pc, #220]	; (800aa98 <mem_malloc+0x1d8>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a9c0:	e005      	b.n	800a9ce <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff fc96 	bl	800a2f8 <ptr_to_mem>
 800a9cc:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	7a1b      	ldrb	r3, [r3, #8]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d004      	beq.n	800a9e0 <mem_malloc+0x120>
 800a9d6:	4b34      	ldr	r3, [pc, #208]	; (800aaa8 <mem_malloc+0x1e8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d1f0      	bne.n	800a9c2 <mem_malloc+0x102>
          }
          lfree = cur;
 800a9e0:	4a2d      	ldr	r2, [pc, #180]	; (800aa98 <mem_malloc+0x1d8>)
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a9e6:	4b2c      	ldr	r3, [pc, #176]	; (800aa98 <mem_malloc+0x1d8>)
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	4b2f      	ldr	r3, [pc, #188]	; (800aaa8 <mem_malloc+0x1e8>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d00b      	beq.n	800aa0a <mem_malloc+0x14a>
 800a9f2:	4b29      	ldr	r3, [pc, #164]	; (800aa98 <mem_malloc+0x1d8>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	7a1b      	ldrb	r3, [r3, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d006      	beq.n	800aa0a <mem_malloc+0x14a>
 800a9fc:	4b27      	ldr	r3, [pc, #156]	; (800aa9c <mem_malloc+0x1dc>)
 800a9fe:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aa02:	492a      	ldr	r1, [pc, #168]	; (800aaac <mem_malloc+0x1ec>)
 800aa04:	4827      	ldr	r0, [pc, #156]	; (800aaa4 <mem_malloc+0x1e4>)
 800aa06:	f00a fd0b 	bl	8015420 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800aa0a:	4822      	ldr	r0, [pc, #136]	; (800aa94 <mem_malloc+0x1d4>)
 800aa0c:	f009 fef5 	bl	80147fa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	4413      	add	r3, r2
 800aa16:	330c      	adds	r3, #12
 800aa18:	4a23      	ldr	r2, [pc, #140]	; (800aaa8 <mem_malloc+0x1e8>)
 800aa1a:	6812      	ldr	r2, [r2, #0]
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d906      	bls.n	800aa2e <mem_malloc+0x16e>
 800aa20:	4b1e      	ldr	r3, [pc, #120]	; (800aa9c <mem_malloc+0x1dc>)
 800aa22:	f240 32b9 	movw	r2, #953	; 0x3b9
 800aa26:	4922      	ldr	r1, [pc, #136]	; (800aab0 <mem_malloc+0x1f0>)
 800aa28:	481e      	ldr	r0, [pc, #120]	; (800aaa4 <mem_malloc+0x1e4>)
 800aa2a:	f00a fcf9 	bl	8015420 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	f003 0303 	and.w	r3, r3, #3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d006      	beq.n	800aa46 <mem_malloc+0x186>
 800aa38:	4b18      	ldr	r3, [pc, #96]	; (800aa9c <mem_malloc+0x1dc>)
 800aa3a:	f240 32bb 	movw	r2, #955	; 0x3bb
 800aa3e:	491d      	ldr	r1, [pc, #116]	; (800aab4 <mem_malloc+0x1f4>)
 800aa40:	4818      	ldr	r0, [pc, #96]	; (800aaa4 <mem_malloc+0x1e4>)
 800aa42:	f00a fced 	bl	8015420 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	f003 0303 	and.w	r3, r3, #3
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d006      	beq.n	800aa5e <mem_malloc+0x19e>
 800aa50:	4b12      	ldr	r3, [pc, #72]	; (800aa9c <mem_malloc+0x1dc>)
 800aa52:	f240 32bd 	movw	r2, #957	; 0x3bd
 800aa56:	4918      	ldr	r1, [pc, #96]	; (800aab8 <mem_malloc+0x1f8>)
 800aa58:	4812      	ldr	r0, [pc, #72]	; (800aaa4 <mem_malloc+0x1e4>)
 800aa5a:	f00a fce1 	bl	8015420 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	330c      	adds	r3, #12
 800aa62:	e010      	b.n	800aa86 <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800aa64:	69f8      	ldr	r0, [r7, #28]
 800aa66:	f7ff fc47 	bl	800a2f8 <ptr_to_mem>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <mem_malloc+0x1d0>)
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	69fa      	ldr	r2, [r7, #28]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	f4ff af48 	bcc.w	800a90e <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800aa7e:	4805      	ldr	r0, [pc, #20]	; (800aa94 <mem_malloc+0x1d4>)
 800aa80:	f009 febb 	bl	80147fa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3720      	adds	r7, #32
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	000186a0 	.word	0x000186a0
 800aa94:	2003d9c4 	.word	0x2003d9c4
 800aa98:	2003d9c8 	.word	0x2003d9c8
 800aa9c:	08016a6c 	.word	0x08016a6c
 800aaa0:	08016c30 	.word	0x08016c30
 800aaa4:	08016ab4 	.word	0x08016ab4
 800aaa8:	2003d9c0 	.word	0x2003d9c0
 800aaac:	08016c44 	.word	0x08016c44
 800aab0:	08016c60 	.word	0x08016c60
 800aab4:	08016c90 	.word	0x08016c90
 800aab8:	08016cc0 	.word	0x08016cc0

0800aabc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	3303      	adds	r3, #3
 800aad2:	f023 0303 	bic.w	r3, r3, #3
 800aad6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aad8:	2300      	movs	r3, #0
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	e011      	b.n	800ab02 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	4413      	add	r3, r2
 800aafa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	3301      	adds	r3, #1
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	885b      	ldrh	r3, [r3, #2]
 800ab06:	461a      	mov	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	dbe7      	blt.n	800aade <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ab0e:	bf00      	nop
 800ab10:	bf00      	nop
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ab22:	2300      	movs	r3, #0
 800ab24:	80fb      	strh	r3, [r7, #6]
 800ab26:	e009      	b.n	800ab3c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ab28:	88fb      	ldrh	r3, [r7, #6]
 800ab2a:	4a08      	ldr	r2, [pc, #32]	; (800ab4c <memp_init+0x30>)
 800ab2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7ff ffc3 	bl	800aabc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ab36:	88fb      	ldrh	r3, [r7, #6]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	80fb      	strh	r3, [r7, #6]
 800ab3c:	88fb      	ldrh	r3, [r7, #6]
 800ab3e:	2b0c      	cmp	r3, #12
 800ab40:	d9f2      	bls.n	800ab28 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ab42:	bf00      	nop
 800ab44:	bf00      	nop
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	08019610 	.word	0x08019610

0800ab50 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ab58:	f009 fe82 	bl	8014860 <sys_arch_protect>
 800ab5c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d015      	beq.n	800ab98 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	68ba      	ldr	r2, [r7, #8]
 800ab72:	6812      	ldr	r2, [r2, #0]
 800ab74:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	f003 0303 	and.w	r3, r3, #3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d006      	beq.n	800ab8e <do_memp_malloc_pool+0x3e>
 800ab80:	4b09      	ldr	r3, [pc, #36]	; (800aba8 <do_memp_malloc_pool+0x58>)
 800ab82:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ab86:	4909      	ldr	r1, [pc, #36]	; (800abac <do_memp_malloc_pool+0x5c>)
 800ab88:	4809      	ldr	r0, [pc, #36]	; (800abb0 <do_memp_malloc_pool+0x60>)
 800ab8a:	f00a fc49 	bl	8015420 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f009 fe74 	bl	801487c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	e003      	b.n	800aba0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f009 fe6f 	bl	801487c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	08016ce4 	.word	0x08016ce4
 800abac:	08016d14 	.word	0x08016d14
 800abb0:	08016d38 	.word	0x08016d38

0800abb4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d106      	bne.n	800abd0 <memp_malloc_pool+0x1c>
 800abc2:	4b0a      	ldr	r3, [pc, #40]	; (800abec <memp_malloc_pool+0x38>)
 800abc4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800abc8:	4909      	ldr	r1, [pc, #36]	; (800abf0 <memp_malloc_pool+0x3c>)
 800abca:	480a      	ldr	r0, [pc, #40]	; (800abf4 <memp_malloc_pool+0x40>)
 800abcc:	f00a fc28 	bl	8015420 <iprintf>
  if (desc == NULL) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <memp_malloc_pool+0x26>
    return NULL;
 800abd6:	2300      	movs	r3, #0
 800abd8:	e003      	b.n	800abe2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff ffb8 	bl	800ab50 <do_memp_malloc_pool>
 800abe0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	08016ce4 	.word	0x08016ce4
 800abf0:	08016d60 	.word	0x08016d60
 800abf4:	08016d38 	.word	0x08016d38

0800abf8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ac02:	79fb      	ldrb	r3, [r7, #7]
 800ac04:	2b0c      	cmp	r3, #12
 800ac06:	d908      	bls.n	800ac1a <memp_malloc+0x22>
 800ac08:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <memp_malloc+0x3c>)
 800ac0a:	f240 1257 	movw	r2, #343	; 0x157
 800ac0e:	490a      	ldr	r1, [pc, #40]	; (800ac38 <memp_malloc+0x40>)
 800ac10:	480a      	ldr	r0, [pc, #40]	; (800ac3c <memp_malloc+0x44>)
 800ac12:	f00a fc05 	bl	8015420 <iprintf>
 800ac16:	2300      	movs	r3, #0
 800ac18:	e008      	b.n	800ac2c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ac1a:	79fb      	ldrb	r3, [r7, #7]
 800ac1c:	4a08      	ldr	r2, [pc, #32]	; (800ac40 <memp_malloc+0x48>)
 800ac1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7ff ff94 	bl	800ab50 <do_memp_malloc_pool>
 800ac28:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	08016ce4 	.word	0x08016ce4
 800ac38:	08016d74 	.word	0x08016d74
 800ac3c:	08016d38 	.word	0x08016d38
 800ac40:	08019610 	.word	0x08019610

0800ac44 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	f003 0303 	and.w	r3, r3, #3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d006      	beq.n	800ac66 <do_memp_free_pool+0x22>
 800ac58:	4b0d      	ldr	r3, [pc, #52]	; (800ac90 <do_memp_free_pool+0x4c>)
 800ac5a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ac5e:	490d      	ldr	r1, [pc, #52]	; (800ac94 <do_memp_free_pool+0x50>)
 800ac60:	480d      	ldr	r0, [pc, #52]	; (800ac98 <do_memp_free_pool+0x54>)
 800ac62:	f00a fbdd 	bl	8015420 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ac6a:	f009 fdf9 	bl	8014860 <sys_arch_protect>
 800ac6e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ac82:	68b8      	ldr	r0, [r7, #8]
 800ac84:	f009 fdfa 	bl	801487c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ac88:	bf00      	nop
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	08016ce4 	.word	0x08016ce4
 800ac94:	08016d94 	.word	0x08016d94
 800ac98:	08016d38 	.word	0x08016d38

0800ac9c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d106      	bne.n	800acba <memp_free_pool+0x1e>
 800acac:	4b0a      	ldr	r3, [pc, #40]	; (800acd8 <memp_free_pool+0x3c>)
 800acae:	f240 1295 	movw	r2, #405	; 0x195
 800acb2:	490a      	ldr	r1, [pc, #40]	; (800acdc <memp_free_pool+0x40>)
 800acb4:	480a      	ldr	r0, [pc, #40]	; (800ace0 <memp_free_pool+0x44>)
 800acb6:	f00a fbb3 	bl	8015420 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d007      	beq.n	800acd0 <memp_free_pool+0x34>
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d004      	beq.n	800acd0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff ffbb 	bl	800ac44 <do_memp_free_pool>
 800acce:	e000      	b.n	800acd2 <memp_free_pool+0x36>
    return;
 800acd0:	bf00      	nop
}
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	08016ce4 	.word	0x08016ce4
 800acdc:	08016d60 	.word	0x08016d60
 800ace0:	08016d38 	.word	0x08016d38

0800ace4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	6039      	str	r1, [r7, #0]
 800acee:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	2b0c      	cmp	r3, #12
 800acf4:	d907      	bls.n	800ad06 <memp_free+0x22>
 800acf6:	4b0c      	ldr	r3, [pc, #48]	; (800ad28 <memp_free+0x44>)
 800acf8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800acfc:	490b      	ldr	r1, [pc, #44]	; (800ad2c <memp_free+0x48>)
 800acfe:	480c      	ldr	r0, [pc, #48]	; (800ad30 <memp_free+0x4c>)
 800ad00:	f00a fb8e 	bl	8015420 <iprintf>
 800ad04:	e00c      	b.n	800ad20 <memp_free+0x3c>

  if (mem == NULL) {
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d008      	beq.n	800ad1e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ad0c:	79fb      	ldrb	r3, [r7, #7]
 800ad0e:	4a09      	ldr	r2, [pc, #36]	; (800ad34 <memp_free+0x50>)
 800ad10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7ff ff94 	bl	800ac44 <do_memp_free_pool>
 800ad1c:	e000      	b.n	800ad20 <memp_free+0x3c>
    return;
 800ad1e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	08016ce4 	.word	0x08016ce4
 800ad2c:	08016db4 	.word	0x08016db4
 800ad30:	08016d38 	.word	0x08016d38
 800ad34:	08019610 	.word	0x08019610

0800ad38 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ad3c:	bf00      	nop
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
	...

0800ad48 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b086      	sub	sp, #24
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d108      	bne.n	800ad6e <netif_add+0x26>
 800ad5c:	4b57      	ldr	r3, [pc, #348]	; (800aebc <netif_add+0x174>)
 800ad5e:	f240 1227 	movw	r2, #295	; 0x127
 800ad62:	4957      	ldr	r1, [pc, #348]	; (800aec0 <netif_add+0x178>)
 800ad64:	4857      	ldr	r0, [pc, #348]	; (800aec4 <netif_add+0x17c>)
 800ad66:	f00a fb5b 	bl	8015420 <iprintf>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e0a2      	b.n	800aeb4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d108      	bne.n	800ad86 <netif_add+0x3e>
 800ad74:	4b51      	ldr	r3, [pc, #324]	; (800aebc <netif_add+0x174>)
 800ad76:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ad7a:	4953      	ldr	r1, [pc, #332]	; (800aec8 <netif_add+0x180>)
 800ad7c:	4851      	ldr	r0, [pc, #324]	; (800aec4 <netif_add+0x17c>)
 800ad7e:	f00a fb4f 	bl	8015420 <iprintf>
 800ad82:	2300      	movs	r3, #0
 800ad84:	e096      	b.n	800aeb4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ad8c:	4b4f      	ldr	r3, [pc, #316]	; (800aecc <netif_add+0x184>)
 800ad8e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ad96:	4b4d      	ldr	r3, [pc, #308]	; (800aecc <netif_add+0x184>)
 800ad98:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ada0:	4b4a      	ldr	r3, [pc, #296]	; (800aecc <netif_add+0x184>)
 800ada2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2200      	movs	r2, #0
 800adae:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2200      	movs	r2, #0
 800adb4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4a45      	ldr	r2, [pc, #276]	; (800aed0 <netif_add+0x188>)
 800adba:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2200      	movs	r2, #0
 800adc0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6a3a      	ldr	r2, [r7, #32]
 800add4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800add6:	4b3f      	ldr	r3, [pc, #252]	; (800aed4 <netif_add+0x18c>)
 800add8:	781a      	ldrb	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ade4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	68b9      	ldr	r1, [r7, #8]
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 f913 	bl	800b018 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	4798      	blx	r3
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <netif_add+0xba>
    return NULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	e058      	b.n	800aeb4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae08:	2bff      	cmp	r3, #255	; 0xff
 800ae0a:	d103      	bne.n	800ae14 <netif_add+0xcc>
        netif->num = 0;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae18:	4b2f      	ldr	r3, [pc, #188]	; (800aed8 <netif_add+0x190>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	617b      	str	r3, [r7, #20]
 800ae1e:	e02b      	b.n	800ae78 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d106      	bne.n	800ae36 <netif_add+0xee>
 800ae28:	4b24      	ldr	r3, [pc, #144]	; (800aebc <netif_add+0x174>)
 800ae2a:	f240 128b 	movw	r2, #395	; 0x18b
 800ae2e:	492b      	ldr	r1, [pc, #172]	; (800aedc <netif_add+0x194>)
 800ae30:	4824      	ldr	r0, [pc, #144]	; (800aec4 <netif_add+0x17c>)
 800ae32:	f00a faf5 	bl	8015420 <iprintf>
        num_netifs++;
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	2bff      	cmp	r3, #255	; 0xff
 800ae40:	dd06      	ble.n	800ae50 <netif_add+0x108>
 800ae42:	4b1e      	ldr	r3, [pc, #120]	; (800aebc <netif_add+0x174>)
 800ae44:	f240 128d 	movw	r2, #397	; 0x18d
 800ae48:	4925      	ldr	r1, [pc, #148]	; (800aee0 <netif_add+0x198>)
 800ae4a:	481e      	ldr	r0, [pc, #120]	; (800aec4 <netif_add+0x17c>)
 800ae4c:	f00a fae8 	bl	8015420 <iprintf>
        if (netif2->num == netif->num) {
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d108      	bne.n	800ae72 <netif_add+0x12a>
          netif->num++;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae66:	3301      	adds	r3, #1
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800ae70:	e005      	b.n	800ae7e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	617b      	str	r3, [r7, #20]
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1d0      	bne.n	800ae20 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1be      	bne.n	800ae02 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae8a:	2bfe      	cmp	r3, #254	; 0xfe
 800ae8c:	d103      	bne.n	800ae96 <netif_add+0x14e>
    netif_num = 0;
 800ae8e:	4b11      	ldr	r3, [pc, #68]	; (800aed4 <netif_add+0x18c>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	701a      	strb	r2, [r3, #0]
 800ae94:	e006      	b.n	800aea4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	b2da      	uxtb	r2, r3
 800aea0:	4b0c      	ldr	r3, [pc, #48]	; (800aed4 <netif_add+0x18c>)
 800aea2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aea4:	4b0c      	ldr	r3, [pc, #48]	; (800aed8 <netif_add+0x190>)
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aeac:	4a0a      	ldr	r2, [pc, #40]	; (800aed8 <netif_add+0x190>)
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	08016dd0 	.word	0x08016dd0
 800aec0:	08016e64 	.word	0x08016e64
 800aec4:	08016e20 	.word	0x08016e20
 800aec8:	08016e80 	.word	0x08016e80
 800aecc:	08019684 	.word	0x08019684
 800aed0:	0800b2f3 	.word	0x0800b2f3
 800aed4:	20040aa0 	.word	0x20040aa0
 800aed8:	20040a98 	.word	0x20040a98
 800aedc:	08016ea4 	.word	0x08016ea4
 800aee0:	08016eb8 	.word	0x08016eb8

0800aee4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b082      	sub	sp, #8
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f002 fc79 	bl	800d7e8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f007 f8c3 	bl	8012084 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
	...

0800af08 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d106      	bne.n	800af28 <netif_do_set_ipaddr+0x20>
 800af1a:	4b1d      	ldr	r3, [pc, #116]	; (800af90 <netif_do_set_ipaddr+0x88>)
 800af1c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800af20:	491c      	ldr	r1, [pc, #112]	; (800af94 <netif_do_set_ipaddr+0x8c>)
 800af22:	481d      	ldr	r0, [pc, #116]	; (800af98 <netif_do_set_ipaddr+0x90>)
 800af24:	f00a fa7c 	bl	8015420 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d106      	bne.n	800af3c <netif_do_set_ipaddr+0x34>
 800af2e:	4b18      	ldr	r3, [pc, #96]	; (800af90 <netif_do_set_ipaddr+0x88>)
 800af30:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800af34:	4917      	ldr	r1, [pc, #92]	; (800af94 <netif_do_set_ipaddr+0x8c>)
 800af36:	4818      	ldr	r0, [pc, #96]	; (800af98 <netif_do_set_ipaddr+0x90>)
 800af38:	f00a fa72 	bl	8015420 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	3304      	adds	r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	429a      	cmp	r2, r3
 800af48:	d01c      	beq.n	800af84 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	3304      	adds	r3, #4
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800af5a:	f107 0314 	add.w	r3, r7, #20
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff ffbf 	bl	800aee4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <netif_do_set_ipaddr+0x6a>
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	e000      	b.n	800af74 <netif_do_set_ipaddr+0x6c>
 800af72:	2300      	movs	r3, #0
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800af78:	2101      	movs	r1, #1
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 f8d2 	bl	800b124 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800af80:	2301      	movs	r3, #1
 800af82:	e000      	b.n	800af86 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	08016dd0 	.word	0x08016dd0
 800af94:	08016ee8 	.word	0x08016ee8
 800af98:	08016e20 	.word	0x08016e20

0800af9c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3308      	adds	r3, #8
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d00a      	beq.n	800afcc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <netif_do_set_netmask+0x26>
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	e000      	b.n	800afc4 <netif_do_set_netmask+0x28>
 800afc2:	2300      	movs	r3, #0
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800afc8:	2301      	movs	r3, #1
 800afca:	e000      	b.n	800afce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr

0800afda <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800afda:	b480      	push	{r7}
 800afdc:	b085      	sub	sp, #20
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	330c      	adds	r3, #12
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d00a      	beq.n	800b00a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <netif_do_set_gw+0x26>
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	e000      	b.n	800b002 <netif_do_set_gw+0x28>
 800b000:	2300      	movs	r3, #0
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b006:	2301      	movs	r3, #1
 800b008:	e000      	b.n	800b00c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b088      	sub	sp, #32
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b026:	2300      	movs	r3, #0
 800b028:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b02a:	2300      	movs	r3, #0
 800b02c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b034:	4b1c      	ldr	r3, [pc, #112]	; (800b0a8 <netif_set_addr+0x90>)
 800b036:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b03e:	4b1a      	ldr	r3, [pc, #104]	; (800b0a8 <netif_set_addr+0x90>)
 800b040:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b048:	4b17      	ldr	r3, [pc, #92]	; (800b0a8 <netif_set_addr+0x90>)
 800b04a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <netif_set_addr+0x42>
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <netif_set_addr+0x46>
 800b05a:	2301      	movs	r3, #1
 800b05c:	e000      	b.n	800b060 <netif_set_addr+0x48>
 800b05e:	2300      	movs	r3, #0
 800b060:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b068:	f107 0310 	add.w	r3, r7, #16
 800b06c:	461a      	mov	r2, r3
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7ff ff49 	bl	800af08 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b076:	69fa      	ldr	r2, [r7, #28]
 800b078:	6879      	ldr	r1, [r7, #4]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7ff ff8e 	bl	800af9c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7ff ffa8 	bl	800afda <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d106      	bne.n	800b09e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b090:	f107 0310 	add.w	r3, r7, #16
 800b094:	461a      	mov	r2, r3
 800b096:	68b9      	ldr	r1, [r7, #8]
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7ff ff35 	bl	800af08 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b09e:	bf00      	nop
 800b0a0:	3720      	adds	r7, #32
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	08019684 	.word	0x08019684

0800b0ac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b0b4:	4a04      	ldr	r2, [pc, #16]	; (800b0c8 <netif_set_default+0x1c>)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	20040a9c 	.word	0x20040a9c

0800b0cc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d107      	bne.n	800b0ea <netif_set_up+0x1e>
 800b0da:	4b0f      	ldr	r3, [pc, #60]	; (800b118 <netif_set_up+0x4c>)
 800b0dc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b0e0:	490e      	ldr	r1, [pc, #56]	; (800b11c <netif_set_up+0x50>)
 800b0e2:	480f      	ldr	r0, [pc, #60]	; (800b120 <netif_set_up+0x54>)
 800b0e4:	f00a f99c 	bl	8015420 <iprintf>
 800b0e8:	e013      	b.n	800b112 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0f0:	f003 0301 	and.w	r3, r3, #1
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10c      	bne.n	800b112 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b0fe:	f043 0301 	orr.w	r3, r3, #1
 800b102:	b2da      	uxtb	r2, r3
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b10a:	2103      	movs	r1, #3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f809 	bl	800b124 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	08016dd0 	.word	0x08016dd0
 800b11c:	08016f58 	.word	0x08016f58
 800b120:	08016e20 	.word	0x08016e20

0800b124 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d106      	bne.n	800b144 <netif_issue_reports+0x20>
 800b136:	4b18      	ldr	r3, [pc, #96]	; (800b198 <netif_issue_reports+0x74>)
 800b138:	f240 326d 	movw	r2, #877	; 0x36d
 800b13c:	4917      	ldr	r1, [pc, #92]	; (800b19c <netif_issue_reports+0x78>)
 800b13e:	4818      	ldr	r0, [pc, #96]	; (800b1a0 <netif_issue_reports+0x7c>)
 800b140:	f00a f96e 	bl	8015420 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b14a:	f003 0304 	and.w	r3, r3, #4
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d01e      	beq.n	800b190 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b158:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d017      	beq.n	800b190 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	d013      	beq.n	800b192 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3304      	adds	r3, #4
 800b16e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00e      	beq.n	800b192 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b17a:	f003 0308 	and.w	r3, r3, #8
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d007      	beq.n	800b192 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	3304      	adds	r3, #4
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f007 fee5 	bl	8012f58 <etharp_request>
 800b18e:	e000      	b.n	800b192 <netif_issue_reports+0x6e>
    return;
 800b190:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}
 800b198:	08016dd0 	.word	0x08016dd0
 800b19c:	08016f74 	.word	0x08016f74
 800b1a0:	08016e20 	.word	0x08016e20

0800b1a4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d107      	bne.n	800b1c2 <netif_set_down+0x1e>
 800b1b2:	4b12      	ldr	r3, [pc, #72]	; (800b1fc <netif_set_down+0x58>)
 800b1b4:	f240 329b 	movw	r2, #923	; 0x39b
 800b1b8:	4911      	ldr	r1, [pc, #68]	; (800b200 <netif_set_down+0x5c>)
 800b1ba:	4812      	ldr	r0, [pc, #72]	; (800b204 <netif_set_down+0x60>)
 800b1bc:	f00a f930 	bl	8015420 <iprintf>
 800b1c0:	e019      	b.n	800b1f6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d012      	beq.n	800b1f6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1d6:	f023 0301 	bic.w	r3, r3, #1
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b1e8:	f003 0308 	and.w	r3, r3, #8
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f007 fa6f 	bl	80126d4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	08016dd0 	.word	0x08016dd0
 800b200:	08016f98 	.word	0x08016f98
 800b204:	08016e20 	.word	0x08016e20

0800b208 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d107      	bne.n	800b226 <netif_set_link_up+0x1e>
 800b216:	4b13      	ldr	r3, [pc, #76]	; (800b264 <netif_set_link_up+0x5c>)
 800b218:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b21c:	4912      	ldr	r1, [pc, #72]	; (800b268 <netif_set_link_up+0x60>)
 800b21e:	4813      	ldr	r0, [pc, #76]	; (800b26c <netif_set_link_up+0x64>)
 800b220:	f00a f8fe 	bl	8015420 <iprintf>
 800b224:	e01b      	b.n	800b25e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b22c:	f003 0304 	and.w	r3, r3, #4
 800b230:	2b00      	cmp	r3, #0
 800b232:	d114      	bne.n	800b25e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b23a:	f043 0304 	orr.w	r3, r3, #4
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b246:	2103      	movs	r1, #3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff ff6b 	bl	800b124 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	69db      	ldr	r3, [r3, #28]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d003      	beq.n	800b25e <netif_set_link_up+0x56>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	08016dd0 	.word	0x08016dd0
 800b268:	08016fb8 	.word	0x08016fb8
 800b26c:	08016e20 	.word	0x08016e20

0800b270 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d107      	bne.n	800b28e <netif_set_link_down+0x1e>
 800b27e:	4b11      	ldr	r3, [pc, #68]	; (800b2c4 <netif_set_link_down+0x54>)
 800b280:	f240 4206 	movw	r2, #1030	; 0x406
 800b284:	4910      	ldr	r1, [pc, #64]	; (800b2c8 <netif_set_link_down+0x58>)
 800b286:	4811      	ldr	r0, [pc, #68]	; (800b2cc <netif_set_link_down+0x5c>)
 800b288:	f00a f8ca 	bl	8015420 <iprintf>
 800b28c:	e017      	b.n	800b2be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b294:	f003 0304 	and.w	r3, r3, #4
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d010      	beq.n	800b2be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2a2:	f023 0304 	bic.w	r3, r3, #4
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	69db      	ldr	r3, [r3, #28]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <netif_set_link_down+0x4e>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	08016dd0 	.word	0x08016dd0
 800b2c8:	08016fdc 	.word	0x08016fdc
 800b2cc:	08016e20 	.word	0x08016e20

0800b2d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	61da      	str	r2, [r3, #28]
  }
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b085      	sub	sp, #20
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	60f8      	str	r0, [r7, #12]
 800b2fa:	60b9      	str	r1, [r7, #8]
 800b2fc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b2fe:	f06f 030b 	mvn.w	r3, #11
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
	...

0800b310 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b31a:	79fb      	ldrb	r3, [r7, #7]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d013      	beq.n	800b348 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b320:	4b0d      	ldr	r3, [pc, #52]	; (800b358 <netif_get_by_index+0x48>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	e00c      	b.n	800b342 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b32e:	3301      	adds	r3, #1
 800b330:	b2db      	uxtb	r3, r3
 800b332:	79fa      	ldrb	r2, [r7, #7]
 800b334:	429a      	cmp	r2, r3
 800b336:	d101      	bne.n	800b33c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	e006      	b.n	800b34a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	60fb      	str	r3, [r7, #12]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1ef      	bne.n	800b328 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	20040a98 	.word	0x20040a98

0800b35c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b362:	f009 fa7d 	bl	8014860 <sys_arch_protect>
 800b366:	6038      	str	r0, [r7, #0]
 800b368:	4b0d      	ldr	r3, [pc, #52]	; (800b3a0 <pbuf_free_ooseq+0x44>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	701a      	strb	r2, [r3, #0]
 800b36e:	6838      	ldr	r0, [r7, #0]
 800b370:	f009 fa84 	bl	801487c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b374:	4b0b      	ldr	r3, [pc, #44]	; (800b3a4 <pbuf_free_ooseq+0x48>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	607b      	str	r3, [r7, #4]
 800b37a:	e00a      	b.n	800b392 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b380:	2b00      	cmp	r3, #0
 800b382:	d003      	beq.n	800b38c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f002 fa6d 	bl	800d864 <tcp_free_ooseq>
      return;
 800b38a:	e005      	b.n	800b398 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	607b      	str	r3, [r7, #4]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1f1      	bne.n	800b37c <pbuf_free_ooseq+0x20>
    }
  }
}
 800b398:	3708      	adds	r7, #8
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	20040aa1 	.word	0x20040aa1
 800b3a4:	20040ab0 	.word	0x20040ab0

0800b3a8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b3b0:	f7ff ffd4 	bl	800b35c <pbuf_free_ooseq>
}
 800b3b4:	bf00      	nop
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b3c2:	f009 fa4d 	bl	8014860 <sys_arch_protect>
 800b3c6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b3c8:	4b0f      	ldr	r3, [pc, #60]	; (800b408 <pbuf_pool_is_empty+0x4c>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b3ce:	4b0e      	ldr	r3, [pc, #56]	; (800b408 <pbuf_pool_is_empty+0x4c>)
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f009 fa51 	bl	801487c <sys_arch_unprotect>

  if (!queued) {
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10f      	bne.n	800b400 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	480a      	ldr	r0, [pc, #40]	; (800b40c <pbuf_pool_is_empty+0x50>)
 800b3e4:	f7fe fb34 	bl	8009a50 <tcpip_try_callback>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d008      	beq.n	800b400 <pbuf_pool_is_empty+0x44>
 800b3ee:	f009 fa37 	bl	8014860 <sys_arch_protect>
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	4b04      	ldr	r3, [pc, #16]	; (800b408 <pbuf_pool_is_empty+0x4c>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	701a      	strb	r2, [r3, #0]
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f009 fa3e 	bl	801487c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	20040aa1 	.word	0x20040aa1
 800b40c:	0800b3a9 	.word	0x0800b3a9

0800b410 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	4611      	mov	r1, r2
 800b41c:	461a      	mov	r2, r3
 800b41e:	460b      	mov	r3, r1
 800b420:	80fb      	strh	r3, [r7, #6]
 800b422:	4613      	mov	r3, r2
 800b424:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	88fa      	ldrh	r2, [r7, #6]
 800b436:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	88ba      	ldrh	r2, [r7, #4]
 800b43c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b43e:	8b3b      	ldrh	r3, [r7, #24]
 800b440:	b2da      	uxtb	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	7f3a      	ldrb	r2, [r7, #28]
 800b44a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2201      	movs	r2, #1
 800b450:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	73da      	strb	r2, [r3, #15]
}
 800b458:	bf00      	nop
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08c      	sub	sp, #48	; 0x30
 800b468:	af02      	add	r7, sp, #8
 800b46a:	4603      	mov	r3, r0
 800b46c:	71fb      	strb	r3, [r7, #7]
 800b46e:	460b      	mov	r3, r1
 800b470:	80bb      	strh	r3, [r7, #4]
 800b472:	4613      	mov	r3, r2
 800b474:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b476:	79fb      	ldrb	r3, [r7, #7]
 800b478:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b47a:	887b      	ldrh	r3, [r7, #2]
 800b47c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b480:	d07f      	beq.n	800b582 <pbuf_alloc+0x11e>
 800b482:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b486:	f300 80c7 	bgt.w	800b618 <pbuf_alloc+0x1b4>
 800b48a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b48e:	d010      	beq.n	800b4b2 <pbuf_alloc+0x4e>
 800b490:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b494:	f300 80c0 	bgt.w	800b618 <pbuf_alloc+0x1b4>
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d002      	beq.n	800b4a2 <pbuf_alloc+0x3e>
 800b49c:	2b41      	cmp	r3, #65	; 0x41
 800b49e:	f040 80bb 	bne.w	800b618 <pbuf_alloc+0x1b4>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b4a2:	887a      	ldrh	r2, [r7, #2]
 800b4a4:	88bb      	ldrh	r3, [r7, #4]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	f000 f8d1 	bl	800b650 <pbuf_alloc_reference>
 800b4ae:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b4b0:	e0bc      	b.n	800b62c <pbuf_alloc+0x1c8>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b4ba:	88bb      	ldrh	r3, [r7, #4]
 800b4bc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b4be:	200c      	movs	r0, #12
 800b4c0:	f7ff fb9a 	bl	800abf8 <memp_malloc>
 800b4c4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d109      	bne.n	800b4e0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b4cc:	f7ff ff76 	bl	800b3bc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d002      	beq.n	800b4dc <pbuf_alloc+0x78>
            pbuf_free(p);
 800b4d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4d8:	f000 faa6 	bl	800ba28 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	e0a6      	b.n	800b62e <pbuf_alloc+0x1ca>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b4e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4e2:	3303      	adds	r3, #3
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	f023 0303 	bic.w	r3, r3, #3
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	8b7a      	ldrh	r2, [r7, #26]
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	bf28      	it	cs
 800b4f8:	4613      	movcs	r3, r2
 800b4fa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b4fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4fe:	3310      	adds	r3, #16
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	4413      	add	r3, r2
 800b504:	3303      	adds	r3, #3
 800b506:	f023 0303 	bic.w	r3, r3, #3
 800b50a:	4618      	mov	r0, r3
 800b50c:	89f9      	ldrh	r1, [r7, #14]
 800b50e:	8b7a      	ldrh	r2, [r7, #26]
 800b510:	2300      	movs	r3, #0
 800b512:	9301      	str	r3, [sp, #4]
 800b514:	887b      	ldrh	r3, [r7, #2]
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	460b      	mov	r3, r1
 800b51a:	4601      	mov	r1, r0
 800b51c:	6938      	ldr	r0, [r7, #16]
 800b51e:	f7ff ff77 	bl	800b410 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f003 0303 	and.w	r3, r3, #3
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d006      	beq.n	800b53c <pbuf_alloc+0xd8>
 800b52e:	4b42      	ldr	r3, [pc, #264]	; (800b638 <pbuf_alloc+0x1d4>)
 800b530:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b534:	4941      	ldr	r1, [pc, #260]	; (800b63c <pbuf_alloc+0x1d8>)
 800b536:	4842      	ldr	r0, [pc, #264]	; (800b640 <pbuf_alloc+0x1dc>)
 800b538:	f009 ff72 	bl	8015420 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b53c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b53e:	3303      	adds	r3, #3
 800b540:	f023 0303 	bic.w	r3, r3, #3
 800b544:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b548:	d106      	bne.n	800b558 <pbuf_alloc+0xf4>
 800b54a:	4b3b      	ldr	r3, [pc, #236]	; (800b638 <pbuf_alloc+0x1d4>)
 800b54c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b550:	493c      	ldr	r1, [pc, #240]	; (800b644 <pbuf_alloc+0x1e0>)
 800b552:	483b      	ldr	r0, [pc, #236]	; (800b640 <pbuf_alloc+0x1dc>)
 800b554:	f009 ff64 	bl	8015420 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d102      	bne.n	800b564 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	627b      	str	r3, [r7, #36]	; 0x24
 800b562:	e002      	b.n	800b56a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b56e:	8b7a      	ldrh	r2, [r7, #26]
 800b570:	89fb      	ldrh	r3, [r7, #14]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b57a:	8b7b      	ldrh	r3, [r7, #26]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d19e      	bne.n	800b4be <pbuf_alloc+0x5a>
      break;
 800b580:	e054      	b.n	800b62c <pbuf_alloc+0x1c8>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b582:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b584:	3303      	adds	r3, #3
 800b586:	b29b      	uxth	r3, r3
 800b588:	f023 0303 	bic.w	r3, r3, #3
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	88bb      	ldrh	r3, [r7, #4]
 800b590:	3303      	adds	r3, #3
 800b592:	b29b      	uxth	r3, r3
 800b594:	f023 0303 	bic.w	r3, r3, #3
 800b598:	b29b      	uxth	r3, r3
 800b59a:	4413      	add	r3, r2
 800b59c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b59e:	8b3b      	ldrh	r3, [r7, #24]
 800b5a0:	3310      	adds	r3, #16
 800b5a2:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b5a4:	8b3a      	ldrh	r2, [r7, #24]
 800b5a6:	88bb      	ldrh	r3, [r7, #4]
 800b5a8:	3303      	adds	r3, #3
 800b5aa:	f023 0303 	bic.w	r3, r3, #3
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d306      	bcc.n	800b5c0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b5b2:	88bb      	ldrh	r3, [r7, #4]
 800b5b4:	3303      	adds	r3, #3
 800b5b6:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b5ba:	697a      	ldr	r2, [r7, #20]
 800b5bc:	429a      	cmp	r2, r3
 800b5be:	d201      	bcs.n	800b5c4 <pbuf_alloc+0x160>
        return NULL;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	e034      	b.n	800b62e <pbuf_alloc+0x1ca>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b5c4:	6978      	ldr	r0, [r7, #20]
 800b5c6:	f7ff f97b 	bl	800a8c0 <mem_malloc>
 800b5ca:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d101      	bne.n	800b5d6 <pbuf_alloc+0x172>
        return NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e02b      	b.n	800b62e <pbuf_alloc+0x1ca>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b5d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5d8:	3310      	adds	r3, #16
 800b5da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5dc:	4413      	add	r3, r2
 800b5de:	3303      	adds	r3, #3
 800b5e0:	f023 0303 	bic.w	r3, r3, #3
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	88b9      	ldrh	r1, [r7, #4]
 800b5e8:	88ba      	ldrh	r2, [r7, #4]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9301      	str	r3, [sp, #4]
 800b5ee:	887b      	ldrh	r3, [r7, #2]
 800b5f0:	9300      	str	r3, [sp, #0]
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5f8:	f7ff ff0a 	bl	800b410 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d010      	beq.n	800b62a <pbuf_alloc+0x1c6>
 800b608:	4b0b      	ldr	r3, [pc, #44]	; (800b638 <pbuf_alloc+0x1d4>)
 800b60a:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b60e:	490e      	ldr	r1, [pc, #56]	; (800b648 <pbuf_alloc+0x1e4>)
 800b610:	480b      	ldr	r0, [pc, #44]	; (800b640 <pbuf_alloc+0x1dc>)
 800b612:	f009 ff05 	bl	8015420 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b616:	e008      	b.n	800b62a <pbuf_alloc+0x1c6>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b618:	4b07      	ldr	r3, [pc, #28]	; (800b638 <pbuf_alloc+0x1d4>)
 800b61a:	f240 1227 	movw	r2, #295	; 0x127
 800b61e:	490b      	ldr	r1, [pc, #44]	; (800b64c <pbuf_alloc+0x1e8>)
 800b620:	4807      	ldr	r0, [pc, #28]	; (800b640 <pbuf_alloc+0x1dc>)
 800b622:	f009 fefd 	bl	8015420 <iprintf>
      return NULL;
 800b626:	2300      	movs	r3, #0
 800b628:	e001      	b.n	800b62e <pbuf_alloc+0x1ca>
      break;
 800b62a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3728      	adds	r7, #40	; 0x28
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	08017000 	.word	0x08017000
 800b63c:	08017030 	.word	0x08017030
 800b640:	08017060 	.word	0x08017060
 800b644:	08017088 	.word	0x08017088
 800b648:	080170bc 	.word	0x080170bc
 800b64c:	080170e8 	.word	0x080170e8

0800b650 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b086      	sub	sp, #24
 800b654:	af02      	add	r7, sp, #8
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	807b      	strh	r3, [r7, #2]
 800b65c:	4613      	mov	r3, r2
 800b65e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b660:	883b      	ldrh	r3, [r7, #0]
 800b662:	2b41      	cmp	r3, #65	; 0x41
 800b664:	d009      	beq.n	800b67a <pbuf_alloc_reference+0x2a>
 800b666:	883b      	ldrh	r3, [r7, #0]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d006      	beq.n	800b67a <pbuf_alloc_reference+0x2a>
 800b66c:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <pbuf_alloc_reference+0x5c>)
 800b66e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b672:	490f      	ldr	r1, [pc, #60]	; (800b6b0 <pbuf_alloc_reference+0x60>)
 800b674:	480f      	ldr	r0, [pc, #60]	; (800b6b4 <pbuf_alloc_reference+0x64>)
 800b676:	f009 fed3 	bl	8015420 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b67a:	200b      	movs	r0, #11
 800b67c:	f7ff fabc 	bl	800abf8 <memp_malloc>
 800b680:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d101      	bne.n	800b68c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b688:	2300      	movs	r3, #0
 800b68a:	e00b      	b.n	800b6a4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b68c:	8879      	ldrh	r1, [r7, #2]
 800b68e:	887a      	ldrh	r2, [r7, #2]
 800b690:	2300      	movs	r3, #0
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	883b      	ldrh	r3, [r7, #0]
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	460b      	mov	r3, r1
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f7ff feb7 	bl	800b410 <pbuf_init_alloced_pbuf>
  return p;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	08017000 	.word	0x08017000
 800b6b0:	08017104 	.word	0x08017104
 800b6b4:	08017060 	.word	0x08017060

0800b6b8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af02      	add	r7, sp, #8
 800b6be:	607b      	str	r3, [r7, #4]
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	73fb      	strb	r3, [r7, #15]
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	81bb      	strh	r3, [r7, #12]
 800b6c8:	4613      	mov	r3, r2
 800b6ca:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b6d0:	8a7b      	ldrh	r3, [r7, #18]
 800b6d2:	3303      	adds	r3, #3
 800b6d4:	f023 0203 	bic.w	r2, r3, #3
 800b6d8:	89bb      	ldrh	r3, [r7, #12]
 800b6da:	441a      	add	r2, r3
 800b6dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d901      	bls.n	800b6e6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	e018      	b.n	800b718 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b6e6:	6a3b      	ldr	r3, [r7, #32]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d007      	beq.n	800b6fc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b6ec:	8a7b      	ldrh	r3, [r7, #18]
 800b6ee:	3303      	adds	r3, #3
 800b6f0:	f023 0303 	bic.w	r3, r3, #3
 800b6f4:	6a3a      	ldr	r2, [r7, #32]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	e001      	b.n	800b700 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	89b9      	ldrh	r1, [r7, #12]
 800b704:	89ba      	ldrh	r2, [r7, #12]
 800b706:	2302      	movs	r3, #2
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	897b      	ldrh	r3, [r7, #10]
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	460b      	mov	r3, r1
 800b710:	6979      	ldr	r1, [r7, #20]
 800b712:	f7ff fe7d 	bl	800b410 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b716:	687b      	ldr	r3, [r7, #4]
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	460b      	mov	r3, r1
 800b72a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <pbuf_realloc+0x20>
 800b732:	4b39      	ldr	r3, [pc, #228]	; (800b818 <pbuf_realloc+0xf8>)
 800b734:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b738:	4938      	ldr	r1, [pc, #224]	; (800b81c <pbuf_realloc+0xfc>)
 800b73a:	4839      	ldr	r0, [pc, #228]	; (800b820 <pbuf_realloc+0x100>)
 800b73c:	f009 fe70 	bl	8015420 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	891b      	ldrh	r3, [r3, #8]
 800b744:	887a      	ldrh	r2, [r7, #2]
 800b746:	429a      	cmp	r2, r3
 800b748:	d261      	bcs.n	800b80e <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	891a      	ldrh	r2, [r3, #8]
 800b74e:	887b      	ldrh	r3, [r7, #2]
 800b750:	1ad3      	subs	r3, r2, r3
 800b752:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b754:	887b      	ldrh	r3, [r7, #2]
 800b756:	817b      	strh	r3, [r7, #10]
  q = p;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b75c:	e018      	b.n	800b790 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	895b      	ldrh	r3, [r3, #10]
 800b762:	897a      	ldrh	r2, [r7, #10]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	891a      	ldrh	r2, [r3, #8]
 800b76c:	893b      	ldrh	r3, [r7, #8]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	b29a      	uxth	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d106      	bne.n	800b790 <pbuf_realloc+0x70>
 800b782:	4b25      	ldr	r3, [pc, #148]	; (800b818 <pbuf_realloc+0xf8>)
 800b784:	f240 12af 	movw	r2, #431	; 0x1af
 800b788:	4926      	ldr	r1, [pc, #152]	; (800b824 <pbuf_realloc+0x104>)
 800b78a:	4825      	ldr	r0, [pc, #148]	; (800b820 <pbuf_realloc+0x100>)
 800b78c:	f009 fe48 	bl	8015420 <iprintf>
  while (rem_len > q->len) {
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	895b      	ldrh	r3, [r3, #10]
 800b794:	897a      	ldrh	r2, [r7, #10]
 800b796:	429a      	cmp	r2, r3
 800b798:	d8e1      	bhi.n	800b75e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	7b1b      	ldrb	r3, [r3, #12]
 800b79e:	f003 030f 	and.w	r3, r3, #15
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d11f      	bne.n	800b7e6 <pbuf_realloc+0xc6>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	895b      	ldrh	r3, [r3, #10]
 800b7aa:	897a      	ldrh	r2, [r7, #10]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d01a      	beq.n	800b7e6 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	7b5b      	ldrb	r3, [r3, #13]
 800b7b4:	f003 0302 	and.w	r3, r3, #2
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d114      	bne.n	800b7e6 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	685a      	ldr	r2, [r3, #4]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	1ad2      	subs	r2, r2, r3
 800b7c4:	897b      	ldrh	r3, [r7, #10]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7fe ff76 	bl	800a6bc <mem_trim>
 800b7d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d106      	bne.n	800b7e6 <pbuf_realloc+0xc6>
 800b7d8:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <pbuf_realloc+0xf8>)
 800b7da:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b7de:	4912      	ldr	r1, [pc, #72]	; (800b828 <pbuf_realloc+0x108>)
 800b7e0:	480f      	ldr	r0, [pc, #60]	; (800b820 <pbuf_realloc+0x100>)
 800b7e2:	f009 fe1d 	bl	8015420 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	897a      	ldrh	r2, [r7, #10]
 800b7ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	895a      	ldrh	r2, [r3, #10]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d004      	beq.n	800b806 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4618      	mov	r0, r3
 800b802:	f000 f911 	bl	800ba28 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	e000      	b.n	800b810 <pbuf_realloc+0xf0>
    return;
 800b80e:	bf00      	nop

}
 800b810:	3710      	adds	r7, #16
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	08017000 	.word	0x08017000
 800b81c:	08017118 	.word	0x08017118
 800b820:	08017060 	.word	0x08017060
 800b824:	08017130 	.word	0x08017130
 800b828:	08017148 	.word	0x08017148

0800b82c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	4613      	mov	r3, r2
 800b838:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <pbuf_add_header_impl+0x22>
 800b840:	4b2b      	ldr	r3, [pc, #172]	; (800b8f0 <pbuf_add_header_impl+0xc4>)
 800b842:	f240 12df 	movw	r2, #479	; 0x1df
 800b846:	492b      	ldr	r1, [pc, #172]	; (800b8f4 <pbuf_add_header_impl+0xc8>)
 800b848:	482b      	ldr	r0, [pc, #172]	; (800b8f8 <pbuf_add_header_impl+0xcc>)
 800b84a:	f009 fde9 	bl	8015420 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <pbuf_add_header_impl+0x30>
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b85a:	d301      	bcc.n	800b860 <pbuf_add_header_impl+0x34>
    return 1;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e043      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <pbuf_add_header_impl+0x3e>
    return 0;
 800b866:	2300      	movs	r3, #0
 800b868:	e03e      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	891a      	ldrh	r2, [r3, #8]
 800b872:	8a7b      	ldrh	r3, [r7, #18]
 800b874:	4413      	add	r3, r2
 800b876:	b29b      	uxth	r3, r3
 800b878:	8a7a      	ldrh	r2, [r7, #18]
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d901      	bls.n	800b882 <pbuf_add_header_impl+0x56>
    return 1;
 800b87e:	2301      	movs	r3, #1
 800b880:	e032      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	7b1b      	ldrb	r3, [r3, #12]
 800b886:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b888:	8a3b      	ldrh	r3, [r7, #16]
 800b88a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00c      	beq.n	800b8ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	425b      	negs	r3, r3
 800b89a:	4413      	add	r3, r2
 800b89c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3310      	adds	r3, #16
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d20d      	bcs.n	800b8c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e01d      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b8ac:	79fb      	ldrb	r3, [r7, #7]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d006      	beq.n	800b8c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	685a      	ldr	r2, [r3, #4]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	425b      	negs	r3, r3
 800b8ba:	4413      	add	r3, r2
 800b8bc:	617b      	str	r3, [r7, #20]
 800b8be:	e001      	b.n	800b8c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e011      	b.n	800b8e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	895a      	ldrh	r2, [r3, #10]
 800b8ce:	8a7b      	ldrh	r3, [r7, #18]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	891a      	ldrh	r2, [r3, #8]
 800b8dc:	8a7b      	ldrh	r3, [r7, #18]
 800b8de:	4413      	add	r3, r2
 800b8e0:	b29a      	uxth	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3718      	adds	r7, #24
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	08017000 	.word	0x08017000
 800b8f4:	08017164 	.word	0x08017164
 800b8f8:	08017060 	.word	0x08017060

0800b8fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b906:	2200      	movs	r2, #0
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f7ff ff8e 	bl	800b82c <pbuf_add_header_impl>
 800b910:	4603      	mov	r3, r0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
	...

0800b91c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <pbuf_remove_header+0x1e>
 800b92c:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <pbuf_remove_header+0x94>)
 800b92e:	f240 224b 	movw	r2, #587	; 0x24b
 800b932:	4920      	ldr	r1, [pc, #128]	; (800b9b4 <pbuf_remove_header+0x98>)
 800b934:	4820      	ldr	r0, [pc, #128]	; (800b9b8 <pbuf_remove_header+0x9c>)
 800b936:	f009 fd73 	bl	8015420 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d003      	beq.n	800b948 <pbuf_remove_header+0x2c>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b946:	d301      	bcc.n	800b94c <pbuf_remove_header+0x30>
    return 1;
 800b948:	2301      	movs	r3, #1
 800b94a:	e02c      	b.n	800b9a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <pbuf_remove_header+0x3a>
    return 0;
 800b952:	2300      	movs	r3, #0
 800b954:	e027      	b.n	800b9a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	895b      	ldrh	r3, [r3, #10]
 800b95e:	89fa      	ldrh	r2, [r7, #14]
 800b960:	429a      	cmp	r2, r3
 800b962:	d908      	bls.n	800b976 <pbuf_remove_header+0x5a>
 800b964:	4b12      	ldr	r3, [pc, #72]	; (800b9b0 <pbuf_remove_header+0x94>)
 800b966:	f240 2255 	movw	r2, #597	; 0x255
 800b96a:	4914      	ldr	r1, [pc, #80]	; (800b9bc <pbuf_remove_header+0xa0>)
 800b96c:	4812      	ldr	r0, [pc, #72]	; (800b9b8 <pbuf_remove_header+0x9c>)
 800b96e:	f009 fd57 	bl	8015420 <iprintf>
 800b972:	2301      	movs	r3, #1
 800b974:	e017      	b.n	800b9a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	441a      	add	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	895a      	ldrh	r2, [r3, #10]
 800b98c:	89fb      	ldrh	r3, [r7, #14]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	b29a      	uxth	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	891a      	ldrh	r2, [r3, #8]
 800b99a:	89fb      	ldrh	r3, [r7, #14]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	b29a      	uxth	r2, r3
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	08017000 	.word	0x08017000
 800b9b4:	08017164 	.word	0x08017164
 800b9b8:	08017060 	.word	0x08017060
 800b9bc:	08017170 	.word	0x08017170

0800b9c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	807b      	strh	r3, [r7, #2]
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b9d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	da08      	bge.n	800b9ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b9d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9dc:	425b      	negs	r3, r3
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff ff9b 	bl	800b91c <pbuf_remove_header>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	e007      	b.n	800b9fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b9ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b9ee:	787a      	ldrb	r2, [r7, #1]
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f7ff ff1a 	bl	800b82c <pbuf_add_header_impl>
 800b9f8:	4603      	mov	r3, r0
  }
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}

0800ba02 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ba02:	b580      	push	{r7, lr}
 800ba04:	b082      	sub	sp, #8
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	6078      	str	r0, [r7, #4]
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ba0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ba12:	2201      	movs	r2, #1
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7ff ffd2 	bl	800b9c0 <pbuf_header_impl>
 800ba1c:	4603      	mov	r3, r0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d106      	bne.n	800ba4a <pbuf_free+0x22>
 800ba3c:	4b3b      	ldr	r3, [pc, #236]	; (800bb2c <pbuf_free+0x104>)
 800ba3e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ba42:	493b      	ldr	r1, [pc, #236]	; (800bb30 <pbuf_free+0x108>)
 800ba44:	483b      	ldr	r0, [pc, #236]	; (800bb34 <pbuf_free+0x10c>)
 800ba46:	f009 fceb 	bl	8015420 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e069      	b.n	800bb22 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ba52:	e062      	b.n	800bb1a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ba54:	f008 ff04 	bl	8014860 <sys_arch_protect>
 800ba58:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	7b9b      	ldrb	r3, [r3, #14]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d106      	bne.n	800ba70 <pbuf_free+0x48>
 800ba62:	4b32      	ldr	r3, [pc, #200]	; (800bb2c <pbuf_free+0x104>)
 800ba64:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ba68:	4933      	ldr	r1, [pc, #204]	; (800bb38 <pbuf_free+0x110>)
 800ba6a:	4832      	ldr	r0, [pc, #200]	; (800bb34 <pbuf_free+0x10c>)
 800ba6c:	f009 fcd8 	bl	8015420 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	7b9b      	ldrb	r3, [r3, #14]
 800ba74:	3b01      	subs	r3, #1
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	739a      	strb	r2, [r3, #14]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	7b9b      	ldrb	r3, [r3, #14]
 800ba80:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ba82:	69b8      	ldr	r0, [r7, #24]
 800ba84:	f008 fefa 	bl	801487c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ba88:	7dfb      	ldrb	r3, [r7, #23]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d143      	bne.n	800bb16 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	7b1b      	ldrb	r3, [r3, #12]
 800ba98:	f003 030f 	and.w	r3, r3, #15
 800ba9c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	7b5b      	ldrb	r3, [r3, #13]
 800baa2:	f003 0302 	and.w	r3, r3, #2
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d011      	beq.n	800bace <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d106      	bne.n	800bac4 <pbuf_free+0x9c>
 800bab6:	4b1d      	ldr	r3, [pc, #116]	; (800bb2c <pbuf_free+0x104>)
 800bab8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800babc:	491f      	ldr	r1, [pc, #124]	; (800bb3c <pbuf_free+0x114>)
 800babe:	481d      	ldr	r0, [pc, #116]	; (800bb34 <pbuf_free+0x10c>)
 800bac0:	f009 fcae 	bl	8015420 <iprintf>
        pc->custom_free_function(p);
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	4798      	blx	r3
 800bacc:	e01d      	b.n	800bb0a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d104      	bne.n	800bade <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bad4:	6879      	ldr	r1, [r7, #4]
 800bad6:	200c      	movs	r0, #12
 800bad8:	f7ff f904 	bl	800ace4 <memp_free>
 800badc:	e015      	b.n	800bb0a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bade:	7bfb      	ldrb	r3, [r7, #15]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d104      	bne.n	800baee <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bae4:	6879      	ldr	r1, [r7, #4]
 800bae6:	200b      	movs	r0, #11
 800bae8:	f7ff f8fc 	bl	800ace4 <memp_free>
 800baec:	e00d      	b.n	800bb0a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800baee:	7bfb      	ldrb	r3, [r7, #15]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d103      	bne.n	800bafc <pbuf_free+0xd4>
          mem_free(p);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7fe fd51 	bl	800a59c <mem_free>
 800bafa:	e006      	b.n	800bb0a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bafc:	4b0b      	ldr	r3, [pc, #44]	; (800bb2c <pbuf_free+0x104>)
 800bafe:	f240 320f 	movw	r2, #783	; 0x30f
 800bb02:	490f      	ldr	r1, [pc, #60]	; (800bb40 <pbuf_free+0x118>)
 800bb04:	480b      	ldr	r0, [pc, #44]	; (800bb34 <pbuf_free+0x10c>)
 800bb06:	f009 fc8b 	bl	8015420 <iprintf>
        }
      }
      count++;
 800bb0a:	7ffb      	ldrb	r3, [r7, #31]
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	607b      	str	r3, [r7, #4]
 800bb14:	e001      	b.n	800bb1a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bb16:	2300      	movs	r3, #0
 800bb18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d199      	bne.n	800ba54 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bb20:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3720      	adds	r7, #32
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	08017000 	.word	0x08017000
 800bb30:	08017164 	.word	0x08017164
 800bb34:	08017060 	.word	0x08017060
 800bb38:	08017190 	.word	0x08017190
 800bb3c:	080171a8 	.word	0x080171a8
 800bb40:	080171cc 	.word	0x080171cc

0800bb44 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bb50:	e005      	b.n	800bb5e <pbuf_clen+0x1a>
    ++len;
 800bb52:	89fb      	ldrh	r3, [r7, #14]
 800bb54:	3301      	adds	r3, #1
 800bb56:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1f6      	bne.n	800bb52 <pbuf_clen+0xe>
  }
  return len;
 800bb64:	89fb      	ldrh	r3, [r7, #14]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3714      	adds	r7, #20
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
	...

0800bb74 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d016      	beq.n	800bbb0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bb82:	f008 fe6d 	bl	8014860 <sys_arch_protect>
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	7b9b      	ldrb	r3, [r3, #14]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	739a      	strb	r2, [r3, #14]
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f008 fe71 	bl	801487c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7b9b      	ldrb	r3, [r3, #14]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d106      	bne.n	800bbb0 <pbuf_ref+0x3c>
 800bba2:	4b05      	ldr	r3, [pc, #20]	; (800bbb8 <pbuf_ref+0x44>)
 800bba4:	f240 3242 	movw	r2, #834	; 0x342
 800bba8:	4904      	ldr	r1, [pc, #16]	; (800bbbc <pbuf_ref+0x48>)
 800bbaa:	4805      	ldr	r0, [pc, #20]	; (800bbc0 <pbuf_ref+0x4c>)
 800bbac:	f009 fc38 	bl	8015420 <iprintf>
  }
}
 800bbb0:	bf00      	nop
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	08017000 	.word	0x08017000
 800bbbc:	080171e0 	.word	0x080171e0
 800bbc0:	08017060 	.word	0x08017060

0800bbc4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <pbuf_cat+0x16>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d107      	bne.n	800bbea <pbuf_cat+0x26>
 800bbda:	4b20      	ldr	r3, [pc, #128]	; (800bc5c <pbuf_cat+0x98>)
 800bbdc:	f240 3259 	movw	r2, #857	; 0x359
 800bbe0:	491f      	ldr	r1, [pc, #124]	; (800bc60 <pbuf_cat+0x9c>)
 800bbe2:	4820      	ldr	r0, [pc, #128]	; (800bc64 <pbuf_cat+0xa0>)
 800bbe4:	f009 fc1c 	bl	8015420 <iprintf>
 800bbe8:	e034      	b.n	800bc54 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	60fb      	str	r3, [r7, #12]
 800bbee:	e00a      	b.n	800bc06 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	891a      	ldrh	r2, [r3, #8]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	891b      	ldrh	r3, [r3, #8]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	b29a      	uxth	r2, r3
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1f0      	bne.n	800bbf0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	891a      	ldrh	r2, [r3, #8]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	895b      	ldrh	r3, [r3, #10]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d006      	beq.n	800bc28 <pbuf_cat+0x64>
 800bc1a:	4b10      	ldr	r3, [pc, #64]	; (800bc5c <pbuf_cat+0x98>)
 800bc1c:	f240 3262 	movw	r2, #866	; 0x362
 800bc20:	4911      	ldr	r1, [pc, #68]	; (800bc68 <pbuf_cat+0xa4>)
 800bc22:	4810      	ldr	r0, [pc, #64]	; (800bc64 <pbuf_cat+0xa0>)
 800bc24:	f009 fbfc 	bl	8015420 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d006      	beq.n	800bc3e <pbuf_cat+0x7a>
 800bc30:	4b0a      	ldr	r3, [pc, #40]	; (800bc5c <pbuf_cat+0x98>)
 800bc32:	f240 3263 	movw	r2, #867	; 0x363
 800bc36:	490d      	ldr	r1, [pc, #52]	; (800bc6c <pbuf_cat+0xa8>)
 800bc38:	480a      	ldr	r0, [pc, #40]	; (800bc64 <pbuf_cat+0xa0>)
 800bc3a:	f009 fbf1 	bl	8015420 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	891a      	ldrh	r2, [r3, #8]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	891b      	ldrh	r3, [r3, #8]
 800bc46:	4413      	add	r3, r2
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
 800bc5a:	bf00      	nop
 800bc5c:	08017000 	.word	0x08017000
 800bc60:	080171f4 	.word	0x080171f4
 800bc64:	08017060 	.word	0x08017060
 800bc68:	0801722c 	.word	0x0801722c
 800bc6c:	0801725c 	.word	0x0801725c

0800bc70 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff ffa1 	bl	800bbc4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bc82:	6838      	ldr	r0, [r7, #0]
 800bc84:	f7ff ff76 	bl	800bb74 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bc88:	bf00      	nop
 800bc8a:	3708      	adds	r7, #8
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	617b      	str	r3, [r7, #20]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d008      	beq.n	800bcba <pbuf_copy+0x2a>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d005      	beq.n	800bcba <pbuf_copy+0x2a>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	891a      	ldrh	r2, [r3, #8]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	891b      	ldrh	r3, [r3, #8]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d209      	bcs.n	800bcce <pbuf_copy+0x3e>
 800bcba:	4b57      	ldr	r3, [pc, #348]	; (800be18 <pbuf_copy+0x188>)
 800bcbc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bcc0:	4956      	ldr	r1, [pc, #344]	; (800be1c <pbuf_copy+0x18c>)
 800bcc2:	4857      	ldr	r0, [pc, #348]	; (800be20 <pbuf_copy+0x190>)
 800bcc4:	f009 fbac 	bl	8015420 <iprintf>
 800bcc8:	f06f 030f 	mvn.w	r3, #15
 800bccc:	e09f      	b.n	800be0e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	895b      	ldrh	r3, [r3, #10]
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	1ad2      	subs	r2, r2, r3
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	895b      	ldrh	r3, [r3, #10]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	1acb      	subs	r3, r1, r3
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d306      	bcc.n	800bcf4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	895b      	ldrh	r3, [r3, #10]
 800bcea:	461a      	mov	r2, r3
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	60fb      	str	r3, [r7, #12]
 800bcf2:	e005      	b.n	800bd00 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	895b      	ldrh	r3, [r3, #10]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	1ad3      	subs	r3, r2, r3
 800bcfe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	18d0      	adds	r0, r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	4413      	add	r3, r2
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	4619      	mov	r1, r3
 800bd14:	f009 fabf 	bl	8015296 <memcpy>
    offset_to += len;
 800bd18:	697a      	ldr	r2, [r7, #20]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	4413      	add	r3, r2
 800bd26:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	895b      	ldrh	r3, [r3, #10]
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d906      	bls.n	800bd42 <pbuf_copy+0xb2>
 800bd34:	4b38      	ldr	r3, [pc, #224]	; (800be18 <pbuf_copy+0x188>)
 800bd36:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bd3a:	493a      	ldr	r1, [pc, #232]	; (800be24 <pbuf_copy+0x194>)
 800bd3c:	4838      	ldr	r0, [pc, #224]	; (800be20 <pbuf_copy+0x190>)
 800bd3e:	f009 fb6f 	bl	8015420 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	895b      	ldrh	r3, [r3, #10]
 800bd46:	461a      	mov	r2, r3
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d906      	bls.n	800bd5c <pbuf_copy+0xcc>
 800bd4e:	4b32      	ldr	r3, [pc, #200]	; (800be18 <pbuf_copy+0x188>)
 800bd50:	f240 32da 	movw	r2, #986	; 0x3da
 800bd54:	4934      	ldr	r1, [pc, #208]	; (800be28 <pbuf_copy+0x198>)
 800bd56:	4832      	ldr	r0, [pc, #200]	; (800be20 <pbuf_copy+0x190>)
 800bd58:	f009 fb62 	bl	8015420 <iprintf>
    if (offset_from >= p_from->len) {
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	895b      	ldrh	r3, [r3, #10]
 800bd60:	461a      	mov	r2, r3
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d304      	bcc.n	800bd72 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	895b      	ldrh	r3, [r3, #10]
 800bd76:	461a      	mov	r2, r3
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d114      	bne.n	800bda8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d10c      	bne.n	800bda8 <pbuf_copy+0x118>
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d009      	beq.n	800bda8 <pbuf_copy+0x118>
 800bd94:	4b20      	ldr	r3, [pc, #128]	; (800be18 <pbuf_copy+0x188>)
 800bd96:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bd9a:	4924      	ldr	r1, [pc, #144]	; (800be2c <pbuf_copy+0x19c>)
 800bd9c:	4820      	ldr	r0, [pc, #128]	; (800be20 <pbuf_copy+0x190>)
 800bd9e:	f009 fb3f 	bl	8015420 <iprintf>
 800bda2:	f06f 030f 	mvn.w	r3, #15
 800bda6:	e032      	b.n	800be0e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d013      	beq.n	800bdd6 <pbuf_copy+0x146>
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	895a      	ldrh	r2, [r3, #10]
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	891b      	ldrh	r3, [r3, #8]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d10d      	bne.n	800bdd6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d009      	beq.n	800bdd6 <pbuf_copy+0x146>
 800bdc2:	4b15      	ldr	r3, [pc, #84]	; (800be18 <pbuf_copy+0x188>)
 800bdc4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bdc8:	4919      	ldr	r1, [pc, #100]	; (800be30 <pbuf_copy+0x1a0>)
 800bdca:	4815      	ldr	r0, [pc, #84]	; (800be20 <pbuf_copy+0x190>)
 800bdcc:	f009 fb28 	bl	8015420 <iprintf>
 800bdd0:	f06f 0305 	mvn.w	r3, #5
 800bdd4:	e01b      	b.n	800be0e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d013      	beq.n	800be04 <pbuf_copy+0x174>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	895a      	ldrh	r2, [r3, #10]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	891b      	ldrh	r3, [r3, #8]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d10d      	bne.n	800be04 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d009      	beq.n	800be04 <pbuf_copy+0x174>
 800bdf0:	4b09      	ldr	r3, [pc, #36]	; (800be18 <pbuf_copy+0x188>)
 800bdf2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bdf6:	490e      	ldr	r1, [pc, #56]	; (800be30 <pbuf_copy+0x1a0>)
 800bdf8:	4809      	ldr	r0, [pc, #36]	; (800be20 <pbuf_copy+0x190>)
 800bdfa:	f009 fb11 	bl	8015420 <iprintf>
 800bdfe:	f06f 0305 	mvn.w	r3, #5
 800be02:	e004      	b.n	800be0e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	f47f af61 	bne.w	800bcce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3718      	adds	r7, #24
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	08017000 	.word	0x08017000
 800be1c:	080172a8 	.word	0x080172a8
 800be20:	08017060 	.word	0x08017060
 800be24:	080172d8 	.word	0x080172d8
 800be28:	080172f0 	.word	0x080172f0
 800be2c:	0801730c 	.word	0x0801730c
 800be30:	0801731c 	.word	0x0801731c

0800be34 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	4611      	mov	r1, r2
 800be40:	461a      	mov	r2, r3
 800be42:	460b      	mov	r3, r1
 800be44:	80fb      	strh	r3, [r7, #6]
 800be46:	4613      	mov	r3, r2
 800be48:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800be4a:	2300      	movs	r3, #0
 800be4c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800be4e:	2300      	movs	r3, #0
 800be50:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d108      	bne.n	800be6a <pbuf_copy_partial+0x36>
 800be58:	4b2b      	ldr	r3, [pc, #172]	; (800bf08 <pbuf_copy_partial+0xd4>)
 800be5a:	f240 420a 	movw	r2, #1034	; 0x40a
 800be5e:	492b      	ldr	r1, [pc, #172]	; (800bf0c <pbuf_copy_partial+0xd8>)
 800be60:	482b      	ldr	r0, [pc, #172]	; (800bf10 <pbuf_copy_partial+0xdc>)
 800be62:	f009 fadd 	bl	8015420 <iprintf>
 800be66:	2300      	movs	r3, #0
 800be68:	e04a      	b.n	800bf00 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d108      	bne.n	800be82 <pbuf_copy_partial+0x4e>
 800be70:	4b25      	ldr	r3, [pc, #148]	; (800bf08 <pbuf_copy_partial+0xd4>)
 800be72:	f240 420b 	movw	r2, #1035	; 0x40b
 800be76:	4927      	ldr	r1, [pc, #156]	; (800bf14 <pbuf_copy_partial+0xe0>)
 800be78:	4825      	ldr	r0, [pc, #148]	; (800bf10 <pbuf_copy_partial+0xdc>)
 800be7a:	f009 fad1 	bl	8015420 <iprintf>
 800be7e:	2300      	movs	r3, #0
 800be80:	e03e      	b.n	800bf00 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	61fb      	str	r3, [r7, #28]
 800be86:	e034      	b.n	800bef2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800be88:	88bb      	ldrh	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00a      	beq.n	800bea4 <pbuf_copy_partial+0x70>
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	895b      	ldrh	r3, [r3, #10]
 800be92:	88ba      	ldrh	r2, [r7, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d305      	bcc.n	800bea4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	895b      	ldrh	r3, [r3, #10]
 800be9c:	88ba      	ldrh	r2, [r7, #4]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	80bb      	strh	r3, [r7, #4]
 800bea2:	e023      	b.n	800beec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	895a      	ldrh	r2, [r3, #10]
 800bea8:	88bb      	ldrh	r3, [r7, #4]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800beae:	8b3a      	ldrh	r2, [r7, #24]
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d901      	bls.n	800beba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800beb6:	88fb      	ldrh	r3, [r7, #6]
 800beb8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800beba:	8b7b      	ldrh	r3, [r7, #26]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	18d0      	adds	r0, r2, r3
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	88bb      	ldrh	r3, [r7, #4]
 800bec6:	4413      	add	r3, r2
 800bec8:	8b3a      	ldrh	r2, [r7, #24]
 800beca:	4619      	mov	r1, r3
 800becc:	f009 f9e3 	bl	8015296 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bed0:	8afa      	ldrh	r2, [r7, #22]
 800bed2:	8b3b      	ldrh	r3, [r7, #24]
 800bed4:	4413      	add	r3, r2
 800bed6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bed8:	8b7a      	ldrh	r2, [r7, #26]
 800beda:	8b3b      	ldrh	r3, [r7, #24]
 800bedc:	4413      	add	r3, r2
 800bede:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bee0:	88fa      	ldrh	r2, [r7, #6]
 800bee2:	8b3b      	ldrh	r3, [r7, #24]
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bee8:	2300      	movs	r3, #0
 800beea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800beec:	69fb      	ldr	r3, [r7, #28]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	61fb      	str	r3, [r7, #28]
 800bef2:	88fb      	ldrh	r3, [r7, #6]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <pbuf_copy_partial+0xca>
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d1c4      	bne.n	800be88 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800befe:	8afb      	ldrh	r3, [r7, #22]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3720      	adds	r7, #32
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	08017000 	.word	0x08017000
 800bf0c:	08017348 	.word	0x08017348
 800bf10:	08017060 	.word	0x08017060
 800bf14:	08017368 	.word	0x08017368

0800bf18 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	460b      	mov	r3, r1
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800bf26:	897b      	ldrh	r3, [r7, #10]
 800bf28:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800bf2e:	e007      	b.n	800bf40 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	895b      	ldrh	r3, [r3, #10]
 800bf34:	8afa      	ldrh	r2, [r7, #22]
 800bf36:	1ad3      	subs	r3, r2, r3
 800bf38:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d004      	beq.n	800bf50 <pbuf_skip_const+0x38>
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	895b      	ldrh	r3, [r3, #10]
 800bf4a:	8afa      	ldrh	r2, [r7, #22]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d2ef      	bcs.n	800bf30 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d002      	beq.n	800bf5c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8afa      	ldrh	r2, [r7, #22]
 800bf5a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800bf5c:	693b      	ldr	r3, [r7, #16]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	371c      	adds	r7, #28
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
	...

0800bf6c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b084      	sub	sp, #16
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	4603      	mov	r3, r0
 800bf74:	603a      	str	r2, [r7, #0]
 800bf76:	71fb      	strb	r3, [r7, #7]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	8919      	ldrh	r1, [r3, #8]
 800bf80:	88ba      	ldrh	r2, [r7, #4]
 800bf82:	79fb      	ldrb	r3, [r7, #7]
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff fa6d 	bl	800b464 <pbuf_alloc>
 800bf8a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d101      	bne.n	800bf96 <pbuf_clone+0x2a>
    return NULL;
 800bf92:	2300      	movs	r3, #0
 800bf94:	e011      	b.n	800bfba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7ff fe79 	bl	800bc90 <pbuf_copy>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bfa2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d006      	beq.n	800bfb8 <pbuf_clone+0x4c>
 800bfaa:	4b06      	ldr	r3, [pc, #24]	; (800bfc4 <pbuf_clone+0x58>)
 800bfac:	f240 5224 	movw	r2, #1316	; 0x524
 800bfb0:	4905      	ldr	r1, [pc, #20]	; (800bfc8 <pbuf_clone+0x5c>)
 800bfb2:	4806      	ldr	r0, [pc, #24]	; (800bfcc <pbuf_clone+0x60>)
 800bfb4:	f009 fa34 	bl	8015420 <iprintf>
  return q;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	08017000 	.word	0x08017000
 800bfc8:	08017474 	.word	0x08017474
 800bfcc:	08017060 	.word	0x08017060

0800bfd0 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	460b      	mov	r3, r1
 800bfda:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800bfdc:	887b      	ldrh	r3, [r7, #2]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 f80c 	bl	800bffe <pbuf_try_get_at>
 800bfe6:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	db02      	blt.n	800bff4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	e000      	b.n	800bff6 <pbuf_get_at+0x26>
  }
  return 0;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}

0800bffe <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800bffe:	b580      	push	{r7, lr}
 800c000:	b084      	sub	sp, #16
 800c002:	af00      	add	r7, sp, #0
 800c004:	6078      	str	r0, [r7, #4]
 800c006:	460b      	mov	r3, r1
 800c008:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800c00a:	f107 020a 	add.w	r2, r7, #10
 800c00e:	887b      	ldrh	r3, [r7, #2]
 800c010:	4619      	mov	r1, r3
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7ff ff80 	bl	800bf18 <pbuf_skip_const>
 800c018:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00a      	beq.n	800c036 <pbuf_try_get_at+0x38>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	895a      	ldrh	r2, [r3, #10]
 800c024:	897b      	ldrh	r3, [r7, #10]
 800c026:	429a      	cmp	r2, r3
 800c028:	d905      	bls.n	800c036 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	897a      	ldrh	r2, [r7, #10]
 800c030:	4413      	add	r3, r2
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	e001      	b.n	800c03a <pbuf_try_get_at+0x3c>
  }
  return -1;
 800c036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b088      	sub	sp, #32
 800c046:	af00      	add	r7, sp, #0
 800c048:	60f8      	str	r0, [r7, #12]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	461a      	mov	r2, r3
 800c04e:	460b      	mov	r3, r1
 800c050:	817b      	strh	r3, [r7, #10]
 800c052:	4613      	mov	r3, r2
 800c054:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 800c056:	897b      	ldrh	r3, [r7, #10]
 800c058:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	891b      	ldrh	r3, [r3, #8]
 800c062:	4619      	mov	r1, r3
 800c064:	897a      	ldrh	r2, [r7, #10]
 800c066:	893b      	ldrh	r3, [r7, #8]
 800c068:	4413      	add	r3, r2
 800c06a:	4299      	cmp	r1, r3
 800c06c:	da0a      	bge.n	800c084 <pbuf_memcmp+0x42>
    return 0xffff;
 800c06e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c072:	e037      	b.n	800c0e4 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 800c074:	69bb      	ldr	r3, [r7, #24]
 800c076:	895b      	ldrh	r3, [r3, #10]
 800c078:	8bfa      	ldrh	r2, [r7, #30]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 800c07e:	69bb      	ldr	r3, [r7, #24]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d004      	beq.n	800c094 <pbuf_memcmp+0x52>
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	895b      	ldrh	r3, [r3, #10]
 800c08e:	8bfa      	ldrh	r2, [r7, #30]
 800c090:	429a      	cmp	r2, r3
 800c092:	d2ef      	bcs.n	800c074 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800c094:	2300      	movs	r3, #0
 800c096:	82fb      	strh	r3, [r7, #22]
 800c098:	e01f      	b.n	800c0da <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800c09a:	8bfa      	ldrh	r2, [r7, #30]
 800c09c:	8afb      	ldrh	r3, [r7, #22]
 800c09e:	4413      	add	r3, r2
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	69b8      	ldr	r0, [r7, #24]
 800c0a6:	f7ff ff93 	bl	800bfd0 <pbuf_get_at>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 800c0ae:	8afb      	ldrh	r3, [r7, #22]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 800c0b8:	7d7a      	ldrb	r2, [r7, #21]
 800c0ba:	7d3b      	ldrb	r3, [r7, #20]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d009      	beq.n	800c0d4 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800c0c0:	8afb      	ldrh	r3, [r7, #22]
 800c0c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	bf28      	it	cs
 800c0ca:	4613      	movcs	r3, r2
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	e007      	b.n	800c0e4 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 800c0d4:	8afb      	ldrh	r3, [r7, #22]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	82fb      	strh	r3, [r7, #22]
 800c0da:	8afa      	ldrh	r2, [r7, #22]
 800c0dc:	893b      	ldrh	r3, [r7, #8]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d3db      	bcc.n	800c09a <pbuf_memcmp+0x58>
    }
  }
  return 0;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3720      	adds	r7, #32
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	80fb      	strh	r3, [r7, #6]
 800c0fe:	4613      	mov	r3, r2
 800c100:	80bb      	strh	r3, [r7, #4]
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	891a      	ldrh	r2, [r3, #8]
 800c106:	88fb      	ldrh	r3, [r7, #6]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	82bb      	strh	r3, [r7, #20]
  if (p->tot_len >= mem_len + start_offset) {
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	891b      	ldrh	r3, [r3, #8]
 800c110:	4619      	mov	r1, r3
 800c112:	88fa      	ldrh	r2, [r7, #6]
 800c114:	88bb      	ldrh	r3, [r7, #4]
 800c116:	4413      	add	r3, r2
 800c118:	4299      	cmp	r1, r3
 800c11a:	db16      	blt.n	800c14a <pbuf_memfind+0x5e>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800c11c:	88bb      	ldrh	r3, [r7, #4]
 800c11e:	82fb      	strh	r3, [r7, #22]
 800c120:	e00f      	b.n	800c142 <pbuf_memfind+0x56>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 800c122:	88fb      	ldrh	r3, [r7, #6]
 800c124:	8af9      	ldrh	r1, [r7, #22]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f7ff ff8a 	bl	800c042 <pbuf_memcmp>
 800c12e:	4603      	mov	r3, r0
 800c130:	827b      	strh	r3, [r7, #18]
      if (plus == 0) {
 800c132:	8a7b      	ldrh	r3, [r7, #18]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <pbuf_memfind+0x50>
        return i;
 800c138:	8afb      	ldrh	r3, [r7, #22]
 800c13a:	e008      	b.n	800c14e <pbuf_memfind+0x62>
    for (i = start_offset; i <= max_cmp_start; i++) {
 800c13c:	8afb      	ldrh	r3, [r7, #22]
 800c13e:	3301      	adds	r3, #1
 800c140:	82fb      	strh	r3, [r7, #22]
 800c142:	8afa      	ldrh	r2, [r7, #22]
 800c144:	8abb      	ldrh	r3, [r7, #20]
 800c146:	429a      	cmp	r2, r3
 800c148:	d9eb      	bls.n	800c122 <pbuf_memfind+0x36>
      }
    }
  }
  return 0xFFFF;
 800c14a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
	...

0800c158 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c15c:	f009 f9ee 	bl	801553c <rand>
 800c160:	4603      	mov	r3, r0
 800c162:	b29b      	uxth	r3, r3
 800c164:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c168:	b29b      	uxth	r3, r3
 800c16a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c16e:	b29a      	uxth	r2, r3
 800c170:	4b01      	ldr	r3, [pc, #4]	; (800c178 <tcp_init+0x20>)
 800c172:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c174:	bf00      	nop
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20000024 	.word	0x20000024

0800c17c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	7d1b      	ldrb	r3, [r3, #20]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d105      	bne.n	800c198 <tcp_free+0x1c>
 800c18c:	4b06      	ldr	r3, [pc, #24]	; (800c1a8 <tcp_free+0x2c>)
 800c18e:	22d4      	movs	r2, #212	; 0xd4
 800c190:	4906      	ldr	r1, [pc, #24]	; (800c1ac <tcp_free+0x30>)
 800c192:	4807      	ldr	r0, [pc, #28]	; (800c1b0 <tcp_free+0x34>)
 800c194:	f009 f944 	bl	8015420 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c198:	6879      	ldr	r1, [r7, #4]
 800c19a:	2001      	movs	r0, #1
 800c19c:	f7fe fda2 	bl	800ace4 <memp_free>
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	08017500 	.word	0x08017500
 800c1ac:	08017530 	.word	0x08017530
 800c1b0:	08017544 	.word	0x08017544

0800c1b4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b082      	sub	sp, #8
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7d1b      	ldrb	r3, [r3, #20]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d105      	bne.n	800c1d0 <tcp_free_listen+0x1c>
 800c1c4:	4b06      	ldr	r3, [pc, #24]	; (800c1e0 <tcp_free_listen+0x2c>)
 800c1c6:	22df      	movs	r2, #223	; 0xdf
 800c1c8:	4906      	ldr	r1, [pc, #24]	; (800c1e4 <tcp_free_listen+0x30>)
 800c1ca:	4807      	ldr	r0, [pc, #28]	; (800c1e8 <tcp_free_listen+0x34>)
 800c1cc:	f009 f928 	bl	8015420 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c1d0:	6879      	ldr	r1, [r7, #4]
 800c1d2:	2002      	movs	r0, #2
 800c1d4:	f7fe fd86 	bl	800ace4 <memp_free>
}
 800c1d8:	bf00      	nop
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	08017500 	.word	0x08017500
 800c1e4:	0801756c 	.word	0x0801756c
 800c1e8:	08017544 	.word	0x08017544

0800c1ec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c1f0:	f000 fea2 	bl	800cf38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c1f4:	4b07      	ldr	r3, [pc, #28]	; (800c214 <tcp_tmr+0x28>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	b2da      	uxtb	r2, r3
 800c1fc:	4b05      	ldr	r3, [pc, #20]	; (800c214 <tcp_tmr+0x28>)
 800c1fe:	701a      	strb	r2, [r3, #0]
 800c200:	4b04      	ldr	r3, [pc, #16]	; (800c214 <tcp_tmr+0x28>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	f003 0301 	and.w	r3, r3, #1
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c20c:	f000 fb54 	bl	800c8b8 <tcp_slowtmr>
  }
}
 800c210:	bf00      	nop
 800c212:	bd80      	pop	{r7, pc}
 800c214:	20040ab9 	.word	0x20040ab9

0800c218 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d105      	bne.n	800c234 <tcp_remove_listener+0x1c>
 800c228:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <tcp_remove_listener+0x48>)
 800c22a:	22ff      	movs	r2, #255	; 0xff
 800c22c:	490d      	ldr	r1, [pc, #52]	; (800c264 <tcp_remove_listener+0x4c>)
 800c22e:	480e      	ldr	r0, [pc, #56]	; (800c268 <tcp_remove_listener+0x50>)
 800c230:	f009 f8f6 	bl	8015420 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	e00a      	b.n	800c250 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	429a      	cmp	r2, r3
 800c242:	d102      	bne.n	800c24a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2200      	movs	r2, #0
 800c248:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1f1      	bne.n	800c23a <tcp_remove_listener+0x22>
    }
  }
}
 800c256:	bf00      	nop
 800c258:	bf00      	nop
 800c25a:	3710      	adds	r7, #16
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	08017500 	.word	0x08017500
 800c264:	08017588 	.word	0x08017588
 800c268:	08017544 	.word	0x08017544

0800c26c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d106      	bne.n	800c288 <tcp_listen_closed+0x1c>
 800c27a:	4b14      	ldr	r3, [pc, #80]	; (800c2cc <tcp_listen_closed+0x60>)
 800c27c:	f240 1211 	movw	r2, #273	; 0x111
 800c280:	4913      	ldr	r1, [pc, #76]	; (800c2d0 <tcp_listen_closed+0x64>)
 800c282:	4814      	ldr	r0, [pc, #80]	; (800c2d4 <tcp_listen_closed+0x68>)
 800c284:	f009 f8cc 	bl	8015420 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	7d1b      	ldrb	r3, [r3, #20]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d006      	beq.n	800c29e <tcp_listen_closed+0x32>
 800c290:	4b0e      	ldr	r3, [pc, #56]	; (800c2cc <tcp_listen_closed+0x60>)
 800c292:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c296:	4910      	ldr	r1, [pc, #64]	; (800c2d8 <tcp_listen_closed+0x6c>)
 800c298:	480e      	ldr	r0, [pc, #56]	; (800c2d4 <tcp_listen_closed+0x68>)
 800c29a:	f009 f8c1 	bl	8015420 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c29e:	2301      	movs	r3, #1
 800c2a0:	60fb      	str	r3, [r7, #12]
 800c2a2:	e00b      	b.n	800c2bc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c2a4:	4a0d      	ldr	r2, [pc, #52]	; (800c2dc <tcp_listen_closed+0x70>)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7ff ffb1 	bl	800c218 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	d9f0      	bls.n	800c2a4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c2c2:	bf00      	nop
 800c2c4:	bf00      	nop
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	08017500 	.word	0x08017500
 800c2d0:	080175b0 	.word	0x080175b0
 800c2d4:	08017544 	.word	0x08017544
 800c2d8:	080175bc 	.word	0x080175bc
 800c2dc:	0801965c 	.word	0x0801965c

0800c2e0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c2e0:	b5b0      	push	{r4, r5, r7, lr}
 800c2e2:	b088      	sub	sp, #32
 800c2e4:	af04      	add	r7, sp, #16
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d106      	bne.n	800c300 <tcp_close_shutdown+0x20>
 800c2f2:	4b63      	ldr	r3, [pc, #396]	; (800c480 <tcp_close_shutdown+0x1a0>)
 800c2f4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c2f8:	4962      	ldr	r1, [pc, #392]	; (800c484 <tcp_close_shutdown+0x1a4>)
 800c2fa:	4863      	ldr	r0, [pc, #396]	; (800c488 <tcp_close_shutdown+0x1a8>)
 800c2fc:	f009 f890 	bl	8015420 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c300:	78fb      	ldrb	r3, [r7, #3]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d066      	beq.n	800c3d4 <tcp_close_shutdown+0xf4>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	7d1b      	ldrb	r3, [r3, #20]
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	d003      	beq.n	800c316 <tcp_close_shutdown+0x36>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	7d1b      	ldrb	r3, [r3, #20]
 800c312:	2b07      	cmp	r3, #7
 800c314:	d15e      	bne.n	800c3d4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d104      	bne.n	800c328 <tcp_close_shutdown+0x48>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c322:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c326:	d055      	beq.n	800c3d4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	8b5b      	ldrh	r3, [r3, #26]
 800c32c:	f003 0310 	and.w	r3, r3, #16
 800c330:	2b00      	cmp	r3, #0
 800c332:	d106      	bne.n	800c342 <tcp_close_shutdown+0x62>
 800c334:	4b52      	ldr	r3, [pc, #328]	; (800c480 <tcp_close_shutdown+0x1a0>)
 800c336:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c33a:	4954      	ldr	r1, [pc, #336]	; (800c48c <tcp_close_shutdown+0x1ac>)
 800c33c:	4852      	ldr	r0, [pc, #328]	; (800c488 <tcp_close_shutdown+0x1a8>)
 800c33e:	f009 f86f 	bl	8015420 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c34a:	687d      	ldr	r5, [r7, #4]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	3304      	adds	r3, #4
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	8ad2      	ldrh	r2, [r2, #22]
 800c354:	6879      	ldr	r1, [r7, #4]
 800c356:	8b09      	ldrh	r1, [r1, #24]
 800c358:	9102      	str	r1, [sp, #8]
 800c35a:	9201      	str	r2, [sp, #4]
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	462b      	mov	r3, r5
 800c360:	4622      	mov	r2, r4
 800c362:	4601      	mov	r1, r0
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f004 fe91 	bl	801108c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f001 f8c6 	bl	800d4fc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c370:	4b47      	ldr	r3, [pc, #284]	; (800c490 <tcp_close_shutdown+0x1b0>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	429a      	cmp	r2, r3
 800c378:	d105      	bne.n	800c386 <tcp_close_shutdown+0xa6>
 800c37a:	4b45      	ldr	r3, [pc, #276]	; (800c490 <tcp_close_shutdown+0x1b0>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	4a43      	ldr	r2, [pc, #268]	; (800c490 <tcp_close_shutdown+0x1b0>)
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	e013      	b.n	800c3ae <tcp_close_shutdown+0xce>
 800c386:	4b42      	ldr	r3, [pc, #264]	; (800c490 <tcp_close_shutdown+0x1b0>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	60fb      	str	r3, [r7, #12]
 800c38c:	e00c      	b.n	800c3a8 <tcp_close_shutdown+0xc8>
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d104      	bne.n	800c3a2 <tcp_close_shutdown+0xc2>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	68da      	ldr	r2, [r3, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	60da      	str	r2, [r3, #12]
 800c3a0:	e005      	b.n	800c3ae <tcp_close_shutdown+0xce>
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	60fb      	str	r3, [r7, #12]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1ef      	bne.n	800c38e <tcp_close_shutdown+0xae>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	60da      	str	r2, [r3, #12]
 800c3b4:	4b37      	ldr	r3, [pc, #220]	; (800c494 <tcp_close_shutdown+0x1b4>)
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c3ba:	4b37      	ldr	r3, [pc, #220]	; (800c498 <tcp_close_shutdown+0x1b8>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d102      	bne.n	800c3ca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c3c4:	f003 fd5e 	bl	800fe84 <tcp_trigger_input_pcb_close>
 800c3c8:	e002      	b.n	800c3d0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff fed6 	bl	800c17c <tcp_free>
      }
      return ERR_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	e050      	b.n	800c476 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	7d1b      	ldrb	r3, [r3, #20]
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	d03b      	beq.n	800c454 <tcp_close_shutdown+0x174>
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	dc44      	bgt.n	800c46a <tcp_close_shutdown+0x18a>
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d002      	beq.n	800c3ea <tcp_close_shutdown+0x10a>
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d02a      	beq.n	800c43e <tcp_close_shutdown+0x15e>
 800c3e8:	e03f      	b.n	800c46a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	8adb      	ldrh	r3, [r3, #22]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d021      	beq.n	800c436 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c3f2:	4b2a      	ldr	r3, [pc, #168]	; (800c49c <tcp_close_shutdown+0x1bc>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d105      	bne.n	800c408 <tcp_close_shutdown+0x128>
 800c3fc:	4b27      	ldr	r3, [pc, #156]	; (800c49c <tcp_close_shutdown+0x1bc>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	4a26      	ldr	r2, [pc, #152]	; (800c49c <tcp_close_shutdown+0x1bc>)
 800c404:	6013      	str	r3, [r2, #0]
 800c406:	e013      	b.n	800c430 <tcp_close_shutdown+0x150>
 800c408:	4b24      	ldr	r3, [pc, #144]	; (800c49c <tcp_close_shutdown+0x1bc>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	60bb      	str	r3, [r7, #8]
 800c40e:	e00c      	b.n	800c42a <tcp_close_shutdown+0x14a>
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	429a      	cmp	r2, r3
 800c418:	d104      	bne.n	800c424 <tcp_close_shutdown+0x144>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68da      	ldr	r2, [r3, #12]
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	60da      	str	r2, [r3, #12]
 800c422:	e005      	b.n	800c430 <tcp_close_shutdown+0x150>
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	60bb      	str	r3, [r7, #8]
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1ef      	bne.n	800c410 <tcp_close_shutdown+0x130>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f7ff fea0 	bl	800c17c <tcp_free>
      break;
 800c43c:	e01a      	b.n	800c474 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff ff14 	bl	800c26c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c444:	6879      	ldr	r1, [r7, #4]
 800c446:	4816      	ldr	r0, [pc, #88]	; (800c4a0 <tcp_close_shutdown+0x1c0>)
 800c448:	f001 f8a8 	bl	800d59c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff feb1 	bl	800c1b4 <tcp_free_listen>
      break;
 800c452:	e00f      	b.n	800c474 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	480e      	ldr	r0, [pc, #56]	; (800c490 <tcp_close_shutdown+0x1b0>)
 800c458:	f001 f8a0 	bl	800d59c <tcp_pcb_remove>
 800c45c:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <tcp_close_shutdown+0x1b4>)
 800c45e:	2201      	movs	r2, #1
 800c460:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7ff fe8a 	bl	800c17c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c468:	e004      	b.n	800c474 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f81a 	bl	800c4a4 <tcp_close_shutdown_fin>
 800c470:	4603      	mov	r3, r0
 800c472:	e000      	b.n	800c476 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bdb0      	pop	{r4, r5, r7, pc}
 800c47e:	bf00      	nop
 800c480:	08017500 	.word	0x08017500
 800c484:	080175d4 	.word	0x080175d4
 800c488:	08017544 	.word	0x08017544
 800c48c:	080175f4 	.word	0x080175f4
 800c490:	20040ab0 	.word	0x20040ab0
 800c494:	20040ab8 	.word	0x20040ab8
 800c498:	20040af0 	.word	0x20040af0
 800c49c:	20040aa8 	.word	0x20040aa8
 800c4a0:	20040aac 	.word	0x20040aac

0800c4a4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d106      	bne.n	800c4c0 <tcp_close_shutdown_fin+0x1c>
 800c4b2:	4b2e      	ldr	r3, [pc, #184]	; (800c56c <tcp_close_shutdown_fin+0xc8>)
 800c4b4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c4b8:	492d      	ldr	r1, [pc, #180]	; (800c570 <tcp_close_shutdown_fin+0xcc>)
 800c4ba:	482e      	ldr	r0, [pc, #184]	; (800c574 <tcp_close_shutdown_fin+0xd0>)
 800c4bc:	f008 ffb0 	bl	8015420 <iprintf>

  switch (pcb->state) {
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	7d1b      	ldrb	r3, [r3, #20]
 800c4c4:	2b07      	cmp	r3, #7
 800c4c6:	d020      	beq.n	800c50a <tcp_close_shutdown_fin+0x66>
 800c4c8:	2b07      	cmp	r3, #7
 800c4ca:	dc2b      	bgt.n	800c524 <tcp_close_shutdown_fin+0x80>
 800c4cc:	2b03      	cmp	r3, #3
 800c4ce:	d002      	beq.n	800c4d6 <tcp_close_shutdown_fin+0x32>
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d00d      	beq.n	800c4f0 <tcp_close_shutdown_fin+0x4c>
 800c4d4:	e026      	b.n	800c524 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f003 fee6 	bl	80102a8 <tcp_send_fin>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c4e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d11f      	bne.n	800c528 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2205      	movs	r2, #5
 800c4ec:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c4ee:	e01b      	b.n	800c528 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f003 fed9 	bl	80102a8 <tcp_send_fin>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c4fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d114      	bne.n	800c52c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2205      	movs	r2, #5
 800c506:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c508:	e010      	b.n	800c52c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f003 fecc 	bl	80102a8 <tcp_send_fin>
 800c510:	4603      	mov	r3, r0
 800c512:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d109      	bne.n	800c530 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2209      	movs	r2, #9
 800c520:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c522:	e005      	b.n	800c530 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c524:	2300      	movs	r3, #0
 800c526:	e01c      	b.n	800c562 <tcp_close_shutdown_fin+0xbe>
      break;
 800c528:	bf00      	nop
 800c52a:	e002      	b.n	800c532 <tcp_close_shutdown_fin+0x8e>
      break;
 800c52c:	bf00      	nop
 800c52e:	e000      	b.n	800c532 <tcp_close_shutdown_fin+0x8e>
      break;
 800c530:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d103      	bne.n	800c542 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f003 fff2 	bl	8010524 <tcp_output>
 800c540:	e00d      	b.n	800c55e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54a:	d108      	bne.n	800c55e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	8b5b      	ldrh	r3, [r3, #26]
 800c550:	f043 0308 	orr.w	r3, r3, #8
 800c554:	b29a      	uxth	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c55a:	2300      	movs	r3, #0
 800c55c:	e001      	b.n	800c562 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c55e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	08017500 	.word	0x08017500
 800c570:	080175b0 	.word	0x080175b0
 800c574:	08017544 	.word	0x08017544

0800c578 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d109      	bne.n	800c59a <tcp_close+0x22>
 800c586:	4b0f      	ldr	r3, [pc, #60]	; (800c5c4 <tcp_close+0x4c>)
 800c588:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c58c:	490e      	ldr	r1, [pc, #56]	; (800c5c8 <tcp_close+0x50>)
 800c58e:	480f      	ldr	r0, [pc, #60]	; (800c5cc <tcp_close+0x54>)
 800c590:	f008 ff46 	bl	8015420 <iprintf>
 800c594:	f06f 030f 	mvn.w	r3, #15
 800c598:	e00f      	b.n	800c5ba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	7d1b      	ldrb	r3, [r3, #20]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d006      	beq.n	800c5b0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	8b5b      	ldrh	r3, [r3, #26]
 800c5a6:	f043 0310 	orr.w	r3, r3, #16
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7ff fe94 	bl	800c2e0 <tcp_close_shutdown>
 800c5b8:	4603      	mov	r3, r0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	08017500 	.word	0x08017500
 800c5c8:	08017610 	.word	0x08017610
 800c5cc:	08017544 	.word	0x08017544

0800c5d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08e      	sub	sp, #56	; 0x38
 800c5d4:	af04      	add	r7, sp, #16
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d107      	bne.n	800c5f0 <tcp_abandon+0x20>
 800c5e0:	4b52      	ldr	r3, [pc, #328]	; (800c72c <tcp_abandon+0x15c>)
 800c5e2:	f240 223d 	movw	r2, #573	; 0x23d
 800c5e6:	4952      	ldr	r1, [pc, #328]	; (800c730 <tcp_abandon+0x160>)
 800c5e8:	4852      	ldr	r0, [pc, #328]	; (800c734 <tcp_abandon+0x164>)
 800c5ea:	f008 ff19 	bl	8015420 <iprintf>
 800c5ee:	e099      	b.n	800c724 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	7d1b      	ldrb	r3, [r3, #20]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d106      	bne.n	800c606 <tcp_abandon+0x36>
 800c5f8:	4b4c      	ldr	r3, [pc, #304]	; (800c72c <tcp_abandon+0x15c>)
 800c5fa:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c5fe:	494e      	ldr	r1, [pc, #312]	; (800c738 <tcp_abandon+0x168>)
 800c600:	484c      	ldr	r0, [pc, #304]	; (800c734 <tcp_abandon+0x164>)
 800c602:	f008 ff0d 	bl	8015420 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	7d1b      	ldrb	r3, [r3, #20]
 800c60a:	2b0a      	cmp	r3, #10
 800c60c:	d107      	bne.n	800c61e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c60e:	6879      	ldr	r1, [r7, #4]
 800c610:	484a      	ldr	r0, [pc, #296]	; (800c73c <tcp_abandon+0x16c>)
 800c612:	f000 ffc3 	bl	800d59c <tcp_pcb_remove>
    tcp_free(pcb);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7ff fdb0 	bl	800c17c <tcp_free>
 800c61c:	e082      	b.n	800c724 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c622:	2300      	movs	r3, #0
 800c624:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c62a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c630:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c638:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7d1b      	ldrb	r3, [r3, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d126      	bne.n	800c696 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	8adb      	ldrh	r3, [r3, #22]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d02e      	beq.n	800c6ae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c650:	4b3b      	ldr	r3, [pc, #236]	; (800c740 <tcp_abandon+0x170>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	429a      	cmp	r2, r3
 800c658:	d105      	bne.n	800c666 <tcp_abandon+0x96>
 800c65a:	4b39      	ldr	r3, [pc, #228]	; (800c740 <tcp_abandon+0x170>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	4a37      	ldr	r2, [pc, #220]	; (800c740 <tcp_abandon+0x170>)
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	e013      	b.n	800c68e <tcp_abandon+0xbe>
 800c666:	4b36      	ldr	r3, [pc, #216]	; (800c740 <tcp_abandon+0x170>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	61fb      	str	r3, [r7, #28]
 800c66c:	e00c      	b.n	800c688 <tcp_abandon+0xb8>
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	68db      	ldr	r3, [r3, #12]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	429a      	cmp	r2, r3
 800c676:	d104      	bne.n	800c682 <tcp_abandon+0xb2>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	68da      	ldr	r2, [r3, #12]
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	60da      	str	r2, [r3, #12]
 800c680:	e005      	b.n	800c68e <tcp_abandon+0xbe>
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	61fb      	str	r3, [r7, #28]
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1ef      	bne.n	800c66e <tcp_abandon+0x9e>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	60da      	str	r2, [r3, #12]
 800c694:	e00b      	b.n	800c6ae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	8adb      	ldrh	r3, [r3, #22]
 800c69e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c6a0:	6879      	ldr	r1, [r7, #4]
 800c6a2:	4828      	ldr	r0, [pc, #160]	; (800c744 <tcp_abandon+0x174>)
 800c6a4:	f000 ff7a 	bl	800d59c <tcp_pcb_remove>
 800c6a8:	4b27      	ldr	r3, [pc, #156]	; (800c748 <tcp_abandon+0x178>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d004      	beq.n	800c6c0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fd1c 	bl	800d0f8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d004      	beq.n	800c6d2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fd13 	bl	800d0f8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d004      	beq.n	800c6e4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 fd0a 	bl	800d0f8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00e      	beq.n	800c708 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3304      	adds	r3, #4
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	8b12      	ldrh	r2, [r2, #24]
 800c6f4:	9202      	str	r2, [sp, #8]
 800c6f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c6f8:	9201      	str	r2, [sp, #4]
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	69b9      	ldr	r1, [r7, #24]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f004 fcc2 	bl	801108c <tcp_rst>
    }
    last_state = pcb->state;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7d1b      	ldrb	r3, [r3, #20]
 800c70c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff fd34 	bl	800c17c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d004      	beq.n	800c724 <tcp_abandon+0x154>
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	f06f 010c 	mvn.w	r1, #12
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	4798      	blx	r3
  }
}
 800c724:	3728      	adds	r7, #40	; 0x28
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	08017500 	.word	0x08017500
 800c730:	08017644 	.word	0x08017644
 800c734:	08017544 	.word	0x08017544
 800c738:	08017660 	.word	0x08017660
 800c73c:	20040ab4 	.word	0x20040ab4
 800c740:	20040aa8 	.word	0x20040aa8
 800c744:	20040ab0 	.word	0x20040ab0
 800c748:	20040ab8 	.word	0x20040ab8

0800c74c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c754:	2101      	movs	r1, #1
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7ff ff3a 	bl	800c5d0 <tcp_abandon>
}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d106      	bne.n	800c780 <tcp_update_rcv_ann_wnd+0x1c>
 800c772:	4b25      	ldr	r3, [pc, #148]	; (800c808 <tcp_update_rcv_ann_wnd+0xa4>)
 800c774:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c778:	4924      	ldr	r1, [pc, #144]	; (800c80c <tcp_update_rcv_ann_wnd+0xa8>)
 800c77a:	4825      	ldr	r0, [pc, #148]	; (800c810 <tcp_update_rcv_ann_wnd+0xac>)
 800c77c:	f008 fe50 	bl	8015420 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c788:	4413      	add	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c794:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c798:	bf28      	it	cs
 800c79a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c79e:	b292      	uxth	r2, r2
 800c7a0:	4413      	add	r3, r2
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	db08      	blt.n	800c7bc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	e020      	b.n	800c7fe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	dd03      	ble.n	800c7d2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c7d0:	e014      	b.n	800c7fc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7da:	1ad3      	subs	r3, r2, r3
 800c7dc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7e4:	d306      	bcc.n	800c7f4 <tcp_update_rcv_ann_wnd+0x90>
 800c7e6:	4b08      	ldr	r3, [pc, #32]	; (800c808 <tcp_update_rcv_ann_wnd+0xa4>)
 800c7e8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c7ec:	4909      	ldr	r1, [pc, #36]	; (800c814 <tcp_update_rcv_ann_wnd+0xb0>)
 800c7ee:	4808      	ldr	r0, [pc, #32]	; (800c810 <tcp_update_rcv_ann_wnd+0xac>)
 800c7f0:	f008 fe16 	bl	8015420 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c7fc:	2300      	movs	r3, #0
  }
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3710      	adds	r7, #16
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	08017500 	.word	0x08017500
 800c80c:	0801775c 	.word	0x0801775c
 800c810:	08017544 	.word	0x08017544
 800c814:	08017780 	.word	0x08017780

0800c818 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	460b      	mov	r3, r1
 800c822:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d107      	bne.n	800c83a <tcp_recved+0x22>
 800c82a:	4b1f      	ldr	r3, [pc, #124]	; (800c8a8 <tcp_recved+0x90>)
 800c82c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c830:	491e      	ldr	r1, [pc, #120]	; (800c8ac <tcp_recved+0x94>)
 800c832:	481f      	ldr	r0, [pc, #124]	; (800c8b0 <tcp_recved+0x98>)
 800c834:	f008 fdf4 	bl	8015420 <iprintf>
 800c838:	e032      	b.n	800c8a0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	7d1b      	ldrb	r3, [r3, #20]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d106      	bne.n	800c850 <tcp_recved+0x38>
 800c842:	4b19      	ldr	r3, [pc, #100]	; (800c8a8 <tcp_recved+0x90>)
 800c844:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c848:	491a      	ldr	r1, [pc, #104]	; (800c8b4 <tcp_recved+0x9c>)
 800c84a:	4819      	ldr	r0, [pc, #100]	; (800c8b0 <tcp_recved+0x98>)
 800c84c:	f008 fde8 	bl	8015420 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c854:	887b      	ldrh	r3, [r7, #2]
 800c856:	4413      	add	r3, r2
 800c858:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c85a:	89fb      	ldrh	r3, [r7, #14]
 800c85c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c860:	d804      	bhi.n	800c86c <tcp_recved+0x54>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c866:	89fa      	ldrh	r2, [r7, #14]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d204      	bcs.n	800c876 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c872:	851a      	strh	r2, [r3, #40]	; 0x28
 800c874:	e002      	b.n	800c87c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	89fa      	ldrh	r2, [r7, #14]
 800c87a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff ff71 	bl	800c764 <tcp_update_rcv_ann_wnd>
 800c882:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c88a:	d309      	bcc.n	800c8a0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	8b5b      	ldrh	r3, [r3, #26]
 800c890:	f043 0302 	orr.w	r3, r3, #2
 800c894:	b29a      	uxth	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f003 fe42 	bl	8010524 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	08017500 	.word	0x08017500
 800c8ac:	0801779c 	.word	0x0801779c
 800c8b0:	08017544 	.word	0x08017544
 800c8b4:	080177b4 	.word	0x080177b4

0800c8b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c8b8:	b5b0      	push	{r4, r5, r7, lr}
 800c8ba:	b090      	sub	sp, #64	; 0x40
 800c8bc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c8c4:	4b94      	ldr	r3, [pc, #592]	; (800cb18 <tcp_slowtmr+0x260>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	4a93      	ldr	r2, [pc, #588]	; (800cb18 <tcp_slowtmr+0x260>)
 800c8cc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c8ce:	4b93      	ldr	r3, [pc, #588]	; (800cb1c <tcp_slowtmr+0x264>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	4b91      	ldr	r3, [pc, #580]	; (800cb1c <tcp_slowtmr+0x264>)
 800c8d8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c8de:	4b90      	ldr	r3, [pc, #576]	; (800cb20 <tcp_slowtmr+0x268>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c8e4:	e29d      	b.n	800ce22 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	7d1b      	ldrb	r3, [r3, #20]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <tcp_slowtmr+0x44>
 800c8ee:	4b8d      	ldr	r3, [pc, #564]	; (800cb24 <tcp_slowtmr+0x26c>)
 800c8f0:	f240 42be 	movw	r2, #1214	; 0x4be
 800c8f4:	498c      	ldr	r1, [pc, #560]	; (800cb28 <tcp_slowtmr+0x270>)
 800c8f6:	488d      	ldr	r0, [pc, #564]	; (800cb2c <tcp_slowtmr+0x274>)
 800c8f8:	f008 fd92 	bl	8015420 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	7d1b      	ldrb	r3, [r3, #20]
 800c900:	2b01      	cmp	r3, #1
 800c902:	d106      	bne.n	800c912 <tcp_slowtmr+0x5a>
 800c904:	4b87      	ldr	r3, [pc, #540]	; (800cb24 <tcp_slowtmr+0x26c>)
 800c906:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c90a:	4989      	ldr	r1, [pc, #548]	; (800cb30 <tcp_slowtmr+0x278>)
 800c90c:	4887      	ldr	r0, [pc, #540]	; (800cb2c <tcp_slowtmr+0x274>)
 800c90e:	f008 fd87 	bl	8015420 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	7d1b      	ldrb	r3, [r3, #20]
 800c916:	2b0a      	cmp	r3, #10
 800c918:	d106      	bne.n	800c928 <tcp_slowtmr+0x70>
 800c91a:	4b82      	ldr	r3, [pc, #520]	; (800cb24 <tcp_slowtmr+0x26c>)
 800c91c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c920:	4984      	ldr	r1, [pc, #528]	; (800cb34 <tcp_slowtmr+0x27c>)
 800c922:	4882      	ldr	r0, [pc, #520]	; (800cb2c <tcp_slowtmr+0x274>)
 800c924:	f008 fd7c 	bl	8015420 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92a:	7f9a      	ldrb	r2, [r3, #30]
 800c92c:	4b7b      	ldr	r3, [pc, #492]	; (800cb1c <tcp_slowtmr+0x264>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	429a      	cmp	r2, r3
 800c932:	d105      	bne.n	800c940 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c93e:	e270      	b.n	800ce22 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c940:	4b76      	ldr	r3, [pc, #472]	; (800cb1c <tcp_slowtmr+0x264>)
 800c942:	781a      	ldrb	r2, [r3, #0]
 800c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c946:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c94e:	2300      	movs	r3, #0
 800c950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	7d1b      	ldrb	r3, [r3, #20]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d10a      	bne.n	800c972 <tcp_slowtmr+0xba>
 800c95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c962:	2b05      	cmp	r3, #5
 800c964:	d905      	bls.n	800c972 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c96a:	3301      	adds	r3, #1
 800c96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c970:	e11e      	b.n	800cbb0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c978:	2b0b      	cmp	r3, #11
 800c97a:	d905      	bls.n	800c988 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c97c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c980:	3301      	adds	r3, #1
 800c982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c986:	e113      	b.n	800cbb0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d075      	beq.n	800ca7e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c996:	2b00      	cmp	r3, #0
 800c998:	d006      	beq.n	800c9a8 <tcp_slowtmr+0xf0>
 800c99a:	4b62      	ldr	r3, [pc, #392]	; (800cb24 <tcp_slowtmr+0x26c>)
 800c99c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c9a0:	4965      	ldr	r1, [pc, #404]	; (800cb38 <tcp_slowtmr+0x280>)
 800c9a2:	4862      	ldr	r0, [pc, #392]	; (800cb2c <tcp_slowtmr+0x274>)
 800c9a4:	f008 fd3c 	bl	8015420 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d106      	bne.n	800c9be <tcp_slowtmr+0x106>
 800c9b0:	4b5c      	ldr	r3, [pc, #368]	; (800cb24 <tcp_slowtmr+0x26c>)
 800c9b2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c9b6:	4961      	ldr	r1, [pc, #388]	; (800cb3c <tcp_slowtmr+0x284>)
 800c9b8:	485c      	ldr	r0, [pc, #368]	; (800cb2c <tcp_slowtmr+0x274>)
 800c9ba:	f008 fd31 	bl	8015420 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c9c4:	2b0b      	cmp	r3, #11
 800c9c6:	d905      	bls.n	800c9d4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9d2:	e0ed      	b.n	800cbb0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	4a58      	ldr	r2, [pc, #352]	; (800cb40 <tcp_slowtmr+0x288>)
 800c9de:	5cd3      	ldrb	r3, [r2, r3]
 800c9e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c9e8:	7c7a      	ldrb	r2, [r7, #17]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d907      	bls.n	800c9fe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ca04:	7c7a      	ldrb	r2, [r7, #17]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	f200 80d2 	bhi.w	800cbb0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d108      	bne.n	800ca2c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ca1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca1c:	f004 fc2a 	bl	8011274 <tcp_zero_window_probe>
 800ca20:	4603      	mov	r3, r0
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d014      	beq.n	800ca50 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ca26:	2300      	movs	r3, #0
 800ca28:	623b      	str	r3, [r7, #32]
 800ca2a:	e011      	b.n	800ca50 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ca32:	4619      	mov	r1, r3
 800ca34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca36:	f003 faef 	bl	8010018 <tcp_split_unsent_seg>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d107      	bne.n	800ca50 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ca40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca42:	f003 fd6f 	bl	8010524 <tcp_output>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d101      	bne.n	800ca50 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f000 80ac 	beq.w	800cbb0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca66:	2b06      	cmp	r3, #6
 800ca68:	f200 80a2 	bhi.w	800cbb0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca72:	3301      	adds	r3, #1
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ca7c:	e098      	b.n	800cbb0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ca7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	db0f      	blt.n	800caa8 <tcp_slowtmr+0x1f0>
 800ca88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ca8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d008      	beq.n	800caa8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	3301      	adds	r3, #1
 800caa0:	b29b      	uxth	r3, r3
 800caa2:	b21a      	sxth	r2, r3
 800caa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800caae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cab4:	429a      	cmp	r2, r3
 800cab6:	db7b      	blt.n	800cbb0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caba:	f004 f825 	bl	8010b08 <tcp_rexmit_rto_prepare>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d007      	beq.n	800cad4 <tcp_slowtmr+0x21c>
 800cac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d171      	bne.n	800cbb0 <tcp_slowtmr+0x2f8>
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d06d      	beq.n	800cbb0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	7d1b      	ldrb	r3, [r3, #20]
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d03a      	beq.n	800cb52 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cae2:	2b0c      	cmp	r3, #12
 800cae4:	bf28      	it	cs
 800cae6:	230c      	movcs	r3, #12
 800cae8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800caf0:	10db      	asrs	r3, r3, #3
 800caf2:	b21b      	sxth	r3, r3
 800caf4:	461a      	mov	r2, r3
 800caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cafc:	4413      	add	r3, r2
 800cafe:	7efa      	ldrb	r2, [r7, #27]
 800cb00:	4910      	ldr	r1, [pc, #64]	; (800cb44 <tcp_slowtmr+0x28c>)
 800cb02:	5c8a      	ldrb	r2, [r1, r2]
 800cb04:	4093      	lsls	r3, r2
 800cb06:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	dc1a      	bgt.n	800cb48 <tcp_slowtmr+0x290>
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	b21a      	sxth	r2, r3
 800cb16:	e019      	b.n	800cb4c <tcp_slowtmr+0x294>
 800cb18:	20040aa4 	.word	0x20040aa4
 800cb1c:	20040aba 	.word	0x20040aba
 800cb20:	20040ab0 	.word	0x20040ab0
 800cb24:	08017500 	.word	0x08017500
 800cb28:	08017844 	.word	0x08017844
 800cb2c:	08017544 	.word	0x08017544
 800cb30:	08017870 	.word	0x08017870
 800cb34:	0801789c 	.word	0x0801789c
 800cb38:	080178cc 	.word	0x080178cc
 800cb3c:	08017900 	.word	0x08017900
 800cb40:	08019654 	.word	0x08019654
 800cb44:	08019644 	.word	0x08019644
 800cb48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb54:	2200      	movs	r2, #0
 800cb56:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cb64:	4293      	cmp	r3, r2
 800cb66:	bf28      	it	cs
 800cb68:	4613      	movcs	r3, r2
 800cb6a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cb6c:	8a7b      	ldrh	r3, [r7, #18]
 800cb6e:	085b      	lsrs	r3, r3, #1
 800cb70:	b29a      	uxth	r2, r3
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d206      	bcs.n	800cb98 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	2200      	movs	r2, #0
 800cba6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cbaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbac:	f004 f81c 	bl	8010be8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb2:	7d1b      	ldrb	r3, [r3, #20]
 800cbb4:	2b06      	cmp	r3, #6
 800cbb6:	d111      	bne.n	800cbdc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbba:	8b5b      	ldrh	r3, [r3, #26]
 800cbbc:	f003 0310 	and.w	r3, r3, #16
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00b      	beq.n	800cbdc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbc4:	4b9c      	ldr	r3, [pc, #624]	; (800ce38 <tcp_slowtmr+0x580>)
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	6a1b      	ldr	r3, [r3, #32]
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	2b28      	cmp	r3, #40	; 0x28
 800cbd0:	d904      	bls.n	800cbdc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cbd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	7a5b      	ldrb	r3, [r3, #9]
 800cbe0:	f003 0308 	and.w	r3, r3, #8
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d04a      	beq.n	800cc7e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cbec:	2b04      	cmp	r3, #4
 800cbee:	d003      	beq.n	800cbf8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cbf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cbf4:	2b07      	cmp	r3, #7
 800cbf6:	d142      	bne.n	800cc7e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbf8:	4b8f      	ldr	r3, [pc, #572]	; (800ce38 <tcp_slowtmr+0x580>)
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfe:	6a1b      	ldr	r3, [r3, #32]
 800cc00:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cc08:	4b8c      	ldr	r3, [pc, #560]	; (800ce3c <tcp_slowtmr+0x584>)
 800cc0a:	440b      	add	r3, r1
 800cc0c:	498c      	ldr	r1, [pc, #560]	; (800ce40 <tcp_slowtmr+0x588>)
 800cc0e:	fba1 1303 	umull	r1, r3, r1, r3
 800cc12:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d90a      	bls.n	800cc2e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cc22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc26:	3301      	adds	r3, #1
 800cc28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cc2c:	e027      	b.n	800cc7e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc2e:	4b82      	ldr	r3, [pc, #520]	; (800ce38 <tcp_slowtmr+0x580>)
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	6a1b      	ldr	r3, [r3, #32]
 800cc36:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cc44:	4618      	mov	r0, r3
 800cc46:	4b7f      	ldr	r3, [pc, #508]	; (800ce44 <tcp_slowtmr+0x58c>)
 800cc48:	fb00 f303 	mul.w	r3, r0, r3
 800cc4c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cc4e:	497c      	ldr	r1, [pc, #496]	; (800ce40 <tcp_slowtmr+0x588>)
 800cc50:	fba1 1303 	umull	r1, r3, r1, r3
 800cc54:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d911      	bls.n	800cc7e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cc5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc5c:	f004 faca 	bl	80111f4 <tcp_keepalive>
 800cc60:	4603      	mov	r3, r0
 800cc62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cc66:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d107      	bne.n	800cc7e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc70:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cc74:	3301      	adds	r3, #1
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d011      	beq.n	800ccaa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cc86:	4b6c      	ldr	r3, [pc, #432]	; (800ce38 <tcp_slowtmr+0x580>)
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8c:	6a1b      	ldr	r3, [r3, #32]
 800cc8e:	1ad2      	subs	r2, r2, r3
 800cc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc92:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cc96:	4619      	mov	r1, r3
 800cc98:	460b      	mov	r3, r1
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	440b      	add	r3, r1
 800cc9e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d302      	bcc.n	800ccaa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cca6:	f000 fddd 	bl	800d864 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ccaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccac:	7d1b      	ldrb	r3, [r3, #20]
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d10b      	bne.n	800ccca <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccb2:	4b61      	ldr	r3, [pc, #388]	; (800ce38 <tcp_slowtmr+0x580>)
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	6a1b      	ldr	r3, [r3, #32]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	2b28      	cmp	r3, #40	; 0x28
 800ccbe:	d904      	bls.n	800ccca <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ccc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	7d1b      	ldrb	r3, [r3, #20]
 800ccce:	2b09      	cmp	r3, #9
 800ccd0:	d10b      	bne.n	800ccea <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ccd2:	4b59      	ldr	r3, [pc, #356]	; (800ce38 <tcp_slowtmr+0x580>)
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	2bf0      	cmp	r3, #240	; 0xf0
 800ccde:	d904      	bls.n	800ccea <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cce4:	3301      	adds	r3, #1
 800cce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ccea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d060      	beq.n	800cdb4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ccf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccf8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ccfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccfc:	f000 fbfe 	bl	800d4fc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d010      	beq.n	800cd28 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cd06:	4b50      	ldr	r3, [pc, #320]	; (800ce48 <tcp_slowtmr+0x590>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d106      	bne.n	800cd1e <tcp_slowtmr+0x466>
 800cd10:	4b4e      	ldr	r3, [pc, #312]	; (800ce4c <tcp_slowtmr+0x594>)
 800cd12:	f240 526d 	movw	r2, #1389	; 0x56d
 800cd16:	494e      	ldr	r1, [pc, #312]	; (800ce50 <tcp_slowtmr+0x598>)
 800cd18:	484e      	ldr	r0, [pc, #312]	; (800ce54 <tcp_slowtmr+0x59c>)
 800cd1a:	f008 fb81 	bl	8015420 <iprintf>
        prev->next = pcb->next;
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	68da      	ldr	r2, [r3, #12]
 800cd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd24:	60da      	str	r2, [r3, #12]
 800cd26:	e00f      	b.n	800cd48 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cd28:	4b47      	ldr	r3, [pc, #284]	; (800ce48 <tcp_slowtmr+0x590>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d006      	beq.n	800cd40 <tcp_slowtmr+0x488>
 800cd32:	4b46      	ldr	r3, [pc, #280]	; (800ce4c <tcp_slowtmr+0x594>)
 800cd34:	f240 5271 	movw	r2, #1393	; 0x571
 800cd38:	4947      	ldr	r1, [pc, #284]	; (800ce58 <tcp_slowtmr+0x5a0>)
 800cd3a:	4846      	ldr	r0, [pc, #280]	; (800ce54 <tcp_slowtmr+0x59c>)
 800cd3c:	f008 fb70 	bl	8015420 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	4a40      	ldr	r2, [pc, #256]	; (800ce48 <tcp_slowtmr+0x590>)
 800cd46:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cd48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d013      	beq.n	800cd78 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd52:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cd58:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd60:	8ad2      	ldrh	r2, [r2, #22]
 800cd62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd64:	8b09      	ldrh	r1, [r1, #24]
 800cd66:	9102      	str	r1, [sp, #8]
 800cd68:	9201      	str	r2, [sp, #4]
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	462b      	mov	r3, r5
 800cd6e:	4622      	mov	r2, r4
 800cd70:	4601      	mov	r1, r0
 800cd72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd74:	f004 f98a 	bl	801108c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd80:	7d1b      	ldrb	r3, [r3, #20]
 800cd82:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cd8e:	6838      	ldr	r0, [r7, #0]
 800cd90:	f7ff f9f4 	bl	800c17c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cd94:	4b31      	ldr	r3, [pc, #196]	; (800ce5c <tcp_slowtmr+0x5a4>)
 800cd96:	2200      	movs	r2, #0
 800cd98:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d004      	beq.n	800cdaa <tcp_slowtmr+0x4f2>
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f06f 010c 	mvn.w	r1, #12
 800cda6:	68b8      	ldr	r0, [r7, #8]
 800cda8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cdaa:	4b2c      	ldr	r3, [pc, #176]	; (800ce5c <tcp_slowtmr+0x5a4>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d037      	beq.n	800ce22 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800cdb2:	e592      	b.n	800c8da <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc0:	7f1b      	ldrb	r3, [r3, #28]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	b2da      	uxtb	r2, r3
 800cdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdcc:	7f1a      	ldrb	r2, [r3, #28]
 800cdce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd0:	7f5b      	ldrb	r3, [r3, #29]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d325      	bcc.n	800ce22 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdd8:	2200      	movs	r2, #0
 800cdda:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cddc:	4b1f      	ldr	r3, [pc, #124]	; (800ce5c <tcp_slowtmr+0x5a4>)
 800cdde:	2200      	movs	r2, #0
 800cde0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d00b      	beq.n	800ce04 <tcp_slowtmr+0x54c>
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cdf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdf4:	6912      	ldr	r2, [r2, #16]
 800cdf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	4798      	blx	r3
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ce02:	e002      	b.n	800ce0a <tcp_slowtmr+0x552>
 800ce04:	2300      	movs	r3, #0
 800ce06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ce0a:	4b14      	ldr	r3, [pc, #80]	; (800ce5c <tcp_slowtmr+0x5a4>)
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d000      	beq.n	800ce14 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ce12:	e562      	b.n	800c8da <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ce14:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d102      	bne.n	800ce22 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ce1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce1e:	f003 fb81 	bl	8010524 <tcp_output>
  while (pcb != NULL) {
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f47f ad5e 	bne.w	800c8e6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ce2e:	4b0c      	ldr	r3, [pc, #48]	; (800ce60 <tcp_slowtmr+0x5a8>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ce34:	e069      	b.n	800cf0a <tcp_slowtmr+0x652>
 800ce36:	bf00      	nop
 800ce38:	20040aa4 	.word	0x20040aa4
 800ce3c:	000a4cb8 	.word	0x000a4cb8
 800ce40:	10624dd3 	.word	0x10624dd3
 800ce44:	000124f8 	.word	0x000124f8
 800ce48:	20040ab0 	.word	0x20040ab0
 800ce4c:	08017500 	.word	0x08017500
 800ce50:	08017938 	.word	0x08017938
 800ce54:	08017544 	.word	0x08017544
 800ce58:	08017964 	.word	0x08017964
 800ce5c:	20040ab8 	.word	0x20040ab8
 800ce60:	20040ab4 	.word	0x20040ab4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ce64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce66:	7d1b      	ldrb	r3, [r3, #20]
 800ce68:	2b0a      	cmp	r3, #10
 800ce6a:	d006      	beq.n	800ce7a <tcp_slowtmr+0x5c2>
 800ce6c:	4b2b      	ldr	r3, [pc, #172]	; (800cf1c <tcp_slowtmr+0x664>)
 800ce6e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ce72:	492b      	ldr	r1, [pc, #172]	; (800cf20 <tcp_slowtmr+0x668>)
 800ce74:	482b      	ldr	r0, [pc, #172]	; (800cf24 <tcp_slowtmr+0x66c>)
 800ce76:	f008 fad3 	bl	8015420 <iprintf>
    pcb_remove = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ce80:	4b29      	ldr	r3, [pc, #164]	; (800cf28 <tcp_slowtmr+0x670>)
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce86:	6a1b      	ldr	r3, [r3, #32]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	2bf0      	cmp	r3, #240	; 0xf0
 800ce8c:	d904      	bls.n	800ce98 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ce8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce92:	3301      	adds	r3, #1
 800ce94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d02f      	beq.n	800cf00 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cea2:	f000 fb2b 	bl	800d4fc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d010      	beq.n	800cece <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ceac:	4b1f      	ldr	r3, [pc, #124]	; (800cf2c <tcp_slowtmr+0x674>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d106      	bne.n	800cec4 <tcp_slowtmr+0x60c>
 800ceb6:	4b19      	ldr	r3, [pc, #100]	; (800cf1c <tcp_slowtmr+0x664>)
 800ceb8:	f240 52af 	movw	r2, #1455	; 0x5af
 800cebc:	491c      	ldr	r1, [pc, #112]	; (800cf30 <tcp_slowtmr+0x678>)
 800cebe:	4819      	ldr	r0, [pc, #100]	; (800cf24 <tcp_slowtmr+0x66c>)
 800cec0:	f008 faae 	bl	8015420 <iprintf>
        prev->next = pcb->next;
 800cec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec6:	68da      	ldr	r2, [r3, #12]
 800cec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceca:	60da      	str	r2, [r3, #12]
 800cecc:	e00f      	b.n	800ceee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cece:	4b17      	ldr	r3, [pc, #92]	; (800cf2c <tcp_slowtmr+0x674>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d006      	beq.n	800cee6 <tcp_slowtmr+0x62e>
 800ced8:	4b10      	ldr	r3, [pc, #64]	; (800cf1c <tcp_slowtmr+0x664>)
 800ceda:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cede:	4915      	ldr	r1, [pc, #84]	; (800cf34 <tcp_slowtmr+0x67c>)
 800cee0:	4810      	ldr	r0, [pc, #64]	; (800cf24 <tcp_slowtmr+0x66c>)
 800cee2:	f008 fa9d 	bl	8015420 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	4a10      	ldr	r2, [pc, #64]	; (800cf2c <tcp_slowtmr+0x674>)
 800ceec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cef8:	69f8      	ldr	r0, [r7, #28]
 800cefa:	f7ff f93f 	bl	800c17c <tcp_free>
 800cefe:	e004      	b.n	800cf0a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cf00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	68db      	ldr	r3, [r3, #12]
 800cf08:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d1a9      	bne.n	800ce64 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cf10:	bf00      	nop
 800cf12:	bf00      	nop
 800cf14:	3730      	adds	r7, #48	; 0x30
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bdb0      	pop	{r4, r5, r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	08017500 	.word	0x08017500
 800cf20:	08017990 	.word	0x08017990
 800cf24:	08017544 	.word	0x08017544
 800cf28:	20040aa4 	.word	0x20040aa4
 800cf2c:	20040ab4 	.word	0x20040ab4
 800cf30:	080179c0 	.word	0x080179c0
 800cf34:	080179e8 	.word	0x080179e8

0800cf38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cf3e:	4b2d      	ldr	r3, [pc, #180]	; (800cff4 <tcp_fasttmr+0xbc>)
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	3301      	adds	r3, #1
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	4b2b      	ldr	r3, [pc, #172]	; (800cff4 <tcp_fasttmr+0xbc>)
 800cf48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cf4a:	4b2b      	ldr	r3, [pc, #172]	; (800cff8 <tcp_fasttmr+0xc0>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cf50:	e048      	b.n	800cfe4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	7f9a      	ldrb	r2, [r3, #30]
 800cf56:	4b27      	ldr	r3, [pc, #156]	; (800cff4 <tcp_fasttmr+0xbc>)
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d03f      	beq.n	800cfde <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cf5e:	4b25      	ldr	r3, [pc, #148]	; (800cff4 <tcp_fasttmr+0xbc>)
 800cf60:	781a      	ldrb	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	8b5b      	ldrh	r3, [r3, #26]
 800cf6a:	f003 0301 	and.w	r3, r3, #1
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d010      	beq.n	800cf94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	8b5b      	ldrh	r3, [r3, #26]
 800cf76:	f043 0302 	orr.w	r3, r3, #2
 800cf7a:	b29a      	uxth	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f003 facf 	bl	8010524 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	8b5b      	ldrh	r3, [r3, #26]
 800cf8a:	f023 0303 	bic.w	r3, r3, #3
 800cf8e:	b29a      	uxth	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	8b5b      	ldrh	r3, [r3, #26]
 800cf98:	f003 0308 	and.w	r3, r3, #8
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d009      	beq.n	800cfb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	8b5b      	ldrh	r3, [r3, #26]
 800cfa4:	f023 0308 	bic.w	r3, r3, #8
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff fa78 	bl	800c4a4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	68db      	ldr	r3, [r3, #12]
 800cfb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cfc2:	4b0e      	ldr	r3, [pc, #56]	; (800cffc <tcp_fasttmr+0xc4>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f819 	bl	800d000 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cfce:	4b0b      	ldr	r3, [pc, #44]	; (800cffc <tcp_fasttmr+0xc4>)
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d000      	beq.n	800cfd8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cfd6:	e7b8      	b.n	800cf4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	607b      	str	r3, [r7, #4]
 800cfdc:	e002      	b.n	800cfe4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d1b3      	bne.n	800cf52 <tcp_fasttmr+0x1a>
    }
  }
}
 800cfea:	bf00      	nop
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	20040aba 	.word	0x20040aba
 800cff8:	20040ab0 	.word	0x20040ab0
 800cffc:	20040ab8 	.word	0x20040ab8

0800d000 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d000:	b590      	push	{r4, r7, lr}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d109      	bne.n	800d022 <tcp_process_refused_data+0x22>
 800d00e:	4b37      	ldr	r3, [pc, #220]	; (800d0ec <tcp_process_refused_data+0xec>)
 800d010:	f240 6209 	movw	r2, #1545	; 0x609
 800d014:	4936      	ldr	r1, [pc, #216]	; (800d0f0 <tcp_process_refused_data+0xf0>)
 800d016:	4837      	ldr	r0, [pc, #220]	; (800d0f4 <tcp_process_refused_data+0xf4>)
 800d018:	f008 fa02 	bl	8015420 <iprintf>
 800d01c:	f06f 030f 	mvn.w	r3, #15
 800d020:	e060      	b.n	800d0e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d026:	7b5b      	ldrb	r3, [r3, #13]
 800d028:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d02e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2200      	movs	r2, #0
 800d034:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <tcp_process_refused_data+0x58>
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6918      	ldr	r0, [r3, #16]
 800d04a:	2300      	movs	r3, #0
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	6879      	ldr	r1, [r7, #4]
 800d050:	47a0      	blx	r4
 800d052:	4603      	mov	r3, r0
 800d054:	73fb      	strb	r3, [r7, #15]
 800d056:	e007      	b.n	800d068 <tcp_process_refused_data+0x68>
 800d058:	2300      	movs	r3, #0
 800d05a:	68ba      	ldr	r2, [r7, #8]
 800d05c:	6879      	ldr	r1, [r7, #4]
 800d05e:	2000      	movs	r0, #0
 800d060:	f000 f8a4 	bl	800d1ac <tcp_recv_null>
 800d064:	4603      	mov	r3, r0
 800d066:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d12a      	bne.n	800d0c6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d070:	7bbb      	ldrb	r3, [r7, #14]
 800d072:	f003 0320 	and.w	r3, r3, #32
 800d076:	2b00      	cmp	r3, #0
 800d078:	d033      	beq.n	800d0e2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d07e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d082:	d005      	beq.n	800d090 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d088:	3301      	adds	r3, #1
 800d08a:	b29a      	uxth	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d096:	2b00      	cmp	r3, #0
 800d098:	d00b      	beq.n	800d0b2 <tcp_process_refused_data+0xb2>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6918      	ldr	r0, [r3, #16]
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	6879      	ldr	r1, [r7, #4]
 800d0aa:	47a0      	blx	r4
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	73fb      	strb	r3, [r7, #15]
 800d0b0:	e001      	b.n	800d0b6 <tcp_process_refused_data+0xb6>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ba:	f113 0f0d 	cmn.w	r3, #13
 800d0be:	d110      	bne.n	800d0e2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d0c0:	f06f 030c 	mvn.w	r3, #12
 800d0c4:	e00e      	b.n	800d0e4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0ca:	f113 0f0d 	cmn.w	r3, #13
 800d0ce:	d102      	bne.n	800d0d6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d0d0:	f06f 030c 	mvn.w	r3, #12
 800d0d4:	e006      	b.n	800d0e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d0dc:	f06f 0304 	mvn.w	r3, #4
 800d0e0:	e000      	b.n	800d0e4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3714      	adds	r7, #20
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd90      	pop	{r4, r7, pc}
 800d0ec:	08017500 	.word	0x08017500
 800d0f0:	08017a10 	.word	0x08017a10
 800d0f4:	08017544 	.word	0x08017544

0800d0f8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d100:	e007      	b.n	800d112 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 f80a 	bl	800d122 <tcp_seg_free>
    seg = next;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1f4      	bne.n	800d102 <tcp_segs_free+0xa>
  }
}
 800d118:	bf00      	nop
 800d11a:	bf00      	nop
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b082      	sub	sp, #8
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00c      	beq.n	800d14a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d004      	beq.n	800d142 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fe fc73 	bl	800ba28 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	2003      	movs	r0, #3
 800d146:	f7fd fdcd 	bl	800ace4 <memp_free>
  }
}
 800d14a:	bf00      	nop
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
	...

0800d154 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d106      	bne.n	800d170 <tcp_seg_copy+0x1c>
 800d162:	4b0f      	ldr	r3, [pc, #60]	; (800d1a0 <tcp_seg_copy+0x4c>)
 800d164:	f240 6282 	movw	r2, #1666	; 0x682
 800d168:	490e      	ldr	r1, [pc, #56]	; (800d1a4 <tcp_seg_copy+0x50>)
 800d16a:	480f      	ldr	r0, [pc, #60]	; (800d1a8 <tcp_seg_copy+0x54>)
 800d16c:	f008 f958 	bl	8015420 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d170:	2003      	movs	r0, #3
 800d172:	f7fd fd41 	bl	800abf8 <memp_malloc>
 800d176:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <tcp_seg_copy+0x2e>
    return NULL;
 800d17e:	2300      	movs	r3, #0
 800d180:	e00a      	b.n	800d198 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d182:	2210      	movs	r2, #16
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f008 f885 	bl	8015296 <memcpy>
  pbuf_ref(cseg->p);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	4618      	mov	r0, r3
 800d192:	f7fe fcef 	bl	800bb74 <pbuf_ref>
  return cseg;
 800d196:	68fb      	ldr	r3, [r7, #12]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3710      	adds	r7, #16
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	08017500 	.word	0x08017500
 800d1a4:	08017a54 	.word	0x08017a54
 800d1a8:	08017544 	.word	0x08017544

0800d1ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d109      	bne.n	800d1d4 <tcp_recv_null+0x28>
 800d1c0:	4b12      	ldr	r3, [pc, #72]	; (800d20c <tcp_recv_null+0x60>)
 800d1c2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d1c6:	4912      	ldr	r1, [pc, #72]	; (800d210 <tcp_recv_null+0x64>)
 800d1c8:	4812      	ldr	r0, [pc, #72]	; (800d214 <tcp_recv_null+0x68>)
 800d1ca:	f008 f929 	bl	8015420 <iprintf>
 800d1ce:	f06f 030f 	mvn.w	r3, #15
 800d1d2:	e016      	b.n	800d202 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d009      	beq.n	800d1ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	891b      	ldrh	r3, [r3, #8]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	68b8      	ldr	r0, [r7, #8]
 800d1e2:	f7ff fb19 	bl	800c818 <tcp_recved>
    pbuf_free(p);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7fe fc1e 	bl	800ba28 <pbuf_free>
 800d1ec:	e008      	b.n	800d200 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d1ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d104      	bne.n	800d200 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d1f6:	68b8      	ldr	r0, [r7, #8]
 800d1f8:	f7ff f9be 	bl	800c578 <tcp_close>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	e000      	b.n	800d202 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3710      	adds	r7, #16
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	08017500 	.word	0x08017500
 800d210:	08017a70 	.word	0x08017a70
 800d214:	08017544 	.word	0x08017544

0800d218 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b086      	sub	sp, #24
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d226:	2b00      	cmp	r3, #0
 800d228:	db01      	blt.n	800d22e <tcp_kill_prio+0x16>
 800d22a:	79fb      	ldrb	r3, [r7, #7]
 800d22c:	e000      	b.n	800d230 <tcp_kill_prio+0x18>
 800d22e:	237f      	movs	r3, #127	; 0x7f
 800d230:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d232:	7afb      	ldrb	r3, [r7, #11]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d034      	beq.n	800d2a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d238:	7afb      	ldrb	r3, [r7, #11]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d242:	2300      	movs	r3, #0
 800d244:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d246:	4b19      	ldr	r3, [pc, #100]	; (800d2ac <tcp_kill_prio+0x94>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	617b      	str	r3, [r7, #20]
 800d24c:	e01f      	b.n	800d28e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	7d5b      	ldrb	r3, [r3, #21]
 800d252:	7afa      	ldrb	r2, [r7, #11]
 800d254:	429a      	cmp	r2, r3
 800d256:	d80c      	bhi.n	800d272 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d25c:	7afa      	ldrb	r2, [r7, #11]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d112      	bne.n	800d288 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d262:	4b13      	ldr	r3, [pc, #76]	; (800d2b0 <tcp_kill_prio+0x98>)
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	6a1b      	ldr	r3, [r3, #32]
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d80a      	bhi.n	800d288 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d272:	4b0f      	ldr	r3, [pc, #60]	; (800d2b0 <tcp_kill_prio+0x98>)
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	1ad3      	subs	r3, r2, r3
 800d27c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	7d5b      	ldrb	r3, [r3, #21]
 800d286:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	68db      	ldr	r3, [r3, #12]
 800d28c:	617b      	str	r3, [r7, #20]
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1dc      	bne.n	800d24e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d004      	beq.n	800d2a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d29a:	6938      	ldr	r0, [r7, #16]
 800d29c:	f7ff fa56 	bl	800c74c <tcp_abort>
 800d2a0:	e000      	b.n	800d2a4 <tcp_kill_prio+0x8c>
    return;
 800d2a2:	bf00      	nop
  }
}
 800d2a4:	3718      	adds	r7, #24
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	20040ab0 	.word	0x20040ab0
 800d2b0:	20040aa4 	.word	0x20040aa4

0800d2b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d2be:	79fb      	ldrb	r3, [r7, #7]
 800d2c0:	2b08      	cmp	r3, #8
 800d2c2:	d009      	beq.n	800d2d8 <tcp_kill_state+0x24>
 800d2c4:	79fb      	ldrb	r3, [r7, #7]
 800d2c6:	2b09      	cmp	r3, #9
 800d2c8:	d006      	beq.n	800d2d8 <tcp_kill_state+0x24>
 800d2ca:	4b1a      	ldr	r3, [pc, #104]	; (800d334 <tcp_kill_state+0x80>)
 800d2cc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d2d0:	4919      	ldr	r1, [pc, #100]	; (800d338 <tcp_kill_state+0x84>)
 800d2d2:	481a      	ldr	r0, [pc, #104]	; (800d33c <tcp_kill_state+0x88>)
 800d2d4:	f008 f8a4 	bl	8015420 <iprintf>

  inactivity = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2e0:	4b17      	ldr	r3, [pc, #92]	; (800d340 <tcp_kill_state+0x8c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	617b      	str	r3, [r7, #20]
 800d2e6:	e017      	b.n	800d318 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	7d1b      	ldrb	r3, [r3, #20]
 800d2ec:	79fa      	ldrb	r2, [r7, #7]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d10f      	bne.n	800d312 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d2f2:	4b14      	ldr	r3, [pc, #80]	; (800d344 <tcp_kill_state+0x90>)
 800d2f4:	681a      	ldr	r2, [r3, #0]
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d807      	bhi.n	800d312 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d302:	4b10      	ldr	r3, [pc, #64]	; (800d344 <tcp_kill_state+0x90>)
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	6a1b      	ldr	r3, [r3, #32]
 800d30a:	1ad3      	subs	r3, r2, r3
 800d30c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d30e:	697b      	ldr	r3, [r7, #20]
 800d310:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	617b      	str	r3, [r7, #20]
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e4      	bne.n	800d2e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d003      	beq.n	800d32c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d324:	2100      	movs	r1, #0
 800d326:	6938      	ldr	r0, [r7, #16]
 800d328:	f7ff f952 	bl	800c5d0 <tcp_abandon>
  }
}
 800d32c:	bf00      	nop
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	08017500 	.word	0x08017500
 800d338:	08017a8c 	.word	0x08017a8c
 800d33c:	08017544 	.word	0x08017544
 800d340:	20040ab0 	.word	0x20040ab0
 800d344:	20040aa4 	.word	0x20040aa4

0800d348 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d352:	2300      	movs	r3, #0
 800d354:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d356:	4b12      	ldr	r3, [pc, #72]	; (800d3a0 <tcp_kill_timewait+0x58>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	60fb      	str	r3, [r7, #12]
 800d35c:	e012      	b.n	800d384 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d35e:	4b11      	ldr	r3, [pc, #68]	; (800d3a4 <tcp_kill_timewait+0x5c>)
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d807      	bhi.n	800d37e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d36e:	4b0d      	ldr	r3, [pc, #52]	; (800d3a4 <tcp_kill_timewait+0x5c>)
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	1ad3      	subs	r3, r2, r3
 800d378:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	60fb      	str	r3, [r7, #12]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d1e9      	bne.n	800d35e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d390:	68b8      	ldr	r0, [r7, #8]
 800d392:	f7ff f9db 	bl	800c74c <tcp_abort>
  }
}
 800d396:	bf00      	nop
 800d398:	3710      	adds	r7, #16
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20040ab4 	.word	0x20040ab4
 800d3a4:	20040aa4 	.word	0x20040aa4

0800d3a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d3ae:	4b10      	ldr	r3, [pc, #64]	; (800d3f0 <tcp_handle_closepend+0x48>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d3b4:	e014      	b.n	800d3e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	8b5b      	ldrh	r3, [r3, #26]
 800d3c0:	f003 0308 	and.w	r3, r3, #8
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d009      	beq.n	800d3dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	8b5b      	ldrh	r3, [r3, #26]
 800d3cc:	f023 0308 	bic.w	r3, r3, #8
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7ff f864 	bl	800c4a4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1e7      	bne.n	800d3b6 <tcp_handle_closepend+0xe>
  }
}
 800d3e6:	bf00      	nop
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	20040ab0 	.word	0x20040ab0

0800d3f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d3fe:	2001      	movs	r0, #1
 800d400:	f7fd fbfa 	bl	800abf8 <memp_malloc>
 800d404:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d126      	bne.n	800d45a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d40c:	f7ff ffcc 	bl	800d3a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d410:	f7ff ff9a 	bl	800d348 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d414:	2001      	movs	r0, #1
 800d416:	f7fd fbef 	bl	800abf8 <memp_malloc>
 800d41a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d11b      	bne.n	800d45a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d422:	2009      	movs	r0, #9
 800d424:	f7ff ff46 	bl	800d2b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d428:	2001      	movs	r0, #1
 800d42a:	f7fd fbe5 	bl	800abf8 <memp_malloc>
 800d42e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d111      	bne.n	800d45a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d436:	2008      	movs	r0, #8
 800d438:	f7ff ff3c 	bl	800d2b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d43c:	2001      	movs	r0, #1
 800d43e:	f7fd fbdb 	bl	800abf8 <memp_malloc>
 800d442:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d107      	bne.n	800d45a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7ff fee3 	bl	800d218 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d452:	2001      	movs	r0, #1
 800d454:	f7fd fbd0 	bl	800abf8 <memp_malloc>
 800d458:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d03f      	beq.n	800d4e0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d460:	229c      	movs	r2, #156	; 0x9c
 800d462:	2100      	movs	r1, #0
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f007 ff3e 	bl	80152e6 <memset>
    pcb->prio = prio;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	79fa      	ldrb	r2, [r7, #7]
 800d46e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d476:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d480:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	22ff      	movs	r2, #255	; 0xff
 800d48e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d496:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2206      	movs	r2, #6
 800d49c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2206      	movs	r2, #6
 800d4a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4ac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d4b6:	4b0d      	ldr	r3, [pc, #52]	; (800d4ec <tcp_alloc+0xf8>)
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d4be:	4b0c      	ldr	r3, [pc, #48]	; (800d4f0 <tcp_alloc+0xfc>)
 800d4c0:	781a      	ldrb	r2, [r3, #0]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d4cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	4a08      	ldr	r2, [pc, #32]	; (800d4f4 <tcp_alloc+0x100>)
 800d4d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	4a07      	ldr	r2, [pc, #28]	; (800d4f8 <tcp_alloc+0x104>)
 800d4dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20040aa4 	.word	0x20040aa4
 800d4f0:	20040aba 	.word	0x20040aba
 800d4f4:	0800d1ad 	.word	0x0800d1ad
 800d4f8:	006ddd00 	.word	0x006ddd00

0800d4fc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d107      	bne.n	800d51a <tcp_pcb_purge+0x1e>
 800d50a:	4b21      	ldr	r3, [pc, #132]	; (800d590 <tcp_pcb_purge+0x94>)
 800d50c:	f640 0251 	movw	r2, #2129	; 0x851
 800d510:	4920      	ldr	r1, [pc, #128]	; (800d594 <tcp_pcb_purge+0x98>)
 800d512:	4821      	ldr	r0, [pc, #132]	; (800d598 <tcp_pcb_purge+0x9c>)
 800d514:	f007 ff84 	bl	8015420 <iprintf>
 800d518:	e037      	b.n	800d58a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	7d1b      	ldrb	r3, [r3, #20]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d033      	beq.n	800d58a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d526:	2b0a      	cmp	r3, #10
 800d528:	d02f      	beq.n	800d58a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d02b      	beq.n	800d58a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d536:	2b00      	cmp	r3, #0
 800d538:	d007      	beq.n	800d54a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fe fa72 	bl	800ba28 <pbuf_free>
      pcb->refused_data = NULL;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d002      	beq.n	800d558 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f986 	bl	800d864 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d55e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff fdc7 	bl	800d0f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d56e:	4618      	mov	r0, r3
 800d570:	f7ff fdc2 	bl	800d0f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	66da      	str	r2, [r3, #108]	; 0x6c
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	08017500 	.word	0x08017500
 800d594:	08017b4c 	.word	0x08017b4c
 800d598:	08017544 	.word	0x08017544

0800d59c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d106      	bne.n	800d5ba <tcp_pcb_remove+0x1e>
 800d5ac:	4b3e      	ldr	r3, [pc, #248]	; (800d6a8 <tcp_pcb_remove+0x10c>)
 800d5ae:	f640 0283 	movw	r2, #2179	; 0x883
 800d5b2:	493e      	ldr	r1, [pc, #248]	; (800d6ac <tcp_pcb_remove+0x110>)
 800d5b4:	483e      	ldr	r0, [pc, #248]	; (800d6b0 <tcp_pcb_remove+0x114>)
 800d5b6:	f007 ff33 	bl	8015420 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <tcp_pcb_remove+0x32>
 800d5c0:	4b39      	ldr	r3, [pc, #228]	; (800d6a8 <tcp_pcb_remove+0x10c>)
 800d5c2:	f640 0284 	movw	r2, #2180	; 0x884
 800d5c6:	493b      	ldr	r1, [pc, #236]	; (800d6b4 <tcp_pcb_remove+0x118>)
 800d5c8:	4839      	ldr	r0, [pc, #228]	; (800d6b0 <tcp_pcb_remove+0x114>)
 800d5ca:	f007 ff29 	bl	8015420 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	683a      	ldr	r2, [r7, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d105      	bne.n	800d5e4 <tcp_pcb_remove+0x48>
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68da      	ldr	r2, [r3, #12]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	601a      	str	r2, [r3, #0]
 800d5e2:	e013      	b.n	800d60c <tcp_pcb_remove+0x70>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	60fb      	str	r3, [r7, #12]
 800d5ea:	e00c      	b.n	800d606 <tcp_pcb_remove+0x6a>
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	683a      	ldr	r2, [r7, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d104      	bne.n	800d600 <tcp_pcb_remove+0x64>
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	68da      	ldr	r2, [r3, #12]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	60da      	str	r2, [r3, #12]
 800d5fe:	e005      	b.n	800d60c <tcp_pcb_remove+0x70>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	60fb      	str	r3, [r7, #12]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1ef      	bne.n	800d5ec <tcp_pcb_remove+0x50>
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2200      	movs	r2, #0
 800d610:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d612:	6838      	ldr	r0, [r7, #0]
 800d614:	f7ff ff72 	bl	800d4fc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	2b0a      	cmp	r3, #10
 800d61e:	d013      	beq.n	800d648 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d624:	2b01      	cmp	r3, #1
 800d626:	d00f      	beq.n	800d648 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	8b5b      	ldrh	r3, [r3, #26]
 800d62c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d630:	2b00      	cmp	r3, #0
 800d632:	d009      	beq.n	800d648 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	8b5b      	ldrh	r3, [r3, #26]
 800d638:	f043 0302 	orr.w	r3, r3, #2
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d642:	6838      	ldr	r0, [r7, #0]
 800d644:	f002 ff6e 	bl	8010524 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	7d1b      	ldrb	r3, [r3, #20]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d020      	beq.n	800d692 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d654:	2b00      	cmp	r3, #0
 800d656:	d006      	beq.n	800d666 <tcp_pcb_remove+0xca>
 800d658:	4b13      	ldr	r3, [pc, #76]	; (800d6a8 <tcp_pcb_remove+0x10c>)
 800d65a:	f640 0293 	movw	r2, #2195	; 0x893
 800d65e:	4916      	ldr	r1, [pc, #88]	; (800d6b8 <tcp_pcb_remove+0x11c>)
 800d660:	4813      	ldr	r0, [pc, #76]	; (800d6b0 <tcp_pcb_remove+0x114>)
 800d662:	f007 fedd 	bl	8015420 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d006      	beq.n	800d67c <tcp_pcb_remove+0xe0>
 800d66e:	4b0e      	ldr	r3, [pc, #56]	; (800d6a8 <tcp_pcb_remove+0x10c>)
 800d670:	f640 0294 	movw	r2, #2196	; 0x894
 800d674:	4911      	ldr	r1, [pc, #68]	; (800d6bc <tcp_pcb_remove+0x120>)
 800d676:	480e      	ldr	r0, [pc, #56]	; (800d6b0 <tcp_pcb_remove+0x114>)
 800d678:	f007 fed2 	bl	8015420 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d680:	2b00      	cmp	r3, #0
 800d682:	d006      	beq.n	800d692 <tcp_pcb_remove+0xf6>
 800d684:	4b08      	ldr	r3, [pc, #32]	; (800d6a8 <tcp_pcb_remove+0x10c>)
 800d686:	f640 0296 	movw	r2, #2198	; 0x896
 800d68a:	490d      	ldr	r1, [pc, #52]	; (800d6c0 <tcp_pcb_remove+0x124>)
 800d68c:	4808      	ldr	r0, [pc, #32]	; (800d6b0 <tcp_pcb_remove+0x114>)
 800d68e:	f007 fec7 	bl	8015420 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	2200      	movs	r2, #0
 800d696:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d69e:	bf00      	nop
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	08017500 	.word	0x08017500
 800d6ac:	08017b68 	.word	0x08017b68
 800d6b0:	08017544 	.word	0x08017544
 800d6b4:	08017b84 	.word	0x08017b84
 800d6b8:	08017ba4 	.word	0x08017ba4
 800d6bc:	08017bbc 	.word	0x08017bbc
 800d6c0:	08017bd8 	.word	0x08017bd8

0800d6c4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d106      	bne.n	800d6e0 <tcp_next_iss+0x1c>
 800d6d2:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <tcp_next_iss+0x38>)
 800d6d4:	f640 02af 	movw	r2, #2223	; 0x8af
 800d6d8:	4909      	ldr	r1, [pc, #36]	; (800d700 <tcp_next_iss+0x3c>)
 800d6da:	480a      	ldr	r0, [pc, #40]	; (800d704 <tcp_next_iss+0x40>)
 800d6dc:	f007 fea0 	bl	8015420 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d6e0:	4b09      	ldr	r3, [pc, #36]	; (800d708 <tcp_next_iss+0x44>)
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	4b09      	ldr	r3, [pc, #36]	; (800d70c <tcp_next_iss+0x48>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	4a07      	ldr	r2, [pc, #28]	; (800d708 <tcp_next_iss+0x44>)
 800d6ec:	6013      	str	r3, [r2, #0]
  return iss;
 800d6ee:	4b06      	ldr	r3, [pc, #24]	; (800d708 <tcp_next_iss+0x44>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	08017500 	.word	0x08017500
 800d700:	08017bf0 	.word	0x08017bf0
 800d704:	08017544 	.word	0x08017544
 800d708:	20000028 	.word	0x20000028
 800d70c:	20040aa4 	.word	0x20040aa4

0800d710 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	4603      	mov	r3, r0
 800d718:	60b9      	str	r1, [r7, #8]
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d106      	bne.n	800d732 <tcp_eff_send_mss_netif+0x22>
 800d724:	4b14      	ldr	r3, [pc, #80]	; (800d778 <tcp_eff_send_mss_netif+0x68>)
 800d726:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d72a:	4914      	ldr	r1, [pc, #80]	; (800d77c <tcp_eff_send_mss_netif+0x6c>)
 800d72c:	4814      	ldr	r0, [pc, #80]	; (800d780 <tcp_eff_send_mss_netif+0x70>)
 800d72e:	f007 fe77 	bl	8015420 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d738:	89fb      	ldrh	r3, [r7, #14]
 800d73a:	e019      	b.n	800d770 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d740:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d742:	8afb      	ldrh	r3, [r7, #22]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d012      	beq.n	800d76e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d748:	2328      	movs	r3, #40	; 0x28
 800d74a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d74c:	8afa      	ldrh	r2, [r7, #22]
 800d74e:	8abb      	ldrh	r3, [r7, #20]
 800d750:	429a      	cmp	r2, r3
 800d752:	d904      	bls.n	800d75e <tcp_eff_send_mss_netif+0x4e>
 800d754:	8afa      	ldrh	r2, [r7, #22]
 800d756:	8abb      	ldrh	r3, [r7, #20]
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	e000      	b.n	800d760 <tcp_eff_send_mss_netif+0x50>
 800d75e:	2300      	movs	r3, #0
 800d760:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d762:	8a7a      	ldrh	r2, [r7, #18]
 800d764:	89fb      	ldrh	r3, [r7, #14]
 800d766:	4293      	cmp	r3, r2
 800d768:	bf28      	it	cs
 800d76a:	4613      	movcs	r3, r2
 800d76c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d76e:	89fb      	ldrh	r3, [r7, #14]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	08017500 	.word	0x08017500
 800d77c:	08017c0c 	.word	0x08017c0c
 800d780:	08017544 	.word	0x08017544

0800d784 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
 800d78c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d119      	bne.n	800d7cc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d798:	4b10      	ldr	r3, [pc, #64]	; (800d7dc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d79a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d79e:	4910      	ldr	r1, [pc, #64]	; (800d7e0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d7a0:	4810      	ldr	r0, [pc, #64]	; (800d7e4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d7a2:	f007 fe3d 	bl	8015420 <iprintf>

  while (pcb != NULL) {
 800d7a6:	e011      	b.n	800d7cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d108      	bne.n	800d7c6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f7fe ffc6 	bl	800c74c <tcp_abort>
      pcb = next;
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	60fb      	str	r3, [r7, #12]
 800d7c4:	e002      	b.n	800d7cc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1ea      	bne.n	800d7a8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d7d2:	bf00      	nop
 800d7d4:	bf00      	nop
 800d7d6:	3710      	adds	r7, #16
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}
 800d7dc:	08017500 	.word	0x08017500
 800d7e0:	08017c34 	.word	0x08017c34
 800d7e4:	08017544 	.word	0x08017544

0800d7e8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d02a      	beq.n	800d84e <tcp_netif_ip_addr_changed+0x66>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d026      	beq.n	800d84e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d800:	4b15      	ldr	r3, [pc, #84]	; (800d858 <tcp_netif_ip_addr_changed+0x70>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	4619      	mov	r1, r3
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f7ff ffbc 	bl	800d784 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d80c:	4b13      	ldr	r3, [pc, #76]	; (800d85c <tcp_netif_ip_addr_changed+0x74>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7ff ffb6 	bl	800d784 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d017      	beq.n	800d84e <tcp_netif_ip_addr_changed+0x66>
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d013      	beq.n	800d84e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d826:	4b0e      	ldr	r3, [pc, #56]	; (800d860 <tcp_netif_ip_addr_changed+0x78>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	e00c      	b.n	800d848 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	429a      	cmp	r2, r3
 800d838:	d103      	bne.n	800d842 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	60fb      	str	r3, [r7, #12]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1ef      	bne.n	800d82e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d84e:	bf00      	nop
 800d850:	3710      	adds	r7, #16
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20040ab0 	.word	0x20040ab0
 800d85c:	20040aa8 	.word	0x20040aa8
 800d860:	20040aac 	.word	0x20040aac

0800d864 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d870:	2b00      	cmp	r3, #0
 800d872:	d007      	beq.n	800d884 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d878:	4618      	mov	r0, r3
 800d87a:	f7ff fc3d 	bl	800d0f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d884:	bf00      	nop
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d88c:	b590      	push	{r4, r7, lr}
 800d88e:	b08d      	sub	sp, #52	; 0x34
 800d890:	af04      	add	r7, sp, #16
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d105      	bne.n	800d8a8 <tcp_input+0x1c>
 800d89c:	4b9b      	ldr	r3, [pc, #620]	; (800db0c <tcp_input+0x280>)
 800d89e:	2283      	movs	r2, #131	; 0x83
 800d8a0:	499b      	ldr	r1, [pc, #620]	; (800db10 <tcp_input+0x284>)
 800d8a2:	489c      	ldr	r0, [pc, #624]	; (800db14 <tcp_input+0x288>)
 800d8a4:	f007 fdbc 	bl	8015420 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	4a9a      	ldr	r2, [pc, #616]	; (800db18 <tcp_input+0x28c>)
 800d8ae:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	895b      	ldrh	r3, [r3, #10]
 800d8b4:	2b13      	cmp	r3, #19
 800d8b6:	f240 83d1 	bls.w	800e05c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d8ba:	4b98      	ldr	r3, [pc, #608]	; (800db1c <tcp_input+0x290>)
 800d8bc:	695b      	ldr	r3, [r3, #20]
 800d8be:	4a97      	ldr	r2, [pc, #604]	; (800db1c <tcp_input+0x290>)
 800d8c0:	6812      	ldr	r2, [r2, #0]
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f005 ff7d 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f040 83c7 	bne.w	800e060 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d8d2:	4b92      	ldr	r3, [pc, #584]	; (800db1c <tcp_input+0x290>)
 800d8d4:	695b      	ldr	r3, [r3, #20]
 800d8d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d8da:	2be0      	cmp	r3, #224	; 0xe0
 800d8dc:	f000 83c0 	beq.w	800e060 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d8e0:	4b8d      	ldr	r3, [pc, #564]	; (800db18 <tcp_input+0x28c>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	899b      	ldrh	r3, [r3, #12]
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7fc fcbf 	bl	800a26c <lwip_htons>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	0b1b      	lsrs	r3, r3, #12
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d8fa:	7cbb      	ldrb	r3, [r7, #18]
 800d8fc:	2b13      	cmp	r3, #19
 800d8fe:	f240 83b1 	bls.w	800e064 <tcp_input+0x7d8>
 800d902:	7cbb      	ldrb	r3, [r7, #18]
 800d904:	b29a      	uxth	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	891b      	ldrh	r3, [r3, #8]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	f200 83aa 	bhi.w	800e064 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d910:	7cbb      	ldrb	r3, [r7, #18]
 800d912:	b29b      	uxth	r3, r3
 800d914:	3b14      	subs	r3, #20
 800d916:	b29a      	uxth	r2, r3
 800d918:	4b81      	ldr	r3, [pc, #516]	; (800db20 <tcp_input+0x294>)
 800d91a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d91c:	4b81      	ldr	r3, [pc, #516]	; (800db24 <tcp_input+0x298>)
 800d91e:	2200      	movs	r2, #0
 800d920:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	895a      	ldrh	r2, [r3, #10]
 800d926:	7cbb      	ldrb	r3, [r7, #18]
 800d928:	b29b      	uxth	r3, r3
 800d92a:	429a      	cmp	r2, r3
 800d92c:	d309      	bcc.n	800d942 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d92e:	4b7c      	ldr	r3, [pc, #496]	; (800db20 <tcp_input+0x294>)
 800d930:	881a      	ldrh	r2, [r3, #0]
 800d932:	4b7d      	ldr	r3, [pc, #500]	; (800db28 <tcp_input+0x29c>)
 800d934:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d936:	7cbb      	ldrb	r3, [r7, #18]
 800d938:	4619      	mov	r1, r3
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f7fd ffee 	bl	800b91c <pbuf_remove_header>
 800d940:	e04e      	b.n	800d9e0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d105      	bne.n	800d956 <tcp_input+0xca>
 800d94a:	4b70      	ldr	r3, [pc, #448]	; (800db0c <tcp_input+0x280>)
 800d94c:	22c2      	movs	r2, #194	; 0xc2
 800d94e:	4977      	ldr	r1, [pc, #476]	; (800db2c <tcp_input+0x2a0>)
 800d950:	4870      	ldr	r0, [pc, #448]	; (800db14 <tcp_input+0x288>)
 800d952:	f007 fd65 	bl	8015420 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d956:	2114      	movs	r1, #20
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7fd ffdf 	bl	800b91c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	895a      	ldrh	r2, [r3, #10]
 800d962:	4b71      	ldr	r3, [pc, #452]	; (800db28 <tcp_input+0x29c>)
 800d964:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d966:	4b6e      	ldr	r3, [pc, #440]	; (800db20 <tcp_input+0x294>)
 800d968:	881a      	ldrh	r2, [r3, #0]
 800d96a:	4b6f      	ldr	r3, [pc, #444]	; (800db28 <tcp_input+0x29c>)
 800d96c:	881b      	ldrh	r3, [r3, #0]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d972:	4b6d      	ldr	r3, [pc, #436]	; (800db28 <tcp_input+0x29c>)
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	4619      	mov	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7fd ffcf 	bl	800b91c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	895b      	ldrh	r3, [r3, #10]
 800d984:	8a3a      	ldrh	r2, [r7, #16]
 800d986:	429a      	cmp	r2, r3
 800d988:	f200 836e 	bhi.w	800e068 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	4a64      	ldr	r2, [pc, #400]	; (800db24 <tcp_input+0x298>)
 800d994:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	8a3a      	ldrh	r2, [r7, #16]
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f7fd ffbc 	bl	800b91c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	891a      	ldrh	r2, [r3, #8]
 800d9a8:	8a3b      	ldrh	r3, [r7, #16]
 800d9aa:	1ad3      	subs	r3, r2, r3
 800d9ac:	b29a      	uxth	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	895b      	ldrh	r3, [r3, #10]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d005      	beq.n	800d9c6 <tcp_input+0x13a>
 800d9ba:	4b54      	ldr	r3, [pc, #336]	; (800db0c <tcp_input+0x280>)
 800d9bc:	22df      	movs	r2, #223	; 0xdf
 800d9be:	495c      	ldr	r1, [pc, #368]	; (800db30 <tcp_input+0x2a4>)
 800d9c0:	4854      	ldr	r0, [pc, #336]	; (800db14 <tcp_input+0x288>)
 800d9c2:	f007 fd2d 	bl	8015420 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	891a      	ldrh	r2, [r3, #8]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	891b      	ldrh	r3, [r3, #8]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d005      	beq.n	800d9e0 <tcp_input+0x154>
 800d9d4:	4b4d      	ldr	r3, [pc, #308]	; (800db0c <tcp_input+0x280>)
 800d9d6:	22e0      	movs	r2, #224	; 0xe0
 800d9d8:	4956      	ldr	r1, [pc, #344]	; (800db34 <tcp_input+0x2a8>)
 800d9da:	484e      	ldr	r0, [pc, #312]	; (800db14 <tcp_input+0x288>)
 800d9dc:	f007 fd20 	bl	8015420 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d9e0:	4b4d      	ldr	r3, [pc, #308]	; (800db18 <tcp_input+0x28c>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	4a4b      	ldr	r2, [pc, #300]	; (800db18 <tcp_input+0x28c>)
 800d9ea:	6814      	ldr	r4, [r2, #0]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fc fc3d 	bl	800a26c <lwip_htons>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d9f6:	4b48      	ldr	r3, [pc, #288]	; (800db18 <tcp_input+0x28c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	885b      	ldrh	r3, [r3, #2]
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	4a46      	ldr	r2, [pc, #280]	; (800db18 <tcp_input+0x28c>)
 800da00:	6814      	ldr	r4, [r2, #0]
 800da02:	4618      	mov	r0, r3
 800da04:	f7fc fc32 	bl	800a26c <lwip_htons>
 800da08:	4603      	mov	r3, r0
 800da0a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800da0c:	4b42      	ldr	r3, [pc, #264]	; (800db18 <tcp_input+0x28c>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	4a41      	ldr	r2, [pc, #260]	; (800db18 <tcp_input+0x28c>)
 800da14:	6814      	ldr	r4, [r2, #0]
 800da16:	4618      	mov	r0, r3
 800da18:	f7fc fc3d 	bl	800a296 <lwip_htonl>
 800da1c:	4603      	mov	r3, r0
 800da1e:	6063      	str	r3, [r4, #4]
 800da20:	6863      	ldr	r3, [r4, #4]
 800da22:	4a45      	ldr	r2, [pc, #276]	; (800db38 <tcp_input+0x2ac>)
 800da24:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800da26:	4b3c      	ldr	r3, [pc, #240]	; (800db18 <tcp_input+0x28c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	4a3a      	ldr	r2, [pc, #232]	; (800db18 <tcp_input+0x28c>)
 800da2e:	6814      	ldr	r4, [r2, #0]
 800da30:	4618      	mov	r0, r3
 800da32:	f7fc fc30 	bl	800a296 <lwip_htonl>
 800da36:	4603      	mov	r3, r0
 800da38:	60a3      	str	r3, [r4, #8]
 800da3a:	68a3      	ldr	r3, [r4, #8]
 800da3c:	4a3f      	ldr	r2, [pc, #252]	; (800db3c <tcp_input+0x2b0>)
 800da3e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800da40:	4b35      	ldr	r3, [pc, #212]	; (800db18 <tcp_input+0x28c>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	89db      	ldrh	r3, [r3, #14]
 800da46:	b29b      	uxth	r3, r3
 800da48:	4a33      	ldr	r2, [pc, #204]	; (800db18 <tcp_input+0x28c>)
 800da4a:	6814      	ldr	r4, [r2, #0]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f7fc fc0d 	bl	800a26c <lwip_htons>
 800da52:	4603      	mov	r3, r0
 800da54:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800da56:	4b30      	ldr	r3, [pc, #192]	; (800db18 <tcp_input+0x28c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	899b      	ldrh	r3, [r3, #12]
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fc fc04 	bl	800a26c <lwip_htons>
 800da64:	4603      	mov	r3, r0
 800da66:	b2db      	uxtb	r3, r3
 800da68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da6c:	b2da      	uxtb	r2, r3
 800da6e:	4b34      	ldr	r3, [pc, #208]	; (800db40 <tcp_input+0x2b4>)
 800da70:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	891a      	ldrh	r2, [r3, #8]
 800da76:	4b33      	ldr	r3, [pc, #204]	; (800db44 <tcp_input+0x2b8>)
 800da78:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800da7a:	4b31      	ldr	r3, [pc, #196]	; (800db40 <tcp_input+0x2b4>)
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	f003 0303 	and.w	r3, r3, #3
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00c      	beq.n	800daa0 <tcp_input+0x214>
    tcplen++;
 800da86:	4b2f      	ldr	r3, [pc, #188]	; (800db44 <tcp_input+0x2b8>)
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	3301      	adds	r3, #1
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	4b2d      	ldr	r3, [pc, #180]	; (800db44 <tcp_input+0x2b8>)
 800da90:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	891a      	ldrh	r2, [r3, #8]
 800da96:	4b2b      	ldr	r3, [pc, #172]	; (800db44 <tcp_input+0x2b8>)
 800da98:	881b      	ldrh	r3, [r3, #0]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	f200 82e6 	bhi.w	800e06c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800daa0:	2300      	movs	r3, #0
 800daa2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800daa4:	4b28      	ldr	r3, [pc, #160]	; (800db48 <tcp_input+0x2bc>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	61fb      	str	r3, [r7, #28]
 800daaa:	e09d      	b.n	800dbe8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	7d1b      	ldrb	r3, [r3, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d105      	bne.n	800dac0 <tcp_input+0x234>
 800dab4:	4b15      	ldr	r3, [pc, #84]	; (800db0c <tcp_input+0x280>)
 800dab6:	22fb      	movs	r2, #251	; 0xfb
 800dab8:	4924      	ldr	r1, [pc, #144]	; (800db4c <tcp_input+0x2c0>)
 800daba:	4816      	ldr	r0, [pc, #88]	; (800db14 <tcp_input+0x288>)
 800dabc:	f007 fcb0 	bl	8015420 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	7d1b      	ldrb	r3, [r3, #20]
 800dac4:	2b0a      	cmp	r3, #10
 800dac6:	d105      	bne.n	800dad4 <tcp_input+0x248>
 800dac8:	4b10      	ldr	r3, [pc, #64]	; (800db0c <tcp_input+0x280>)
 800daca:	22fc      	movs	r2, #252	; 0xfc
 800dacc:	4920      	ldr	r1, [pc, #128]	; (800db50 <tcp_input+0x2c4>)
 800dace:	4811      	ldr	r0, [pc, #68]	; (800db14 <tcp_input+0x288>)
 800dad0:	f007 fca6 	bl	8015420 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	7d1b      	ldrb	r3, [r3, #20]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d105      	bne.n	800dae8 <tcp_input+0x25c>
 800dadc:	4b0b      	ldr	r3, [pc, #44]	; (800db0c <tcp_input+0x280>)
 800dade:	22fd      	movs	r2, #253	; 0xfd
 800dae0:	491c      	ldr	r1, [pc, #112]	; (800db54 <tcp_input+0x2c8>)
 800dae2:	480c      	ldr	r0, [pc, #48]	; (800db14 <tcp_input+0x288>)
 800dae4:	f007 fc9c 	bl	8015420 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	7a1b      	ldrb	r3, [r3, #8]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d033      	beq.n	800db58 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	7a1a      	ldrb	r2, [r3, #8]
 800daf4:	4b09      	ldr	r3, [pc, #36]	; (800db1c <tcp_input+0x290>)
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dafc:	3301      	adds	r3, #1
 800dafe:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db00:	429a      	cmp	r2, r3
 800db02:	d029      	beq.n	800db58 <tcp_input+0x2cc>
      prev = pcb;
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	61bb      	str	r3, [r7, #24]
      continue;
 800db08:	e06b      	b.n	800dbe2 <tcp_input+0x356>
 800db0a:	bf00      	nop
 800db0c:	08017c68 	.word	0x08017c68
 800db10:	08017c9c 	.word	0x08017c9c
 800db14:	08017cb4 	.word	0x08017cb4
 800db18:	20040acc 	.word	0x20040acc
 800db1c:	200252e8 	.word	0x200252e8
 800db20:	20040ad0 	.word	0x20040ad0
 800db24:	20040ad4 	.word	0x20040ad4
 800db28:	20040ad2 	.word	0x20040ad2
 800db2c:	08017cdc 	.word	0x08017cdc
 800db30:	08017cec 	.word	0x08017cec
 800db34:	08017cf8 	.word	0x08017cf8
 800db38:	20040adc 	.word	0x20040adc
 800db3c:	20040ae0 	.word	0x20040ae0
 800db40:	20040ae8 	.word	0x20040ae8
 800db44:	20040ae6 	.word	0x20040ae6
 800db48:	20040ab0 	.word	0x20040ab0
 800db4c:	08017d18 	.word	0x08017d18
 800db50:	08017d40 	.word	0x08017d40
 800db54:	08017d6c 	.word	0x08017d6c
    }

    if (pcb->remote_port == tcphdr->src &&
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	8b1a      	ldrh	r2, [r3, #24]
 800db5c:	4b72      	ldr	r3, [pc, #456]	; (800dd28 <tcp_input+0x49c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	881b      	ldrh	r3, [r3, #0]
 800db62:	b29b      	uxth	r3, r3
 800db64:	429a      	cmp	r2, r3
 800db66:	d13a      	bne.n	800dbde <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	8ada      	ldrh	r2, [r3, #22]
 800db6c:	4b6e      	ldr	r3, [pc, #440]	; (800dd28 <tcp_input+0x49c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	885b      	ldrh	r3, [r3, #2]
 800db72:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800db74:	429a      	cmp	r2, r3
 800db76:	d132      	bne.n	800dbde <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	685a      	ldr	r2, [r3, #4]
 800db7c:	4b6b      	ldr	r3, [pc, #428]	; (800dd2c <tcp_input+0x4a0>)
 800db7e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800db80:	429a      	cmp	r2, r3
 800db82:	d12c      	bne.n	800dbde <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	681a      	ldr	r2, [r3, #0]
 800db88:	4b68      	ldr	r3, [pc, #416]	; (800dd2c <tcp_input+0x4a0>)
 800db8a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d126      	bne.n	800dbde <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	69fa      	ldr	r2, [r7, #28]
 800db96:	429a      	cmp	r2, r3
 800db98:	d106      	bne.n	800dba8 <tcp_input+0x31c>
 800db9a:	4b65      	ldr	r3, [pc, #404]	; (800dd30 <tcp_input+0x4a4>)
 800db9c:	f240 120d 	movw	r2, #269	; 0x10d
 800dba0:	4964      	ldr	r1, [pc, #400]	; (800dd34 <tcp_input+0x4a8>)
 800dba2:	4865      	ldr	r0, [pc, #404]	; (800dd38 <tcp_input+0x4ac>)
 800dba4:	f007 fc3c 	bl	8015420 <iprintf>
      if (prev != NULL) {
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <tcp_input+0x338>
        prev->next = pcb->next;
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	68da      	ldr	r2, [r3, #12]
 800dbb2:	69bb      	ldr	r3, [r7, #24]
 800dbb4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dbb6:	4b61      	ldr	r3, [pc, #388]	; (800dd3c <tcp_input+0x4b0>)
 800dbb8:	681a      	ldr	r2, [r3, #0]
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dbbe:	4a5f      	ldr	r2, [pc, #380]	; (800dd3c <tcp_input+0x4b0>)
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	69fa      	ldr	r2, [r7, #28]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d111      	bne.n	800dbf2 <tcp_input+0x366>
 800dbce:	4b58      	ldr	r3, [pc, #352]	; (800dd30 <tcp_input+0x4a4>)
 800dbd0:	f240 1215 	movw	r2, #277	; 0x115
 800dbd4:	495a      	ldr	r1, [pc, #360]	; (800dd40 <tcp_input+0x4b4>)
 800dbd6:	4858      	ldr	r0, [pc, #352]	; (800dd38 <tcp_input+0x4ac>)
 800dbd8:	f007 fc22 	bl	8015420 <iprintf>
      break;
 800dbdc:	e009      	b.n	800dbf2 <tcp_input+0x366>
    }
    prev = pcb;
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	61fb      	str	r3, [r7, #28]
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f47f af5e 	bne.w	800daac <tcp_input+0x220>
 800dbf0:	e000      	b.n	800dbf4 <tcp_input+0x368>
      break;
 800dbf2:	bf00      	nop
  }

  if (pcb == NULL) {
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f040 80aa 	bne.w	800dd50 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbfc:	4b51      	ldr	r3, [pc, #324]	; (800dd44 <tcp_input+0x4b8>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	61fb      	str	r3, [r7, #28]
 800dc02:	e03f      	b.n	800dc84 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	7d1b      	ldrb	r3, [r3, #20]
 800dc08:	2b0a      	cmp	r3, #10
 800dc0a:	d006      	beq.n	800dc1a <tcp_input+0x38e>
 800dc0c:	4b48      	ldr	r3, [pc, #288]	; (800dd30 <tcp_input+0x4a4>)
 800dc0e:	f240 121f 	movw	r2, #287	; 0x11f
 800dc12:	494d      	ldr	r1, [pc, #308]	; (800dd48 <tcp_input+0x4bc>)
 800dc14:	4848      	ldr	r0, [pc, #288]	; (800dd38 <tcp_input+0x4ac>)
 800dc16:	f007 fc03 	bl	8015420 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	7a1b      	ldrb	r3, [r3, #8]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d009      	beq.n	800dc36 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	7a1a      	ldrb	r2, [r3, #8]
 800dc26:	4b41      	ldr	r3, [pc, #260]	; (800dd2c <tcp_input+0x4a0>)
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc2e:	3301      	adds	r3, #1
 800dc30:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d122      	bne.n	800dc7c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	8b1a      	ldrh	r2, [r3, #24]
 800dc3a:	4b3b      	ldr	r3, [pc, #236]	; (800dd28 <tcp_input+0x49c>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	881b      	ldrh	r3, [r3, #0]
 800dc40:	b29b      	uxth	r3, r3
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d11b      	bne.n	800dc7e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	8ada      	ldrh	r2, [r3, #22]
 800dc4a:	4b37      	ldr	r3, [pc, #220]	; (800dd28 <tcp_input+0x49c>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	885b      	ldrh	r3, [r3, #2]
 800dc50:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d113      	bne.n	800dc7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc56:	69fb      	ldr	r3, [r7, #28]
 800dc58:	685a      	ldr	r2, [r3, #4]
 800dc5a:	4b34      	ldr	r3, [pc, #208]	; (800dd2c <tcp_input+0x4a0>)
 800dc5c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d10d      	bne.n	800dc7e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	681a      	ldr	r2, [r3, #0]
 800dc66:	4b31      	ldr	r3, [pc, #196]	; (800dd2c <tcp_input+0x4a0>)
 800dc68:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d107      	bne.n	800dc7e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dc6e:	69f8      	ldr	r0, [r7, #28]
 800dc70:	f000 fb56 	bl	800e320 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7fd fed7 	bl	800ba28 <pbuf_free>
        return;
 800dc7a:	e1fd      	b.n	800e078 <tcp_input+0x7ec>
        continue;
 800dc7c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	68db      	ldr	r3, [r3, #12]
 800dc82:	61fb      	str	r3, [r7, #28]
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1bc      	bne.n	800dc04 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc8e:	4b2f      	ldr	r3, [pc, #188]	; (800dd4c <tcp_input+0x4c0>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	617b      	str	r3, [r7, #20]
 800dc94:	e02a      	b.n	800dcec <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	7a1b      	ldrb	r3, [r3, #8]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00c      	beq.n	800dcb8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	7a1a      	ldrb	r2, [r3, #8]
 800dca2:	4b22      	ldr	r3, [pc, #136]	; (800dd2c <tcp_input+0x4a0>)
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcaa:	3301      	adds	r3, #1
 800dcac:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d002      	beq.n	800dcb8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	61bb      	str	r3, [r7, #24]
        continue;
 800dcb6:	e016      	b.n	800dce6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dcb8:	697b      	ldr	r3, [r7, #20]
 800dcba:	8ada      	ldrh	r2, [r3, #22]
 800dcbc:	4b1a      	ldr	r3, [pc, #104]	; (800dd28 <tcp_input+0x49c>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	885b      	ldrh	r3, [r3, #2]
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d10c      	bne.n	800dce2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	4b17      	ldr	r3, [pc, #92]	; (800dd2c <tcp_input+0x4a0>)
 800dcce:	695b      	ldr	r3, [r3, #20]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d00f      	beq.n	800dcf4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00d      	beq.n	800dcf6 <tcp_input+0x46a>
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d009      	beq.n	800dcf6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	68db      	ldr	r3, [r3, #12]
 800dcea:	617b      	str	r3, [r7, #20]
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1d1      	bne.n	800dc96 <tcp_input+0x40a>
 800dcf2:	e000      	b.n	800dcf6 <tcp_input+0x46a>
            break;
 800dcf4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d029      	beq.n	800dd50 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dcfc:	69bb      	ldr	r3, [r7, #24]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d00a      	beq.n	800dd18 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	68da      	ldr	r2, [r3, #12]
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dd0a:	4b10      	ldr	r3, [pc, #64]	; (800dd4c <tcp_input+0x4c0>)
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dd12:	4a0e      	ldr	r2, [pc, #56]	; (800dd4c <tcp_input+0x4c0>)
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dd18:	6978      	ldr	r0, [r7, #20]
 800dd1a:	f000 fa03 	bl	800e124 <tcp_listen_input>
      }
      pbuf_free(p);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7fd fe82 	bl	800ba28 <pbuf_free>
      return;
 800dd24:	e1a8      	b.n	800e078 <tcp_input+0x7ec>
 800dd26:	bf00      	nop
 800dd28:	20040acc 	.word	0x20040acc
 800dd2c:	200252e8 	.word	0x200252e8
 800dd30:	08017c68 	.word	0x08017c68
 800dd34:	08017d94 	.word	0x08017d94
 800dd38:	08017cb4 	.word	0x08017cb4
 800dd3c:	20040ab0 	.word	0x20040ab0
 800dd40:	08017dc0 	.word	0x08017dc0
 800dd44:	20040ab4 	.word	0x20040ab4
 800dd48:	08017dec 	.word	0x08017dec
 800dd4c:	20040aac 	.word	0x20040aac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 8158 	beq.w	800e008 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dd58:	4b95      	ldr	r3, [pc, #596]	; (800dfb0 <tcp_input+0x724>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	891a      	ldrh	r2, [r3, #8]
 800dd62:	4b93      	ldr	r3, [pc, #588]	; (800dfb0 <tcp_input+0x724>)
 800dd64:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dd66:	4a92      	ldr	r2, [pc, #584]	; (800dfb0 <tcp_input+0x724>)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dd6c:	4b91      	ldr	r3, [pc, #580]	; (800dfb4 <tcp_input+0x728>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4a8f      	ldr	r2, [pc, #572]	; (800dfb0 <tcp_input+0x724>)
 800dd72:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dd74:	4b90      	ldr	r3, [pc, #576]	; (800dfb8 <tcp_input+0x72c>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dd7a:	4b90      	ldr	r3, [pc, #576]	; (800dfbc <tcp_input+0x730>)
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dd80:	4b8f      	ldr	r3, [pc, #572]	; (800dfc0 <tcp_input+0x734>)
 800dd82:	2200      	movs	r2, #0
 800dd84:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dd86:	4b8f      	ldr	r3, [pc, #572]	; (800dfc4 <tcp_input+0x738>)
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	f003 0308 	and.w	r3, r3, #8
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d006      	beq.n	800dda0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	7b5b      	ldrb	r3, [r3, #13]
 800dd96:	f043 0301 	orr.w	r3, r3, #1
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d017      	beq.n	800ddd8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dda8:	69f8      	ldr	r0, [r7, #28]
 800ddaa:	f7ff f929 	bl	800d000 <tcp_process_refused_data>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	f113 0f0d 	cmn.w	r3, #13
 800ddb4:	d007      	beq.n	800ddc6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00c      	beq.n	800ddd8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ddbe:	4b82      	ldr	r3, [pc, #520]	; (800dfc8 <tcp_input+0x73c>)
 800ddc0:	881b      	ldrh	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d008      	beq.n	800ddd8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f040 80e3 	bne.w	800df96 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ddd0:	69f8      	ldr	r0, [r7, #28]
 800ddd2:	f003 f9ad 	bl	8011130 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ddd6:	e0de      	b.n	800df96 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ddd8:	4a7c      	ldr	r2, [pc, #496]	; (800dfcc <tcp_input+0x740>)
 800ddda:	69fb      	ldr	r3, [r7, #28]
 800dddc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ddde:	69f8      	ldr	r0, [r7, #28]
 800dde0:	f000 fb18 	bl	800e414 <tcp_process>
 800dde4:	4603      	mov	r3, r0
 800dde6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dde8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddec:	f113 0f0d 	cmn.w	r3, #13
 800ddf0:	f000 80d3 	beq.w	800df9a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ddf4:	4b71      	ldr	r3, [pc, #452]	; (800dfbc <tcp_input+0x730>)
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	f003 0308 	and.w	r3, r3, #8
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d015      	beq.n	800de2c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de06:	2b00      	cmp	r3, #0
 800de08:	d008      	beq.n	800de1c <tcp_input+0x590>
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de10:	69fa      	ldr	r2, [r7, #28]
 800de12:	6912      	ldr	r2, [r2, #16]
 800de14:	f06f 010d 	mvn.w	r1, #13
 800de18:	4610      	mov	r0, r2
 800de1a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800de1c:	69f9      	ldr	r1, [r7, #28]
 800de1e:	486c      	ldr	r0, [pc, #432]	; (800dfd0 <tcp_input+0x744>)
 800de20:	f7ff fbbc 	bl	800d59c <tcp_pcb_remove>
        tcp_free(pcb);
 800de24:	69f8      	ldr	r0, [r7, #28]
 800de26:	f7fe f9a9 	bl	800c17c <tcp_free>
 800de2a:	e0da      	b.n	800dfe2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800de30:	4b63      	ldr	r3, [pc, #396]	; (800dfc0 <tcp_input+0x734>)
 800de32:	881b      	ldrh	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01d      	beq.n	800de74 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800de38:	4b61      	ldr	r3, [pc, #388]	; (800dfc0 <tcp_input+0x734>)
 800de3a:	881b      	ldrh	r3, [r3, #0]
 800de3c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800de3e:	69fb      	ldr	r3, [r7, #28]
 800de40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00a      	beq.n	800de5e <tcp_input+0x5d2>
 800de48:	69fb      	ldr	r3, [r7, #28]
 800de4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de4e:	69fa      	ldr	r2, [r7, #28]
 800de50:	6910      	ldr	r0, [r2, #16]
 800de52:	89fa      	ldrh	r2, [r7, #14]
 800de54:	69f9      	ldr	r1, [r7, #28]
 800de56:	4798      	blx	r3
 800de58:	4603      	mov	r3, r0
 800de5a:	74fb      	strb	r3, [r7, #19]
 800de5c:	e001      	b.n	800de62 <tcp_input+0x5d6>
 800de5e:	2300      	movs	r3, #0
 800de60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800de62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de66:	f113 0f0d 	cmn.w	r3, #13
 800de6a:	f000 8098 	beq.w	800df9e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800de6e:	4b54      	ldr	r3, [pc, #336]	; (800dfc0 <tcp_input+0x734>)
 800de70:	2200      	movs	r2, #0
 800de72:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800de74:	69f8      	ldr	r0, [r7, #28]
 800de76:	f000 f915 	bl	800e0a4 <tcp_input_delayed_close>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f040 8090 	bne.w	800dfa2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800de82:	4b4d      	ldr	r3, [pc, #308]	; (800dfb8 <tcp_input+0x72c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d041      	beq.n	800df0e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d006      	beq.n	800dea0 <tcp_input+0x614>
 800de92:	4b50      	ldr	r3, [pc, #320]	; (800dfd4 <tcp_input+0x748>)
 800de94:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800de98:	494f      	ldr	r1, [pc, #316]	; (800dfd8 <tcp_input+0x74c>)
 800de9a:	4850      	ldr	r0, [pc, #320]	; (800dfdc <tcp_input+0x750>)
 800de9c:	f007 fac0 	bl	8015420 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	8b5b      	ldrh	r3, [r3, #26]
 800dea4:	f003 0310 	and.w	r3, r3, #16
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d008      	beq.n	800debe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800deac:	4b42      	ldr	r3, [pc, #264]	; (800dfb8 <tcp_input+0x72c>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fd fdb9 	bl	800ba28 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800deb6:	69f8      	ldr	r0, [r7, #28]
 800deb8:	f7fe fc48 	bl	800c74c <tcp_abort>
            goto aborted;
 800debc:	e091      	b.n	800dfe2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800debe:	69fb      	ldr	r3, [r7, #28]
 800dec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d00c      	beq.n	800dee2 <tcp_input+0x656>
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	6918      	ldr	r0, [r3, #16]
 800ded2:	4b39      	ldr	r3, [pc, #228]	; (800dfb8 <tcp_input+0x72c>)
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	2300      	movs	r3, #0
 800ded8:	69f9      	ldr	r1, [r7, #28]
 800deda:	47a0      	blx	r4
 800dedc:	4603      	mov	r3, r0
 800dede:	74fb      	strb	r3, [r7, #19]
 800dee0:	e008      	b.n	800def4 <tcp_input+0x668>
 800dee2:	4b35      	ldr	r3, [pc, #212]	; (800dfb8 <tcp_input+0x72c>)
 800dee4:	681a      	ldr	r2, [r3, #0]
 800dee6:	2300      	movs	r3, #0
 800dee8:	69f9      	ldr	r1, [r7, #28]
 800deea:	2000      	movs	r0, #0
 800deec:	f7ff f95e 	bl	800d1ac <tcp_recv_null>
 800def0:	4603      	mov	r3, r0
 800def2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800def4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800def8:	f113 0f0d 	cmn.w	r3, #13
 800defc:	d053      	beq.n	800dfa6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800defe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d003      	beq.n	800df0e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800df06:	4b2c      	ldr	r3, [pc, #176]	; (800dfb8 <tcp_input+0x72c>)
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	69fb      	ldr	r3, [r7, #28]
 800df0c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800df0e:	4b2b      	ldr	r3, [pc, #172]	; (800dfbc <tcp_input+0x730>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	f003 0320 	and.w	r3, r3, #32
 800df16:	2b00      	cmp	r3, #0
 800df18:	d030      	beq.n	800df7c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d009      	beq.n	800df36 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df26:	7b5a      	ldrb	r2, [r3, #13]
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df2c:	f042 0220 	orr.w	r2, r2, #32
 800df30:	b2d2      	uxtb	r2, r2
 800df32:	735a      	strb	r2, [r3, #13]
 800df34:	e022      	b.n	800df7c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800df36:	69fb      	ldr	r3, [r7, #28]
 800df38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df3a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800df3e:	d005      	beq.n	800df4c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df44:	3301      	adds	r3, #1
 800df46:	b29a      	uxth	r2, r3
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00b      	beq.n	800df6e <tcp_input+0x6e2>
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	6918      	ldr	r0, [r3, #16]
 800df60:	2300      	movs	r3, #0
 800df62:	2200      	movs	r2, #0
 800df64:	69f9      	ldr	r1, [r7, #28]
 800df66:	47a0      	blx	r4
 800df68:	4603      	mov	r3, r0
 800df6a:	74fb      	strb	r3, [r7, #19]
 800df6c:	e001      	b.n	800df72 <tcp_input+0x6e6>
 800df6e:	2300      	movs	r3, #0
 800df70:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800df72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df76:	f113 0f0d 	cmn.w	r3, #13
 800df7a:	d016      	beq.n	800dfaa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800df7c:	4b13      	ldr	r3, [pc, #76]	; (800dfcc <tcp_input+0x740>)
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800df82:	69f8      	ldr	r0, [r7, #28]
 800df84:	f000 f88e 	bl	800e0a4 <tcp_input_delayed_close>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d128      	bne.n	800dfe0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800df8e:	69f8      	ldr	r0, [r7, #28]
 800df90:	f002 fac8 	bl	8010524 <tcp_output>
 800df94:	e025      	b.n	800dfe2 <tcp_input+0x756>
        goto aborted;
 800df96:	bf00      	nop
 800df98:	e023      	b.n	800dfe2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800df9a:	bf00      	nop
 800df9c:	e021      	b.n	800dfe2 <tcp_input+0x756>
              goto aborted;
 800df9e:	bf00      	nop
 800dfa0:	e01f      	b.n	800dfe2 <tcp_input+0x756>
          goto aborted;
 800dfa2:	bf00      	nop
 800dfa4:	e01d      	b.n	800dfe2 <tcp_input+0x756>
            goto aborted;
 800dfa6:	bf00      	nop
 800dfa8:	e01b      	b.n	800dfe2 <tcp_input+0x756>
              goto aborted;
 800dfaa:	bf00      	nop
 800dfac:	e019      	b.n	800dfe2 <tcp_input+0x756>
 800dfae:	bf00      	nop
 800dfb0:	20040abc 	.word	0x20040abc
 800dfb4:	20040acc 	.word	0x20040acc
 800dfb8:	20040aec 	.word	0x20040aec
 800dfbc:	20040ae9 	.word	0x20040ae9
 800dfc0:	20040ae4 	.word	0x20040ae4
 800dfc4:	20040ae8 	.word	0x20040ae8
 800dfc8:	20040ae6 	.word	0x20040ae6
 800dfcc:	20040af0 	.word	0x20040af0
 800dfd0:	20040ab0 	.word	0x20040ab0
 800dfd4:	08017c68 	.word	0x08017c68
 800dfd8:	08017e1c 	.word	0x08017e1c
 800dfdc:	08017cb4 	.word	0x08017cb4
          goto aborted;
 800dfe0:	bf00      	nop
    tcp_input_pcb = NULL;
 800dfe2:	4b27      	ldr	r3, [pc, #156]	; (800e080 <tcp_input+0x7f4>)
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dfe8:	4b26      	ldr	r3, [pc, #152]	; (800e084 <tcp_input+0x7f8>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dfee:	4b26      	ldr	r3, [pc, #152]	; (800e088 <tcp_input+0x7fc>)
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d03f      	beq.n	800e076 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800dff6:	4b24      	ldr	r3, [pc, #144]	; (800e088 <tcp_input+0x7fc>)
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fd fd14 	bl	800ba28 <pbuf_free>
      inseg.p = NULL;
 800e000:	4b21      	ldr	r3, [pc, #132]	; (800e088 <tcp_input+0x7fc>)
 800e002:	2200      	movs	r2, #0
 800e004:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e006:	e036      	b.n	800e076 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e008:	4b20      	ldr	r3, [pc, #128]	; (800e08c <tcp_input+0x800>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	899b      	ldrh	r3, [r3, #12]
 800e00e:	b29b      	uxth	r3, r3
 800e010:	4618      	mov	r0, r3
 800e012:	f7fc f92b 	bl	800a26c <lwip_htons>
 800e016:	4603      	mov	r3, r0
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	f003 0304 	and.w	r3, r3, #4
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d118      	bne.n	800e054 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e022:	4b1b      	ldr	r3, [pc, #108]	; (800e090 <tcp_input+0x804>)
 800e024:	6819      	ldr	r1, [r3, #0]
 800e026:	4b1b      	ldr	r3, [pc, #108]	; (800e094 <tcp_input+0x808>)
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	461a      	mov	r2, r3
 800e02c:	4b1a      	ldr	r3, [pc, #104]	; (800e098 <tcp_input+0x80c>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e032:	4b16      	ldr	r3, [pc, #88]	; (800e08c <tcp_input+0x800>)
 800e034:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e036:	885b      	ldrh	r3, [r3, #2]
 800e038:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e03a:	4a14      	ldr	r2, [pc, #80]	; (800e08c <tcp_input+0x800>)
 800e03c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e03e:	8812      	ldrh	r2, [r2, #0]
 800e040:	b292      	uxth	r2, r2
 800e042:	9202      	str	r2, [sp, #8]
 800e044:	9301      	str	r3, [sp, #4]
 800e046:	4b15      	ldr	r3, [pc, #84]	; (800e09c <tcp_input+0x810>)
 800e048:	9300      	str	r3, [sp, #0]
 800e04a:	4b15      	ldr	r3, [pc, #84]	; (800e0a0 <tcp_input+0x814>)
 800e04c:	4602      	mov	r2, r0
 800e04e:	2000      	movs	r0, #0
 800e050:	f003 f81c 	bl	801108c <tcp_rst>
    pbuf_free(p);
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7fd fce7 	bl	800ba28 <pbuf_free>
  return;
 800e05a:	e00c      	b.n	800e076 <tcp_input+0x7ea>
    goto dropped;
 800e05c:	bf00      	nop
 800e05e:	e006      	b.n	800e06e <tcp_input+0x7e2>
    goto dropped;
 800e060:	bf00      	nop
 800e062:	e004      	b.n	800e06e <tcp_input+0x7e2>
    goto dropped;
 800e064:	bf00      	nop
 800e066:	e002      	b.n	800e06e <tcp_input+0x7e2>
      goto dropped;
 800e068:	bf00      	nop
 800e06a:	e000      	b.n	800e06e <tcp_input+0x7e2>
      goto dropped;
 800e06c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7fd fcda 	bl	800ba28 <pbuf_free>
 800e074:	e000      	b.n	800e078 <tcp_input+0x7ec>
  return;
 800e076:	bf00      	nop
}
 800e078:	3724      	adds	r7, #36	; 0x24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd90      	pop	{r4, r7, pc}
 800e07e:	bf00      	nop
 800e080:	20040af0 	.word	0x20040af0
 800e084:	20040aec 	.word	0x20040aec
 800e088:	20040abc 	.word	0x20040abc
 800e08c:	20040acc 	.word	0x20040acc
 800e090:	20040ae0 	.word	0x20040ae0
 800e094:	20040ae6 	.word	0x20040ae6
 800e098:	20040adc 	.word	0x20040adc
 800e09c:	200252f8 	.word	0x200252f8
 800e0a0:	200252fc 	.word	0x200252fc

0800e0a4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d106      	bne.n	800e0c0 <tcp_input_delayed_close+0x1c>
 800e0b2:	4b17      	ldr	r3, [pc, #92]	; (800e110 <tcp_input_delayed_close+0x6c>)
 800e0b4:	f240 225a 	movw	r2, #602	; 0x25a
 800e0b8:	4916      	ldr	r1, [pc, #88]	; (800e114 <tcp_input_delayed_close+0x70>)
 800e0ba:	4817      	ldr	r0, [pc, #92]	; (800e118 <tcp_input_delayed_close+0x74>)
 800e0bc:	f007 f9b0 	bl	8015420 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e0c0:	4b16      	ldr	r3, [pc, #88]	; (800e11c <tcp_input_delayed_close+0x78>)
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	f003 0310 	and.w	r3, r3, #16
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d01c      	beq.n	800e106 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	8b5b      	ldrh	r3, [r3, #26]
 800e0d0:	f003 0310 	and.w	r3, r3, #16
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d10d      	bne.n	800e0f4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d008      	beq.n	800e0f4 <tcp_input_delayed_close+0x50>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0e8:	687a      	ldr	r2, [r7, #4]
 800e0ea:	6912      	ldr	r2, [r2, #16]
 800e0ec:	f06f 010e 	mvn.w	r1, #14
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e0f4:	6879      	ldr	r1, [r7, #4]
 800e0f6:	480a      	ldr	r0, [pc, #40]	; (800e120 <tcp_input_delayed_close+0x7c>)
 800e0f8:	f7ff fa50 	bl	800d59c <tcp_pcb_remove>
    tcp_free(pcb);
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f7fe f83d 	bl	800c17c <tcp_free>
    return 1;
 800e102:	2301      	movs	r3, #1
 800e104:	e000      	b.n	800e108 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3708      	adds	r7, #8
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	08017c68 	.word	0x08017c68
 800e114:	08017e38 	.word	0x08017e38
 800e118:	08017cb4 	.word	0x08017cb4
 800e11c:	20040ae9 	.word	0x20040ae9
 800e120:	20040ab0 	.word	0x20040ab0

0800e124 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e124:	b590      	push	{r4, r7, lr}
 800e126:	b08b      	sub	sp, #44	; 0x2c
 800e128:	af04      	add	r7, sp, #16
 800e12a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e12c:	4b6f      	ldr	r3, [pc, #444]	; (800e2ec <tcp_listen_input+0x1c8>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	f003 0304 	and.w	r3, r3, #4
 800e134:	2b00      	cmp	r3, #0
 800e136:	f040 80d2 	bne.w	800e2de <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d106      	bne.n	800e14e <tcp_listen_input+0x2a>
 800e140:	4b6b      	ldr	r3, [pc, #428]	; (800e2f0 <tcp_listen_input+0x1cc>)
 800e142:	f240 2281 	movw	r2, #641	; 0x281
 800e146:	496b      	ldr	r1, [pc, #428]	; (800e2f4 <tcp_listen_input+0x1d0>)
 800e148:	486b      	ldr	r0, [pc, #428]	; (800e2f8 <tcp_listen_input+0x1d4>)
 800e14a:	f007 f969 	bl	8015420 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e14e:	4b67      	ldr	r3, [pc, #412]	; (800e2ec <tcp_listen_input+0x1c8>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	f003 0310 	and.w	r3, r3, #16
 800e156:	2b00      	cmp	r3, #0
 800e158:	d019      	beq.n	800e18e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e15a:	4b68      	ldr	r3, [pc, #416]	; (800e2fc <tcp_listen_input+0x1d8>)
 800e15c:	6819      	ldr	r1, [r3, #0]
 800e15e:	4b68      	ldr	r3, [pc, #416]	; (800e300 <tcp_listen_input+0x1dc>)
 800e160:	881b      	ldrh	r3, [r3, #0]
 800e162:	461a      	mov	r2, r3
 800e164:	4b67      	ldr	r3, [pc, #412]	; (800e304 <tcp_listen_input+0x1e0>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e16a:	4b67      	ldr	r3, [pc, #412]	; (800e308 <tcp_listen_input+0x1e4>)
 800e16c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e16e:	885b      	ldrh	r3, [r3, #2]
 800e170:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e172:	4a65      	ldr	r2, [pc, #404]	; (800e308 <tcp_listen_input+0x1e4>)
 800e174:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e176:	8812      	ldrh	r2, [r2, #0]
 800e178:	b292      	uxth	r2, r2
 800e17a:	9202      	str	r2, [sp, #8]
 800e17c:	9301      	str	r3, [sp, #4]
 800e17e:	4b63      	ldr	r3, [pc, #396]	; (800e30c <tcp_listen_input+0x1e8>)
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	4b63      	ldr	r3, [pc, #396]	; (800e310 <tcp_listen_input+0x1ec>)
 800e184:	4602      	mov	r2, r0
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f002 ff80 	bl	801108c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e18c:	e0a9      	b.n	800e2e2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e18e:	4b57      	ldr	r3, [pc, #348]	; (800e2ec <tcp_listen_input+0x1c8>)
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	f003 0302 	and.w	r3, r3, #2
 800e196:	2b00      	cmp	r3, #0
 800e198:	f000 80a3 	beq.w	800e2e2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7d5b      	ldrb	r3, [r3, #21]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7ff f927 	bl	800d3f4 <tcp_alloc>
 800e1a6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e1a8:	697b      	ldr	r3, [r7, #20]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d111      	bne.n	800e1d2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	699b      	ldr	r3, [r3, #24]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00a      	beq.n	800e1cc <tcp_listen_input+0xa8>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	699b      	ldr	r3, [r3, #24]
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	6910      	ldr	r0, [r2, #16]
 800e1be:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c2:	2100      	movs	r1, #0
 800e1c4:	4798      	blx	r3
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	73bb      	strb	r3, [r7, #14]
      return;
 800e1ca:	e08b      	b.n	800e2e4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e1cc:	23f0      	movs	r3, #240	; 0xf0
 800e1ce:	73bb      	strb	r3, [r7, #14]
      return;
 800e1d0:	e088      	b.n	800e2e4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e1d2:	4b50      	ldr	r3, [pc, #320]	; (800e314 <tcp_listen_input+0x1f0>)
 800e1d4:	695a      	ldr	r2, [r3, #20]
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e1da:	4b4e      	ldr	r3, [pc, #312]	; (800e314 <tcp_listen_input+0x1f0>)
 800e1dc:	691a      	ldr	r2, [r3, #16]
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	8ada      	ldrh	r2, [r3, #22]
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e1ea:	4b47      	ldr	r3, [pc, #284]	; (800e308 <tcp_listen_input+0x1e4>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	881b      	ldrh	r3, [r3, #0]
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	2203      	movs	r2, #3
 800e1fa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e1fc:	4b41      	ldr	r3, [pc, #260]	; (800e304 <tcp_listen_input+0x1e0>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	1c5a      	adds	r2, r3, #1
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e20e:	6978      	ldr	r0, [r7, #20]
 800e210:	f7ff fa58 	bl	800d6c4 <tcp_next_iss>
 800e214:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	693a      	ldr	r2, [r7, #16]
 800e21a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	693a      	ldr	r2, [r7, #16]
 800e220:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	693a      	ldr	r2, [r7, #16]
 800e226:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	693a      	ldr	r2, [r7, #16]
 800e22c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e22e:	4b35      	ldr	r3, [pc, #212]	; (800e304 <tcp_listen_input+0x1e0>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	1e5a      	subs	r2, r3, #1
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	691a      	ldr	r2, [r3, #16]
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	7a5b      	ldrb	r3, [r3, #9]
 800e24a:	f003 030c 	and.w	r3, r3, #12
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	7a1a      	ldrb	r2, [r3, #8]
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e25c:	4b2e      	ldr	r3, [pc, #184]	; (800e318 <tcp_listen_input+0x1f4>)
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	60da      	str	r2, [r3, #12]
 800e264:	4a2c      	ldr	r2, [pc, #176]	; (800e318 <tcp_listen_input+0x1f4>)
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	6013      	str	r3, [r2, #0]
 800e26a:	f003 f8d1 	bl	8011410 <tcp_timer_needed>
 800e26e:	4b2b      	ldr	r3, [pc, #172]	; (800e31c <tcp_listen_input+0x1f8>)
 800e270:	2201      	movs	r2, #1
 800e272:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e274:	6978      	ldr	r0, [r7, #20]
 800e276:	f001 fd8f 	bl	800fd98 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e27a:	4b23      	ldr	r3, [pc, #140]	; (800e308 <tcp_listen_input+0x1e4>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	89db      	ldrh	r3, [r3, #14]
 800e280:	b29a      	uxth	r2, r3
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	3304      	adds	r3, #4
 800e29c:	4618      	mov	r0, r3
 800e29e:	f004 fffb 	bl	8013298 <ip4_route>
 800e2a2:	4601      	mov	r1, r0
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	3304      	adds	r3, #4
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f7ff fa30 	bl	800d710 <tcp_eff_send_mss_netif>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e2b8:	2112      	movs	r1, #18
 800e2ba:	6978      	ldr	r0, [r7, #20]
 800e2bc:	f002 f844 	bl	8010348 <tcp_enqueue_flags>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e2c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d004      	beq.n	800e2d6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e2cc:	2100      	movs	r1, #0
 800e2ce:	6978      	ldr	r0, [r7, #20]
 800e2d0:	f7fe f97e 	bl	800c5d0 <tcp_abandon>
      return;
 800e2d4:	e006      	b.n	800e2e4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e2d6:	6978      	ldr	r0, [r7, #20]
 800e2d8:	f002 f924 	bl	8010524 <tcp_output>
  return;
 800e2dc:	e001      	b.n	800e2e2 <tcp_listen_input+0x1be>
    return;
 800e2de:	bf00      	nop
 800e2e0:	e000      	b.n	800e2e4 <tcp_listen_input+0x1c0>
  return;
 800e2e2:	bf00      	nop
}
 800e2e4:	371c      	adds	r7, #28
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd90      	pop	{r4, r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	20040ae8 	.word	0x20040ae8
 800e2f0:	08017c68 	.word	0x08017c68
 800e2f4:	08017e60 	.word	0x08017e60
 800e2f8:	08017cb4 	.word	0x08017cb4
 800e2fc:	20040ae0 	.word	0x20040ae0
 800e300:	20040ae6 	.word	0x20040ae6
 800e304:	20040adc 	.word	0x20040adc
 800e308:	20040acc 	.word	0x20040acc
 800e30c:	200252f8 	.word	0x200252f8
 800e310:	200252fc 	.word	0x200252fc
 800e314:	200252e8 	.word	0x200252e8
 800e318:	20040ab0 	.word	0x20040ab0
 800e31c:	20040ab8 	.word	0x20040ab8

0800e320 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af04      	add	r7, sp, #16
 800e326:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e328:	4b2f      	ldr	r3, [pc, #188]	; (800e3e8 <tcp_timewait_input+0xc8>)
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	f003 0304 	and.w	r3, r3, #4
 800e330:	2b00      	cmp	r3, #0
 800e332:	d153      	bne.n	800e3dc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d106      	bne.n	800e348 <tcp_timewait_input+0x28>
 800e33a:	4b2c      	ldr	r3, [pc, #176]	; (800e3ec <tcp_timewait_input+0xcc>)
 800e33c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e340:	492b      	ldr	r1, [pc, #172]	; (800e3f0 <tcp_timewait_input+0xd0>)
 800e342:	482c      	ldr	r0, [pc, #176]	; (800e3f4 <tcp_timewait_input+0xd4>)
 800e344:	f007 f86c 	bl	8015420 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e348:	4b27      	ldr	r3, [pc, #156]	; (800e3e8 <tcp_timewait_input+0xc8>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	f003 0302 	and.w	r3, r3, #2
 800e350:	2b00      	cmp	r3, #0
 800e352:	d02a      	beq.n	800e3aa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e354:	4b28      	ldr	r3, [pc, #160]	; (800e3f8 <tcp_timewait_input+0xd8>)
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	2b00      	cmp	r3, #0
 800e360:	db2d      	blt.n	800e3be <tcp_timewait_input+0x9e>
 800e362:	4b25      	ldr	r3, [pc, #148]	; (800e3f8 <tcp_timewait_input+0xd8>)
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36a:	6879      	ldr	r1, [r7, #4]
 800e36c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e36e:	440b      	add	r3, r1
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	2b00      	cmp	r3, #0
 800e374:	dc23      	bgt.n	800e3be <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e376:	4b21      	ldr	r3, [pc, #132]	; (800e3fc <tcp_timewait_input+0xdc>)
 800e378:	6819      	ldr	r1, [r3, #0]
 800e37a:	4b21      	ldr	r3, [pc, #132]	; (800e400 <tcp_timewait_input+0xe0>)
 800e37c:	881b      	ldrh	r3, [r3, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	4b1d      	ldr	r3, [pc, #116]	; (800e3f8 <tcp_timewait_input+0xd8>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e386:	4b1f      	ldr	r3, [pc, #124]	; (800e404 <tcp_timewait_input+0xe4>)
 800e388:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e38a:	885b      	ldrh	r3, [r3, #2]
 800e38c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e38e:	4a1d      	ldr	r2, [pc, #116]	; (800e404 <tcp_timewait_input+0xe4>)
 800e390:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e392:	8812      	ldrh	r2, [r2, #0]
 800e394:	b292      	uxth	r2, r2
 800e396:	9202      	str	r2, [sp, #8]
 800e398:	9301      	str	r3, [sp, #4]
 800e39a:	4b1b      	ldr	r3, [pc, #108]	; (800e408 <tcp_timewait_input+0xe8>)
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	4b1b      	ldr	r3, [pc, #108]	; (800e40c <tcp_timewait_input+0xec>)
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f002 fe72 	bl	801108c <tcp_rst>
      return;
 800e3a8:	e01b      	b.n	800e3e2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e3aa:	4b0f      	ldr	r3, [pc, #60]	; (800e3e8 <tcp_timewait_input+0xc8>)
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d003      	beq.n	800e3be <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e3b6:	4b16      	ldr	r3, [pc, #88]	; (800e410 <tcp_timewait_input+0xf0>)
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e3be:	4b10      	ldr	r3, [pc, #64]	; (800e400 <tcp_timewait_input+0xe0>)
 800e3c0:	881b      	ldrh	r3, [r3, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00c      	beq.n	800e3e0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	8b5b      	ldrh	r3, [r3, #26]
 800e3ca:	f043 0302 	orr.w	r3, r3, #2
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f002 f8a5 	bl	8010524 <tcp_output>
  }
  return;
 800e3da:	e001      	b.n	800e3e0 <tcp_timewait_input+0xc0>
    return;
 800e3dc:	bf00      	nop
 800e3de:	e000      	b.n	800e3e2 <tcp_timewait_input+0xc2>
  return;
 800e3e0:	bf00      	nop
}
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	20040ae8 	.word	0x20040ae8
 800e3ec:	08017c68 	.word	0x08017c68
 800e3f0:	08017e80 	.word	0x08017e80
 800e3f4:	08017cb4 	.word	0x08017cb4
 800e3f8:	20040adc 	.word	0x20040adc
 800e3fc:	20040ae0 	.word	0x20040ae0
 800e400:	20040ae6 	.word	0x20040ae6
 800e404:	20040acc 	.word	0x20040acc
 800e408:	200252f8 	.word	0x200252f8
 800e40c:	200252fc 	.word	0x200252fc
 800e410:	20040aa4 	.word	0x20040aa4

0800e414 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e414:	b590      	push	{r4, r7, lr}
 800e416:	b08d      	sub	sp, #52	; 0x34
 800e418:	af04      	add	r7, sp, #16
 800e41a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e420:	2300      	movs	r3, #0
 800e422:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d106      	bne.n	800e438 <tcp_process+0x24>
 800e42a:	4b9d      	ldr	r3, [pc, #628]	; (800e6a0 <tcp_process+0x28c>)
 800e42c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e430:	499c      	ldr	r1, [pc, #624]	; (800e6a4 <tcp_process+0x290>)
 800e432:	489d      	ldr	r0, [pc, #628]	; (800e6a8 <tcp_process+0x294>)
 800e434:	f006 fff4 	bl	8015420 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e438:	4b9c      	ldr	r3, [pc, #624]	; (800e6ac <tcp_process+0x298>)
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	f003 0304 	and.w	r3, r3, #4
 800e440:	2b00      	cmp	r3, #0
 800e442:	d04e      	beq.n	800e4e2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	7d1b      	ldrb	r3, [r3, #20]
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d108      	bne.n	800e45e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e450:	4b97      	ldr	r3, [pc, #604]	; (800e6b0 <tcp_process+0x29c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	429a      	cmp	r2, r3
 800e456:	d123      	bne.n	800e4a0 <tcp_process+0x8c>
        acceptable = 1;
 800e458:	2301      	movs	r3, #1
 800e45a:	76fb      	strb	r3, [r7, #27]
 800e45c:	e020      	b.n	800e4a0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e462:	4b94      	ldr	r3, [pc, #592]	; (800e6b4 <tcp_process+0x2a0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	429a      	cmp	r2, r3
 800e468:	d102      	bne.n	800e470 <tcp_process+0x5c>
        acceptable = 1;
 800e46a:	2301      	movs	r3, #1
 800e46c:	76fb      	strb	r3, [r7, #27]
 800e46e:	e017      	b.n	800e4a0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e470:	4b90      	ldr	r3, [pc, #576]	; (800e6b4 <tcp_process+0x2a0>)
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	db10      	blt.n	800e4a0 <tcp_process+0x8c>
 800e47e:	4b8d      	ldr	r3, [pc, #564]	; (800e6b4 <tcp_process+0x2a0>)
 800e480:	681a      	ldr	r2, [r3, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e486:	6879      	ldr	r1, [r7, #4]
 800e488:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e48a:	440b      	add	r3, r1
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	2b00      	cmp	r3, #0
 800e490:	dc06      	bgt.n	800e4a0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	8b5b      	ldrh	r3, [r3, #26]
 800e496:	f043 0302 	orr.w	r3, r3, #2
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e4a0:	7efb      	ldrb	r3, [r7, #27]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d01b      	beq.n	800e4de <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	7d1b      	ldrb	r3, [r3, #20]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d106      	bne.n	800e4bc <tcp_process+0xa8>
 800e4ae:	4b7c      	ldr	r3, [pc, #496]	; (800e6a0 <tcp_process+0x28c>)
 800e4b0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e4b4:	4980      	ldr	r1, [pc, #512]	; (800e6b8 <tcp_process+0x2a4>)
 800e4b6:	487c      	ldr	r0, [pc, #496]	; (800e6a8 <tcp_process+0x294>)
 800e4b8:	f006 ffb2 	bl	8015420 <iprintf>
      recv_flags |= TF_RESET;
 800e4bc:	4b7f      	ldr	r3, [pc, #508]	; (800e6bc <tcp_process+0x2a8>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	f043 0308 	orr.w	r3, r3, #8
 800e4c4:	b2da      	uxtb	r2, r3
 800e4c6:	4b7d      	ldr	r3, [pc, #500]	; (800e6bc <tcp_process+0x2a8>)
 800e4c8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	8b5b      	ldrh	r3, [r3, #26]
 800e4ce:	f023 0301 	bic.w	r3, r3, #1
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e4d8:	f06f 030d 	mvn.w	r3, #13
 800e4dc:	e37a      	b.n	800ebd4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	e378      	b.n	800ebd4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e4e2:	4b72      	ldr	r3, [pc, #456]	; (800e6ac <tcp_process+0x298>)
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	f003 0302 	and.w	r3, r3, #2
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d010      	beq.n	800e510 <tcp_process+0xfc>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7d1b      	ldrb	r3, [r3, #20]
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d00c      	beq.n	800e510 <tcp_process+0xfc>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	7d1b      	ldrb	r3, [r3, #20]
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d008      	beq.n	800e510 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	8b5b      	ldrh	r3, [r3, #26]
 800e502:	f043 0302 	orr.w	r3, r3, #2
 800e506:	b29a      	uxth	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e50c:	2300      	movs	r3, #0
 800e50e:	e361      	b.n	800ebd4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	8b5b      	ldrh	r3, [r3, #26]
 800e514:	f003 0310 	and.w	r3, r3, #16
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d103      	bne.n	800e524 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e51c:	4b68      	ldr	r3, [pc, #416]	; (800e6c0 <tcp_process+0x2ac>)
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2200      	movs	r2, #0
 800e530:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f001 fc2f 	bl	800fd98 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7d1b      	ldrb	r3, [r3, #20]
 800e53e:	3b02      	subs	r3, #2
 800e540:	2b07      	cmp	r3, #7
 800e542:	f200 8337 	bhi.w	800ebb4 <tcp_process+0x7a0>
 800e546:	a201      	add	r2, pc, #4	; (adr r2, 800e54c <tcp_process+0x138>)
 800e548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e54c:	0800e56d 	.word	0x0800e56d
 800e550:	0800e79d 	.word	0x0800e79d
 800e554:	0800e915 	.word	0x0800e915
 800e558:	0800e93f 	.word	0x0800e93f
 800e55c:	0800ea63 	.word	0x0800ea63
 800e560:	0800e915 	.word	0x0800e915
 800e564:	0800eaef 	.word	0x0800eaef
 800e568:	0800eb7f 	.word	0x0800eb7f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e56c:	4b4f      	ldr	r3, [pc, #316]	; (800e6ac <tcp_process+0x298>)
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	f003 0310 	and.w	r3, r3, #16
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 80e4 	beq.w	800e742 <tcp_process+0x32e>
 800e57a:	4b4c      	ldr	r3, [pc, #304]	; (800e6ac <tcp_process+0x298>)
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	f003 0302 	and.w	r3, r3, #2
 800e582:	2b00      	cmp	r3, #0
 800e584:	f000 80dd 	beq.w	800e742 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e58c:	1c5a      	adds	r2, r3, #1
 800e58e:	4b48      	ldr	r3, [pc, #288]	; (800e6b0 <tcp_process+0x29c>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	429a      	cmp	r2, r3
 800e594:	f040 80d5 	bne.w	800e742 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e598:	4b46      	ldr	r3, [pc, #280]	; (800e6b4 <tcp_process+0x2a0>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	1c5a      	adds	r2, r3, #1
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e5aa:	4b41      	ldr	r3, [pc, #260]	; (800e6b0 <tcp_process+0x29c>)
 800e5ac:	681a      	ldr	r2, [r3, #0]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e5b2:	4b44      	ldr	r3, [pc, #272]	; (800e6c4 <tcp_process+0x2b0>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	89db      	ldrh	r3, [r3, #14]
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e5cc:	4b39      	ldr	r3, [pc, #228]	; (800e6b4 <tcp_process+0x2a0>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	1e5a      	subs	r2, r3, #1
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2204      	movs	r2, #4
 800e5da:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f004 fe57 	bl	8013298 <ip4_route>
 800e5ea:	4601      	mov	r1, r0
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	3304      	adds	r3, #4
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4620      	mov	r0, r4
 800e5f4:	f7ff f88c 	bl	800d710 <tcp_eff_send_mss_netif>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e604:	009a      	lsls	r2, r3, #2
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e60a:	005b      	lsls	r3, r3, #1
 800e60c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e610:	428b      	cmp	r3, r1
 800e612:	bf38      	it	cc
 800e614:	460b      	movcc	r3, r1
 800e616:	429a      	cmp	r2, r3
 800e618:	d204      	bcs.n	800e624 <tcp_process+0x210>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e61e:	009b      	lsls	r3, r3, #2
 800e620:	b29b      	uxth	r3, r3
 800e622:	e00d      	b.n	800e640 <tcp_process+0x22c>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e628:	005b      	lsls	r3, r3, #1
 800e62a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e62e:	4293      	cmp	r3, r2
 800e630:	d904      	bls.n	800e63c <tcp_process+0x228>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	b29b      	uxth	r3, r3
 800e63a:	e001      	b.n	800e640 <tcp_process+0x22c>
 800e63c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d106      	bne.n	800e65e <tcp_process+0x24a>
 800e650:	4b13      	ldr	r3, [pc, #76]	; (800e6a0 <tcp_process+0x28c>)
 800e652:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e656:	491c      	ldr	r1, [pc, #112]	; (800e6c8 <tcp_process+0x2b4>)
 800e658:	4813      	ldr	r0, [pc, #76]	; (800e6a8 <tcp_process+0x294>)
 800e65a:	f006 fee1 	bl	8015420 <iprintf>
        --pcb->snd_queuelen;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e664:	3b01      	subs	r3, #1
 800e666:	b29a      	uxth	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e672:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d12a      	bne.n	800e6d0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e67e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d106      	bne.n	800e694 <tcp_process+0x280>
 800e686:	4b06      	ldr	r3, [pc, #24]	; (800e6a0 <tcp_process+0x28c>)
 800e688:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e68c:	490f      	ldr	r1, [pc, #60]	; (800e6cc <tcp_process+0x2b8>)
 800e68e:	4806      	ldr	r0, [pc, #24]	; (800e6a8 <tcp_process+0x294>)
 800e690:	f006 fec6 	bl	8015420 <iprintf>
          pcb->unsent = rseg->next;
 800e694:	69fb      	ldr	r3, [r7, #28]
 800e696:	681a      	ldr	r2, [r3, #0]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	66da      	str	r2, [r3, #108]	; 0x6c
 800e69c:	e01c      	b.n	800e6d8 <tcp_process+0x2c4>
 800e69e:	bf00      	nop
 800e6a0:	08017c68 	.word	0x08017c68
 800e6a4:	08017ea0 	.word	0x08017ea0
 800e6a8:	08017cb4 	.word	0x08017cb4
 800e6ac:	20040ae8 	.word	0x20040ae8
 800e6b0:	20040ae0 	.word	0x20040ae0
 800e6b4:	20040adc 	.word	0x20040adc
 800e6b8:	08017ebc 	.word	0x08017ebc
 800e6bc:	20040ae9 	.word	0x20040ae9
 800e6c0:	20040aa4 	.word	0x20040aa4
 800e6c4:	20040acc 	.word	0x20040acc
 800e6c8:	08017edc 	.word	0x08017edc
 800e6cc:	08017ef4 	.word	0x08017ef4
        } else {
          pcb->unacked = rseg->next;
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e6d8:	69f8      	ldr	r0, [r7, #28]
 800e6da:	f7fe fd22 	bl	800d122 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d104      	bne.n	800e6f0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e6ec:	861a      	strh	r2, [r3, #48]	; 0x30
 800e6ee:	e006      	b.n	800e6fe <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00a      	beq.n	800e71e <tcp_process+0x30a>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	6910      	ldr	r0, [r2, #16]
 800e712:	2200      	movs	r2, #0
 800e714:	6879      	ldr	r1, [r7, #4]
 800e716:	4798      	blx	r3
 800e718:	4603      	mov	r3, r0
 800e71a:	76bb      	strb	r3, [r7, #26]
 800e71c:	e001      	b.n	800e722 <tcp_process+0x30e>
 800e71e:	2300      	movs	r3, #0
 800e720:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e722:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e726:	f113 0f0d 	cmn.w	r3, #13
 800e72a:	d102      	bne.n	800e732 <tcp_process+0x31e>
          return ERR_ABRT;
 800e72c:	f06f 030c 	mvn.w	r3, #12
 800e730:	e250      	b.n	800ebd4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	8b5b      	ldrh	r3, [r3, #26]
 800e736:	f043 0302 	orr.w	r3, r3, #2
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e740:	e23a      	b.n	800ebb8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e742:	4b98      	ldr	r3, [pc, #608]	; (800e9a4 <tcp_process+0x590>)
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	f003 0310 	and.w	r3, r3, #16
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 8234 	beq.w	800ebb8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e750:	4b95      	ldr	r3, [pc, #596]	; (800e9a8 <tcp_process+0x594>)
 800e752:	6819      	ldr	r1, [r3, #0]
 800e754:	4b95      	ldr	r3, [pc, #596]	; (800e9ac <tcp_process+0x598>)
 800e756:	881b      	ldrh	r3, [r3, #0]
 800e758:	461a      	mov	r2, r3
 800e75a:	4b95      	ldr	r3, [pc, #596]	; (800e9b0 <tcp_process+0x59c>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e760:	4b94      	ldr	r3, [pc, #592]	; (800e9b4 <tcp_process+0x5a0>)
 800e762:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e764:	885b      	ldrh	r3, [r3, #2]
 800e766:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e768:	4a92      	ldr	r2, [pc, #584]	; (800e9b4 <tcp_process+0x5a0>)
 800e76a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e76c:	8812      	ldrh	r2, [r2, #0]
 800e76e:	b292      	uxth	r2, r2
 800e770:	9202      	str	r2, [sp, #8]
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	4b90      	ldr	r3, [pc, #576]	; (800e9b8 <tcp_process+0x5a4>)
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	4b90      	ldr	r3, [pc, #576]	; (800e9bc <tcp_process+0x5a8>)
 800e77a:	4602      	mov	r2, r0
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f002 fc85 	bl	801108c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e788:	2b05      	cmp	r3, #5
 800e78a:	f200 8215 	bhi.w	800ebb8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2200      	movs	r2, #0
 800e792:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f002 fa4f 	bl	8010c38 <tcp_rexmit_rto>
      break;
 800e79a:	e20d      	b.n	800ebb8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e79c:	4b81      	ldr	r3, [pc, #516]	; (800e9a4 <tcp_process+0x590>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	f003 0310 	and.w	r3, r3, #16
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f000 80a1 	beq.w	800e8ec <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e7aa:	4b7f      	ldr	r3, [pc, #508]	; (800e9a8 <tcp_process+0x594>)
 800e7ac:	681a      	ldr	r2, [r3, #0]
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7b2:	1ad3      	subs	r3, r2, r3
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	db7e      	blt.n	800e8b8 <tcp_process+0x4a4>
 800e7ba:	4b7b      	ldr	r3, [pc, #492]	; (800e9a8 <tcp_process+0x594>)
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7c2:	1ad3      	subs	r3, r2, r3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	dc77      	bgt.n	800e8b8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2204      	movs	r2, #4
 800e7cc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d102      	bne.n	800e7dc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e7d6:	23fa      	movs	r3, #250	; 0xfa
 800e7d8:	76bb      	strb	r3, [r7, #26]
 800e7da:	e01d      	b.n	800e818 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7e0:	699b      	ldr	r3, [r3, #24]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d106      	bne.n	800e7f4 <tcp_process+0x3e0>
 800e7e6:	4b76      	ldr	r3, [pc, #472]	; (800e9c0 <tcp_process+0x5ac>)
 800e7e8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e7ec:	4975      	ldr	r1, [pc, #468]	; (800e9c4 <tcp_process+0x5b0>)
 800e7ee:	4876      	ldr	r0, [pc, #472]	; (800e9c8 <tcp_process+0x5b4>)
 800e7f0:	f006 fe16 	bl	8015420 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00a      	beq.n	800e814 <tcp_process+0x400>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e802:	699b      	ldr	r3, [r3, #24]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	6910      	ldr	r0, [r2, #16]
 800e808:	2200      	movs	r2, #0
 800e80a:	6879      	ldr	r1, [r7, #4]
 800e80c:	4798      	blx	r3
 800e80e:	4603      	mov	r3, r0
 800e810:	76bb      	strb	r3, [r7, #26]
 800e812:	e001      	b.n	800e818 <tcp_process+0x404>
 800e814:	23f0      	movs	r3, #240	; 0xf0
 800e816:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e818:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00a      	beq.n	800e836 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e820:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e824:	f113 0f0d 	cmn.w	r3, #13
 800e828:	d002      	beq.n	800e830 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7fd ff8e 	bl	800c74c <tcp_abort>
            }
            return ERR_ABRT;
 800e830:	f06f 030c 	mvn.w	r3, #12
 800e834:	e1ce      	b.n	800ebd4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fae0 	bl	800edfc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e83c:	4b63      	ldr	r3, [pc, #396]	; (800e9cc <tcp_process+0x5b8>)
 800e83e:	881b      	ldrh	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d005      	beq.n	800e850 <tcp_process+0x43c>
            recv_acked--;
 800e844:	4b61      	ldr	r3, [pc, #388]	; (800e9cc <tcp_process+0x5b8>)
 800e846:	881b      	ldrh	r3, [r3, #0]
 800e848:	3b01      	subs	r3, #1
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	4b5f      	ldr	r3, [pc, #380]	; (800e9cc <tcp_process+0x5b8>)
 800e84e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e854:	009a      	lsls	r2, r3, #2
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e85a:	005b      	lsls	r3, r3, #1
 800e85c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e860:	428b      	cmp	r3, r1
 800e862:	bf38      	it	cc
 800e864:	460b      	movcc	r3, r1
 800e866:	429a      	cmp	r2, r3
 800e868:	d204      	bcs.n	800e874 <tcp_process+0x460>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e86e:	009b      	lsls	r3, r3, #2
 800e870:	b29b      	uxth	r3, r3
 800e872:	e00d      	b.n	800e890 <tcp_process+0x47c>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e878:	005b      	lsls	r3, r3, #1
 800e87a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e87e:	4293      	cmp	r3, r2
 800e880:	d904      	bls.n	800e88c <tcp_process+0x478>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	b29b      	uxth	r3, r3
 800e88a:	e001      	b.n	800e890 <tcp_process+0x47c>
 800e88c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e896:	4b4e      	ldr	r3, [pc, #312]	; (800e9d0 <tcp_process+0x5bc>)
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	f003 0320 	and.w	r3, r3, #32
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d037      	beq.n	800e912 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	8b5b      	ldrh	r3, [r3, #26]
 800e8a6:	f043 0302 	orr.w	r3, r3, #2
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2207      	movs	r2, #7
 800e8b4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e8b6:	e02c      	b.n	800e912 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8b8:	4b3b      	ldr	r3, [pc, #236]	; (800e9a8 <tcp_process+0x594>)
 800e8ba:	6819      	ldr	r1, [r3, #0]
 800e8bc:	4b3b      	ldr	r3, [pc, #236]	; (800e9ac <tcp_process+0x598>)
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	4b3b      	ldr	r3, [pc, #236]	; (800e9b0 <tcp_process+0x59c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8c8:	4b3a      	ldr	r3, [pc, #232]	; (800e9b4 <tcp_process+0x5a0>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8cc:	885b      	ldrh	r3, [r3, #2]
 800e8ce:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e8d0:	4a38      	ldr	r2, [pc, #224]	; (800e9b4 <tcp_process+0x5a0>)
 800e8d2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e8d4:	8812      	ldrh	r2, [r2, #0]
 800e8d6:	b292      	uxth	r2, r2
 800e8d8:	9202      	str	r2, [sp, #8]
 800e8da:	9301      	str	r3, [sp, #4]
 800e8dc:	4b36      	ldr	r3, [pc, #216]	; (800e9b8 <tcp_process+0x5a4>)
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	4b36      	ldr	r3, [pc, #216]	; (800e9bc <tcp_process+0x5a8>)
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f002 fbd1 	bl	801108c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e8ea:	e167      	b.n	800ebbc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e8ec:	4b2d      	ldr	r3, [pc, #180]	; (800e9a4 <tcp_process+0x590>)
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	f003 0302 	and.w	r3, r3, #2
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 8161 	beq.w	800ebbc <tcp_process+0x7a8>
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8fe:	1e5a      	subs	r2, r3, #1
 800e900:	4b2b      	ldr	r3, [pc, #172]	; (800e9b0 <tcp_process+0x59c>)
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	429a      	cmp	r2, r3
 800e906:	f040 8159 	bne.w	800ebbc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f002 f9b6 	bl	8010c7c <tcp_rexmit>
      break;
 800e910:	e154      	b.n	800ebbc <tcp_process+0x7a8>
 800e912:	e153      	b.n	800ebbc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 fa71 	bl	800edfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e91a:	4b2d      	ldr	r3, [pc, #180]	; (800e9d0 <tcp_process+0x5bc>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	f003 0320 	and.w	r3, r3, #32
 800e922:	2b00      	cmp	r3, #0
 800e924:	f000 814c 	beq.w	800ebc0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	8b5b      	ldrh	r3, [r3, #26]
 800e92c:	f043 0302 	orr.w	r3, r3, #2
 800e930:	b29a      	uxth	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2207      	movs	r2, #7
 800e93a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e93c:	e140      	b.n	800ebc0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 fa5c 	bl	800edfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e944:	4b22      	ldr	r3, [pc, #136]	; (800e9d0 <tcp_process+0x5bc>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	f003 0320 	and.w	r3, r3, #32
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d071      	beq.n	800ea34 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e950:	4b14      	ldr	r3, [pc, #80]	; (800e9a4 <tcp_process+0x590>)
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	f003 0310 	and.w	r3, r3, #16
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d060      	beq.n	800ea1e <tcp_process+0x60a>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e960:	4b11      	ldr	r3, [pc, #68]	; (800e9a8 <tcp_process+0x594>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d15a      	bne.n	800ea1e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d156      	bne.n	800ea1e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	8b5b      	ldrh	r3, [r3, #26]
 800e974:	f043 0302 	orr.w	r3, r3, #2
 800e978:	b29a      	uxth	r2, r3
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7fe fdbc 	bl	800d4fc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e984:	4b13      	ldr	r3, [pc, #76]	; (800e9d4 <tcp_process+0x5c0>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	687a      	ldr	r2, [r7, #4]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d105      	bne.n	800e99a <tcp_process+0x586>
 800e98e:	4b11      	ldr	r3, [pc, #68]	; (800e9d4 <tcp_process+0x5c0>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	4a0f      	ldr	r2, [pc, #60]	; (800e9d4 <tcp_process+0x5c0>)
 800e996:	6013      	str	r3, [r2, #0]
 800e998:	e02e      	b.n	800e9f8 <tcp_process+0x5e4>
 800e99a:	4b0e      	ldr	r3, [pc, #56]	; (800e9d4 <tcp_process+0x5c0>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	617b      	str	r3, [r7, #20]
 800e9a0:	e027      	b.n	800e9f2 <tcp_process+0x5de>
 800e9a2:	bf00      	nop
 800e9a4:	20040ae8 	.word	0x20040ae8
 800e9a8:	20040ae0 	.word	0x20040ae0
 800e9ac:	20040ae6 	.word	0x20040ae6
 800e9b0:	20040adc 	.word	0x20040adc
 800e9b4:	20040acc 	.word	0x20040acc
 800e9b8:	200252f8 	.word	0x200252f8
 800e9bc:	200252fc 	.word	0x200252fc
 800e9c0:	08017c68 	.word	0x08017c68
 800e9c4:	08017f08 	.word	0x08017f08
 800e9c8:	08017cb4 	.word	0x08017cb4
 800e9cc:	20040ae4 	.word	0x20040ae4
 800e9d0:	20040ae9 	.word	0x20040ae9
 800e9d4:	20040ab0 	.word	0x20040ab0
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d104      	bne.n	800e9ec <tcp_process+0x5d8>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	68da      	ldr	r2, [r3, #12]
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	60da      	str	r2, [r3, #12]
 800e9ea:	e005      	b.n	800e9f8 <tcp_process+0x5e4>
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d1ef      	bne.n	800e9d8 <tcp_process+0x5c4>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	60da      	str	r2, [r3, #12]
 800e9fe:	4b77      	ldr	r3, [pc, #476]	; (800ebdc <tcp_process+0x7c8>)
 800ea00:	2201      	movs	r2, #1
 800ea02:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	220a      	movs	r2, #10
 800ea08:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ea0a:	4b75      	ldr	r3, [pc, #468]	; (800ebe0 <tcp_process+0x7cc>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	60da      	str	r2, [r3, #12]
 800ea12:	4a73      	ldr	r2, [pc, #460]	; (800ebe0 <tcp_process+0x7cc>)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6013      	str	r3, [r2, #0]
 800ea18:	f002 fcfa 	bl	8011410 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ea1c:	e0d2      	b.n	800ebc4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	8b5b      	ldrh	r3, [r3, #26]
 800ea22:	f043 0302 	orr.w	r3, r3, #2
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2208      	movs	r2, #8
 800ea30:	751a      	strb	r2, [r3, #20]
      break;
 800ea32:	e0c7      	b.n	800ebc4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea34:	4b6b      	ldr	r3, [pc, #428]	; (800ebe4 <tcp_process+0x7d0>)
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	f003 0310 	and.w	r3, r3, #16
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f000 80c1 	beq.w	800ebc4 <tcp_process+0x7b0>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea46:	4b68      	ldr	r3, [pc, #416]	; (800ebe8 <tcp_process+0x7d4>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	f040 80ba 	bne.w	800ebc4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	f040 80b5 	bne.w	800ebc4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2206      	movs	r2, #6
 800ea5e:	751a      	strb	r2, [r3, #20]
      break;
 800ea60:	e0b0      	b.n	800ebc4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 f9ca 	bl	800edfc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ea68:	4b60      	ldr	r3, [pc, #384]	; (800ebec <tcp_process+0x7d8>)
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	f003 0320 	and.w	r3, r3, #32
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f000 80a9 	beq.w	800ebc8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	8b5b      	ldrh	r3, [r3, #26]
 800ea7a:	f043 0302 	orr.w	r3, r3, #2
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f7fe fd39 	bl	800d4fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ea8a:	4b59      	ldr	r3, [pc, #356]	; (800ebf0 <tcp_process+0x7dc>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d105      	bne.n	800eaa0 <tcp_process+0x68c>
 800ea94:	4b56      	ldr	r3, [pc, #344]	; (800ebf0 <tcp_process+0x7dc>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	68db      	ldr	r3, [r3, #12]
 800ea9a:	4a55      	ldr	r2, [pc, #340]	; (800ebf0 <tcp_process+0x7dc>)
 800ea9c:	6013      	str	r3, [r2, #0]
 800ea9e:	e013      	b.n	800eac8 <tcp_process+0x6b4>
 800eaa0:	4b53      	ldr	r3, [pc, #332]	; (800ebf0 <tcp_process+0x7dc>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	613b      	str	r3, [r7, #16]
 800eaa6:	e00c      	b.n	800eac2 <tcp_process+0x6ae>
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d104      	bne.n	800eabc <tcp_process+0x6a8>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	68da      	ldr	r2, [r3, #12]
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	60da      	str	r2, [r3, #12]
 800eaba:	e005      	b.n	800eac8 <tcp_process+0x6b4>
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	613b      	str	r3, [r7, #16]
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1ef      	bne.n	800eaa8 <tcp_process+0x694>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2200      	movs	r2, #0
 800eacc:	60da      	str	r2, [r3, #12]
 800eace:	4b43      	ldr	r3, [pc, #268]	; (800ebdc <tcp_process+0x7c8>)
 800ead0:	2201      	movs	r2, #1
 800ead2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	220a      	movs	r2, #10
 800ead8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eada:	4b41      	ldr	r3, [pc, #260]	; (800ebe0 <tcp_process+0x7cc>)
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	60da      	str	r2, [r3, #12]
 800eae2:	4a3f      	ldr	r2, [pc, #252]	; (800ebe0 <tcp_process+0x7cc>)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6013      	str	r3, [r2, #0]
 800eae8:	f002 fc92 	bl	8011410 <tcp_timer_needed>
      }
      break;
 800eaec:	e06c      	b.n	800ebc8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 f984 	bl	800edfc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eaf4:	4b3b      	ldr	r3, [pc, #236]	; (800ebe4 <tcp_process+0x7d0>)
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	f003 0310 	and.w	r3, r3, #16
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d065      	beq.n	800ebcc <tcp_process+0x7b8>
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb04:	4b38      	ldr	r3, [pc, #224]	; (800ebe8 <tcp_process+0x7d4>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d15f      	bne.n	800ebcc <tcp_process+0x7b8>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d15b      	bne.n	800ebcc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7fe fcf1 	bl	800d4fc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb1a:	4b35      	ldr	r3, [pc, #212]	; (800ebf0 <tcp_process+0x7dc>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d105      	bne.n	800eb30 <tcp_process+0x71c>
 800eb24:	4b32      	ldr	r3, [pc, #200]	; (800ebf0 <tcp_process+0x7dc>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68db      	ldr	r3, [r3, #12]
 800eb2a:	4a31      	ldr	r2, [pc, #196]	; (800ebf0 <tcp_process+0x7dc>)
 800eb2c:	6013      	str	r3, [r2, #0]
 800eb2e:	e013      	b.n	800eb58 <tcp_process+0x744>
 800eb30:	4b2f      	ldr	r3, [pc, #188]	; (800ebf0 <tcp_process+0x7dc>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	60fb      	str	r3, [r7, #12]
 800eb36:	e00c      	b.n	800eb52 <tcp_process+0x73e>
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	687a      	ldr	r2, [r7, #4]
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d104      	bne.n	800eb4c <tcp_process+0x738>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	68da      	ldr	r2, [r3, #12]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	60da      	str	r2, [r3, #12]
 800eb4a:	e005      	b.n	800eb58 <tcp_process+0x744>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d1ef      	bne.n	800eb38 <tcp_process+0x724>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	60da      	str	r2, [r3, #12]
 800eb5e:	4b1f      	ldr	r3, [pc, #124]	; (800ebdc <tcp_process+0x7c8>)
 800eb60:	2201      	movs	r2, #1
 800eb62:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	220a      	movs	r2, #10
 800eb68:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eb6a:	4b1d      	ldr	r3, [pc, #116]	; (800ebe0 <tcp_process+0x7cc>)
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	60da      	str	r2, [r3, #12]
 800eb72:	4a1b      	ldr	r2, [pc, #108]	; (800ebe0 <tcp_process+0x7cc>)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6013      	str	r3, [r2, #0]
 800eb78:	f002 fc4a 	bl	8011410 <tcp_timer_needed>
      }
      break;
 800eb7c:	e026      	b.n	800ebcc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f93c 	bl	800edfc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eb84:	4b17      	ldr	r3, [pc, #92]	; (800ebe4 <tcp_process+0x7d0>)
 800eb86:	781b      	ldrb	r3, [r3, #0]
 800eb88:	f003 0310 	and.w	r3, r3, #16
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d01f      	beq.n	800ebd0 <tcp_process+0x7bc>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb94:	4b14      	ldr	r3, [pc, #80]	; (800ebe8 <tcp_process+0x7d4>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d119      	bne.n	800ebd0 <tcp_process+0x7bc>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d115      	bne.n	800ebd0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800eba4:	4b11      	ldr	r3, [pc, #68]	; (800ebec <tcp_process+0x7d8>)
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	f043 0310 	orr.w	r3, r3, #16
 800ebac:	b2da      	uxtb	r2, r3
 800ebae:	4b0f      	ldr	r3, [pc, #60]	; (800ebec <tcp_process+0x7d8>)
 800ebb0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ebb2:	e00d      	b.n	800ebd0 <tcp_process+0x7bc>
    default:
      break;
 800ebb4:	bf00      	nop
 800ebb6:	e00c      	b.n	800ebd2 <tcp_process+0x7be>
      break;
 800ebb8:	bf00      	nop
 800ebba:	e00a      	b.n	800ebd2 <tcp_process+0x7be>
      break;
 800ebbc:	bf00      	nop
 800ebbe:	e008      	b.n	800ebd2 <tcp_process+0x7be>
      break;
 800ebc0:	bf00      	nop
 800ebc2:	e006      	b.n	800ebd2 <tcp_process+0x7be>
      break;
 800ebc4:	bf00      	nop
 800ebc6:	e004      	b.n	800ebd2 <tcp_process+0x7be>
      break;
 800ebc8:	bf00      	nop
 800ebca:	e002      	b.n	800ebd2 <tcp_process+0x7be>
      break;
 800ebcc:	bf00      	nop
 800ebce:	e000      	b.n	800ebd2 <tcp_process+0x7be>
      break;
 800ebd0:	bf00      	nop
  }
  return ERR_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3724      	adds	r7, #36	; 0x24
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd90      	pop	{r4, r7, pc}
 800ebdc:	20040ab8 	.word	0x20040ab8
 800ebe0:	20040ab4 	.word	0x20040ab4
 800ebe4:	20040ae8 	.word	0x20040ae8
 800ebe8:	20040ae0 	.word	0x20040ae0
 800ebec:	20040ae9 	.word	0x20040ae9
 800ebf0:	20040ab0 	.word	0x20040ab0

0800ebf4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ebf4:	b590      	push	{r4, r7, lr}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <tcp_oos_insert_segment+0x1e>
 800ec04:	4b3b      	ldr	r3, [pc, #236]	; (800ecf4 <tcp_oos_insert_segment+0x100>)
 800ec06:	f240 421f 	movw	r2, #1055	; 0x41f
 800ec0a:	493b      	ldr	r1, [pc, #236]	; (800ecf8 <tcp_oos_insert_segment+0x104>)
 800ec0c:	483b      	ldr	r0, [pc, #236]	; (800ecfc <tcp_oos_insert_segment+0x108>)
 800ec0e:	f006 fc07 	bl	8015420 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	899b      	ldrh	r3, [r3, #12]
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fb fb26 	bl	800a26c <lwip_htons>
 800ec20:	4603      	mov	r3, r0
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	f003 0301 	and.w	r3, r3, #1
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d028      	beq.n	800ec7e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ec2c:	6838      	ldr	r0, [r7, #0]
 800ec2e:	f7fe fa63 	bl	800d0f8 <tcp_segs_free>
    next = NULL;
 800ec32:	2300      	movs	r3, #0
 800ec34:	603b      	str	r3, [r7, #0]
 800ec36:	e056      	b.n	800ece6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	899b      	ldrh	r3, [r3, #12]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fb fb13 	bl	800a26c <lwip_htons>
 800ec46:	4603      	mov	r3, r0
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	f003 0301 	and.w	r3, r3, #1
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00d      	beq.n	800ec6e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	899b      	ldrh	r3, [r3, #12]
 800ec58:	b29c      	uxth	r4, r3
 800ec5a:	2001      	movs	r0, #1
 800ec5c:	f7fb fb06 	bl	800a26c <lwip_htons>
 800ec60:	4603      	mov	r3, r0
 800ec62:	461a      	mov	r2, r3
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	4322      	orrs	r2, r4
 800ec6a:	b292      	uxth	r2, r2
 800ec6c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ec78:	68f8      	ldr	r0, [r7, #12]
 800ec7a:	f7fe fa52 	bl	800d122 <tcp_seg_free>
    while (next &&
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00e      	beq.n	800eca2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	891b      	ldrh	r3, [r3, #8]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	4b1d      	ldr	r3, [pc, #116]	; (800ed00 <tcp_oos_insert_segment+0x10c>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	441a      	add	r2, r3
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	6839      	ldr	r1, [r7, #0]
 800ec98:	8909      	ldrh	r1, [r1, #8]
 800ec9a:	440b      	add	r3, r1
 800ec9c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	daca      	bge.n	800ec38 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d01e      	beq.n	800ece6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	891b      	ldrh	r3, [r3, #8]
 800ecac:	461a      	mov	r2, r3
 800ecae:	4b14      	ldr	r3, [pc, #80]	; (800ed00 <tcp_oos_insert_segment+0x10c>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	441a      	add	r2, r3
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	685b      	ldr	r3, [r3, #4]
 800ecba:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	dd12      	ble.n	800ece6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	4b0d      	ldr	r3, [pc, #52]	; (800ed00 <tcp_oos_insert_segment+0x10c>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	685a      	ldr	r2, [r3, #4]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	891b      	ldrh	r3, [r3, #8]
 800ecde:	4619      	mov	r1, r3
 800ece0:	4610      	mov	r0, r2
 800ece2:	f7fc fd1d 	bl	800b720 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	601a      	str	r2, [r3, #0]
}
 800ecec:	bf00      	nop
 800ecee:	3714      	adds	r7, #20
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd90      	pop	{r4, r7, pc}
 800ecf4:	08017c68 	.word	0x08017c68
 800ecf8:	08017f28 	.word	0x08017f28
 800ecfc:	08017cb4 	.word	0x08017cb4
 800ed00:	20040adc 	.word	0x20040adc

0800ed04 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ed04:	b5b0      	push	{r4, r5, r7, lr}
 800ed06:	b086      	sub	sp, #24
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
 800ed10:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ed12:	e03e      	b.n	800ed92 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7fc ff0e 	bl	800bb44 <pbuf_clen>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed32:	8a7a      	ldrh	r2, [r7, #18]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d906      	bls.n	800ed46 <tcp_free_acked_segments+0x42>
 800ed38:	4b2a      	ldr	r3, [pc, #168]	; (800ede4 <tcp_free_acked_segments+0xe0>)
 800ed3a:	f240 4257 	movw	r2, #1111	; 0x457
 800ed3e:	492a      	ldr	r1, [pc, #168]	; (800ede8 <tcp_free_acked_segments+0xe4>)
 800ed40:	482a      	ldr	r0, [pc, #168]	; (800edec <tcp_free_acked_segments+0xe8>)
 800ed42:	f006 fb6d 	bl	8015420 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ed4c:	8a7b      	ldrh	r3, [r7, #18]
 800ed4e:	1ad3      	subs	r3, r2, r3
 800ed50:	b29a      	uxth	r2, r3
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	891a      	ldrh	r2, [r3, #8]
 800ed5c:	4b24      	ldr	r3, [pc, #144]	; (800edf0 <tcp_free_acked_segments+0xec>)
 800ed5e:	881b      	ldrh	r3, [r3, #0]
 800ed60:	4413      	add	r3, r2
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	4b22      	ldr	r3, [pc, #136]	; (800edf0 <tcp_free_acked_segments+0xec>)
 800ed66:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ed68:	6978      	ldr	r0, [r7, #20]
 800ed6a:	f7fe f9da 	bl	800d122 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d00c      	beq.n	800ed92 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d109      	bne.n	800ed92 <tcp_free_acked_segments+0x8e>
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d106      	bne.n	800ed92 <tcp_free_acked_segments+0x8e>
 800ed84:	4b17      	ldr	r3, [pc, #92]	; (800ede4 <tcp_free_acked_segments+0xe0>)
 800ed86:	f240 4261 	movw	r2, #1121	; 0x461
 800ed8a:	491a      	ldr	r1, [pc, #104]	; (800edf4 <tcp_free_acked_segments+0xf0>)
 800ed8c:	4817      	ldr	r0, [pc, #92]	; (800edec <tcp_free_acked_segments+0xe8>)
 800ed8e:	f006 fb47 	bl	8015420 <iprintf>
  while (seg_list != NULL &&
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d020      	beq.n	800edda <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	68db      	ldr	r3, [r3, #12]
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fb fa79 	bl	800a296 <lwip_htonl>
 800eda4:	4604      	mov	r4, r0
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	891b      	ldrh	r3, [r3, #8]
 800edaa:	461d      	mov	r5, r3
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	899b      	ldrh	r3, [r3, #12]
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7fb fa59 	bl	800a26c <lwip_htons>
 800edba:	4603      	mov	r3, r0
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	f003 0303 	and.w	r3, r3, #3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <tcp_free_acked_segments+0xc6>
 800edc6:	2301      	movs	r3, #1
 800edc8:	e000      	b.n	800edcc <tcp_free_acked_segments+0xc8>
 800edca:	2300      	movs	r3, #0
 800edcc:	442b      	add	r3, r5
 800edce:	18e2      	adds	r2, r4, r3
 800edd0:	4b09      	ldr	r3, [pc, #36]	; (800edf8 <tcp_free_acked_segments+0xf4>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	dd9c      	ble.n	800ed14 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800edda:	68bb      	ldr	r3, [r7, #8]
}
 800eddc:	4618      	mov	r0, r3
 800edde:	3718      	adds	r7, #24
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bdb0      	pop	{r4, r5, r7, pc}
 800ede4:	08017c68 	.word	0x08017c68
 800ede8:	08017f50 	.word	0x08017f50
 800edec:	08017cb4 	.word	0x08017cb4
 800edf0:	20040ae4 	.word	0x20040ae4
 800edf4:	08017f78 	.word	0x08017f78
 800edf8:	20040ae0 	.word	0x20040ae0

0800edfc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800edfc:	b5b0      	push	{r4, r5, r7, lr}
 800edfe:	b094      	sub	sp, #80	; 0x50
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d106      	bne.n	800ee1c <tcp_receive+0x20>
 800ee0e:	4b91      	ldr	r3, [pc, #580]	; (800f054 <tcp_receive+0x258>)
 800ee10:	f240 427b 	movw	r2, #1147	; 0x47b
 800ee14:	4990      	ldr	r1, [pc, #576]	; (800f058 <tcp_receive+0x25c>)
 800ee16:	4891      	ldr	r0, [pc, #580]	; (800f05c <tcp_receive+0x260>)
 800ee18:	f006 fb02 	bl	8015420 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b03      	cmp	r3, #3
 800ee22:	d806      	bhi.n	800ee32 <tcp_receive+0x36>
 800ee24:	4b8b      	ldr	r3, [pc, #556]	; (800f054 <tcp_receive+0x258>)
 800ee26:	f240 427c 	movw	r2, #1148	; 0x47c
 800ee2a:	498d      	ldr	r1, [pc, #564]	; (800f060 <tcp_receive+0x264>)
 800ee2c:	488b      	ldr	r0, [pc, #556]	; (800f05c <tcp_receive+0x260>)
 800ee2e:	f006 faf7 	bl	8015420 <iprintf>

  if (flags & TCP_ACK) {
 800ee32:	4b8c      	ldr	r3, [pc, #560]	; (800f064 <tcp_receive+0x268>)
 800ee34:	781b      	ldrb	r3, [r3, #0]
 800ee36:	f003 0310 	and.w	r3, r3, #16
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f000 8264 	beq.w	800f308 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee46:	461a      	mov	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee4c:	4413      	add	r3, r2
 800ee4e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee54:	4b84      	ldr	r3, [pc, #528]	; (800f068 <tcp_receive+0x26c>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	db1b      	blt.n	800ee96 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ee62:	4b81      	ldr	r3, [pc, #516]	; (800f068 <tcp_receive+0x26c>)
 800ee64:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d106      	bne.n	800ee78 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ee6e:	4b7f      	ldr	r3, [pc, #508]	; (800f06c <tcp_receive+0x270>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	db0e      	blt.n	800ee96 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ee7c:	4b7b      	ldr	r3, [pc, #492]	; (800f06c <tcp_receive+0x270>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d125      	bne.n	800eed0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ee84:	4b7a      	ldr	r3, [pc, #488]	; (800f070 <tcp_receive+0x274>)
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	89db      	ldrh	r3, [r3, #14]
 800ee8a:	b29a      	uxth	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d91c      	bls.n	800eed0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ee96:	4b76      	ldr	r3, [pc, #472]	; (800f070 <tcp_receive+0x274>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	89db      	ldrh	r3, [r3, #14]
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d205      	bcs.n	800eec0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800eec0:	4b69      	ldr	r3, [pc, #420]	; (800f068 <tcp_receive+0x26c>)
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800eec8:	4b68      	ldr	r3, [pc, #416]	; (800f06c <tcp_receive+0x270>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800eed0:	4b66      	ldr	r3, [pc, #408]	; (800f06c <tcp_receive+0x270>)
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	dc58      	bgt.n	800ef90 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800eede:	4b65      	ldr	r3, [pc, #404]	; (800f074 <tcp_receive+0x278>)
 800eee0:	881b      	ldrh	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d14b      	bne.n	800ef7e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800eef0:	4413      	add	r3, r2
 800eef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d142      	bne.n	800ef7e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	db3d      	blt.n	800ef7e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef06:	4b59      	ldr	r3, [pc, #356]	; (800f06c <tcp_receive+0x270>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d137      	bne.n	800ef7e <tcp_receive+0x182>
              found_dupack = 1;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef18:	2bff      	cmp	r3, #255	; 0xff
 800ef1a:	d007      	beq.n	800ef2c <tcp_receive+0x130>
                ++pcb->dupacks;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef22:	3301      	adds	r3, #1
 800ef24:	b2da      	uxtb	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef32:	2b03      	cmp	r3, #3
 800ef34:	d91b      	bls.n	800ef6e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef40:	4413      	add	r3, r2
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d30a      	bcc.n	800ef64 <tcp_receive+0x168>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef58:	4413      	add	r3, r2
 800ef5a:	b29a      	uxth	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef62:	e004      	b.n	800ef6e <tcp_receive+0x172>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef74:	2b02      	cmp	r3, #2
 800ef76:	d902      	bls.n	800ef7e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f001 feeb 	bl	8010d54 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ef7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	f040 8161 	bne.w	800f248 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ef8e:	e15b      	b.n	800f248 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ef90:	4b36      	ldr	r3, [pc, #216]	; (800f06c <tcp_receive+0x270>)
 800ef92:	681a      	ldr	r2, [r3, #0]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	3b01      	subs	r3, #1
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	f2c0 814e 	blt.w	800f23e <tcp_receive+0x442>
 800efa2:	4b32      	ldr	r3, [pc, #200]	; (800f06c <tcp_receive+0x270>)
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	2b00      	cmp	r3, #0
 800efae:	f300 8146 	bgt.w	800f23e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	8b5b      	ldrh	r3, [r3, #26]
 800efb6:	f003 0304 	and.w	r3, r3, #4
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d010      	beq.n	800efe0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	8b5b      	ldrh	r3, [r3, #26]
 800efc2:	f023 0304 	bic.w	r3, r3, #4
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800efee:	10db      	asrs	r3, r3, #3
 800eff0:	b21b      	sxth	r3, r3
 800eff2:	b29a      	uxth	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800effa:	b29b      	uxth	r3, r3
 800effc:	4413      	add	r3, r2
 800effe:	b29b      	uxth	r3, r3
 800f000:	b21a      	sxth	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f008:	4b18      	ldr	r3, [pc, #96]	; (800f06c <tcp_receive+0x270>)
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f012:	b29b      	uxth	r3, r3
 800f014:	1ad3      	subs	r3, r2, r3
 800f016:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f020:	4b12      	ldr	r3, [pc, #72]	; (800f06c <tcp_receive+0x270>)
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	7d1b      	ldrb	r3, [r3, #20]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	f240 8097 	bls.w	800f160 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f03e:	429a      	cmp	r2, r3
 800f040:	d245      	bcs.n	800f0ce <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	8b5b      	ldrh	r3, [r3, #26]
 800f046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d014      	beq.n	800f078 <tcp_receive+0x27c>
 800f04e:	2301      	movs	r3, #1
 800f050:	e013      	b.n	800f07a <tcp_receive+0x27e>
 800f052:	bf00      	nop
 800f054:	08017c68 	.word	0x08017c68
 800f058:	08017f98 	.word	0x08017f98
 800f05c:	08017cb4 	.word	0x08017cb4
 800f060:	08017fb4 	.word	0x08017fb4
 800f064:	20040ae8 	.word	0x20040ae8
 800f068:	20040adc 	.word	0x20040adc
 800f06c:	20040ae0 	.word	0x20040ae0
 800f070:	20040acc 	.word	0x20040acc
 800f074:	20040ae6 	.word	0x20040ae6
 800f078:	2302      	movs	r3, #2
 800f07a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f07e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f082:	b29a      	uxth	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f088:	fb12 f303 	smulbb	r3, r2, r3
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f090:	4293      	cmp	r3, r2
 800f092:	bf28      	it	cs
 800f094:	4613      	movcs	r3, r2
 800f096:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f09e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0a0:	4413      	add	r3, r2
 800f0a2:	b29a      	uxth	r2, r3
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d309      	bcc.n	800f0c2 <tcp_receive+0x2c6>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0b6:	4413      	add	r3, r2
 800f0b8:	b29a      	uxth	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f0c0:	e04e      	b.n	800f160 <tcp_receive+0x364>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f0cc:	e048      	b.n	800f160 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f0d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0d6:	4413      	add	r3, r2
 800f0d8:	b29a      	uxth	r2, r3
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d309      	bcc.n	800f0f8 <tcp_receive+0x2fc>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f0ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0ec:	4413      	add	r3, r2
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0f6:	e004      	b.n	800f102 <tcp_receive+0x306>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f10e:	429a      	cmp	r2, r3
 800f110:	d326      	bcc.n	800f160 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	b29a      	uxth	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f132:	4413      	add	r3, r2
 800f134:	b29a      	uxth	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d30a      	bcc.n	800f156 <tcp_receive+0x35a>
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f14a:	4413      	add	r3, r2
 800f14c:	b29a      	uxth	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f154:	e004      	b.n	800f160 <tcp_receive+0x364>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f15c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f168:	4a98      	ldr	r2, [pc, #608]	; (800f3cc <tcp_receive+0x5d0>)
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f7ff fdca 	bl	800ed04 <tcp_free_acked_segments>
 800f170:	4602      	mov	r2, r0
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f17e:	4a94      	ldr	r2, [pc, #592]	; (800f3d0 <tcp_receive+0x5d4>)
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff fdbf 	bl	800ed04 <tcp_free_acked_segments>
 800f186:	4602      	mov	r2, r0
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f190:	2b00      	cmp	r3, #0
 800f192:	d104      	bne.n	800f19e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f19a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f19c:	e002      	b.n	800f1a4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d103      	bne.n	800f1ba <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f1c0:	4b84      	ldr	r3, [pc, #528]	; (800f3d4 <tcp_receive+0x5d8>)
 800f1c2:	881b      	ldrh	r3, [r3, #0]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	8b5b      	ldrh	r3, [r3, #26]
 800f1d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d035      	beq.n	800f246 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d118      	bne.n	800f214 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00c      	beq.n	800f204 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fb f84d 	bl	800a296 <lwip_htonl>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f200:	2b00      	cmp	r3, #0
 800f202:	dc20      	bgt.n	800f246 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	8b5b      	ldrh	r3, [r3, #26]
 800f208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f20c:	b29a      	uxth	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f212:	e018      	b.n	800f246 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	4618      	mov	r0, r3
 800f222:	f7fb f838 	bl	800a296 <lwip_htonl>
 800f226:	4603      	mov	r3, r0
 800f228:	1ae3      	subs	r3, r4, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	dc0b      	bgt.n	800f246 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	8b5b      	ldrh	r3, [r3, #26]
 800f232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f236:	b29a      	uxth	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f23c:	e003      	b.n	800f246 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f001 ff76 	bl	8011130 <tcp_send_empty_ack>
 800f244:	e000      	b.n	800f248 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f246:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d05b      	beq.n	800f308 <tcp_receive+0x50c>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f254:	4b60      	ldr	r3, [pc, #384]	; (800f3d8 <tcp_receive+0x5dc>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	da54      	bge.n	800f308 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f25e:	4b5f      	ldr	r3, [pc, #380]	; (800f3dc <tcp_receive+0x5e0>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	b29a      	uxth	r2, r3
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f268:	b29b      	uxth	r3, r3
 800f26a:	1ad3      	subs	r3, r2, r3
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f272:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f27c:	10db      	asrs	r3, r3, #3
 800f27e:	b21b      	sxth	r3, r3
 800f280:	b29b      	uxth	r3, r3
 800f282:	1ad3      	subs	r3, r2, r3
 800f284:	b29b      	uxth	r3, r3
 800f286:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f290:	b29a      	uxth	r2, r3
 800f292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f296:	4413      	add	r3, r2
 800f298:	b29b      	uxth	r3, r3
 800f29a:	b21a      	sxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f2a0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	da05      	bge.n	800f2b4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f2a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f2ac:	425b      	negs	r3, r3
 800f2ae:	b29b      	uxth	r3, r3
 800f2b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f2b4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f2be:	109b      	asrs	r3, r3, #2
 800f2c0:	b21b      	sxth	r3, r3
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	1ad3      	subs	r3, r2, r3
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f2d2:	b29a      	uxth	r2, r3
 800f2d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f2d8:	4413      	add	r3, r2
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	b21a      	sxth	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f2e8:	10db      	asrs	r3, r3, #3
 800f2ea:	b21b      	sxth	r3, r3
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f2f4:	b29b      	uxth	r3, r3
 800f2f6:	4413      	add	r3, r2
 800f2f8:	b29b      	uxth	r3, r3
 800f2fa:	b21a      	sxth	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2200      	movs	r2, #0
 800f306:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f308:	4b35      	ldr	r3, [pc, #212]	; (800f3e0 <tcp_receive+0x5e4>)
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f000 84e2 	beq.w	800fcd6 <tcp_receive+0xeda>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	7d1b      	ldrb	r3, [r3, #20]
 800f316:	2b06      	cmp	r3, #6
 800f318:	f200 84dd 	bhi.w	800fcd6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f320:	4b30      	ldr	r3, [pc, #192]	; (800f3e4 <tcp_receive+0x5e8>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	1ad3      	subs	r3, r2, r3
 800f326:	3b01      	subs	r3, #1
 800f328:	2b00      	cmp	r3, #0
 800f32a:	f2c0 808f 	blt.w	800f44c <tcp_receive+0x650>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f332:	4b2b      	ldr	r3, [pc, #172]	; (800f3e0 <tcp_receive+0x5e4>)
 800f334:	881b      	ldrh	r3, [r3, #0]
 800f336:	4619      	mov	r1, r3
 800f338:	4b2a      	ldr	r3, [pc, #168]	; (800f3e4 <tcp_receive+0x5e8>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	440b      	add	r3, r1
 800f33e:	1ad3      	subs	r3, r2, r3
 800f340:	3301      	adds	r3, #1
 800f342:	2b00      	cmp	r3, #0
 800f344:	f300 8082 	bgt.w	800f44c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f348:	4b27      	ldr	r3, [pc, #156]	; (800f3e8 <tcp_receive+0x5ec>)
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f352:	4b24      	ldr	r3, [pc, #144]	; (800f3e4 <tcp_receive+0x5e8>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	1ad3      	subs	r3, r2, r3
 800f358:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f35a:	4b23      	ldr	r3, [pc, #140]	; (800f3e8 <tcp_receive+0x5ec>)
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d106      	bne.n	800f370 <tcp_receive+0x574>
 800f362:	4b22      	ldr	r3, [pc, #136]	; (800f3ec <tcp_receive+0x5f0>)
 800f364:	f240 5294 	movw	r2, #1428	; 0x594
 800f368:	4921      	ldr	r1, [pc, #132]	; (800f3f0 <tcp_receive+0x5f4>)
 800f36a:	4822      	ldr	r0, [pc, #136]	; (800f3f4 <tcp_receive+0x5f8>)
 800f36c:	f006 f858 	bl	8015420 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f372:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f376:	4293      	cmp	r3, r2
 800f378:	d906      	bls.n	800f388 <tcp_receive+0x58c>
 800f37a:	4b1c      	ldr	r3, [pc, #112]	; (800f3ec <tcp_receive+0x5f0>)
 800f37c:	f240 5295 	movw	r2, #1429	; 0x595
 800f380:	491d      	ldr	r1, [pc, #116]	; (800f3f8 <tcp_receive+0x5fc>)
 800f382:	481c      	ldr	r0, [pc, #112]	; (800f3f4 <tcp_receive+0x5f8>)
 800f384:	f006 f84c 	bl	8015420 <iprintf>
      off = (u16_t)off32;
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f38e:	4b16      	ldr	r3, [pc, #88]	; (800f3e8 <tcp_receive+0x5ec>)
 800f390:	685b      	ldr	r3, [r3, #4]
 800f392:	891b      	ldrh	r3, [r3, #8]
 800f394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f398:	429a      	cmp	r2, r3
 800f39a:	d906      	bls.n	800f3aa <tcp_receive+0x5ae>
 800f39c:	4b13      	ldr	r3, [pc, #76]	; (800f3ec <tcp_receive+0x5f0>)
 800f39e:	f240 5297 	movw	r2, #1431	; 0x597
 800f3a2:	4916      	ldr	r1, [pc, #88]	; (800f3fc <tcp_receive+0x600>)
 800f3a4:	4813      	ldr	r0, [pc, #76]	; (800f3f4 <tcp_receive+0x5f8>)
 800f3a6:	f006 f83b 	bl	8015420 <iprintf>
      inseg.len -= off;
 800f3aa:	4b0f      	ldr	r3, [pc, #60]	; (800f3e8 <tcp_receive+0x5ec>)
 800f3ac:	891a      	ldrh	r2, [r3, #8]
 800f3ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <tcp_receive+0x5ec>)
 800f3b8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f3ba:	4b0b      	ldr	r3, [pc, #44]	; (800f3e8 <tcp_receive+0x5ec>)
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	891a      	ldrh	r2, [r3, #8]
 800f3c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f3c4:	1ad3      	subs	r3, r2, r3
 800f3c6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f3c8:	e02a      	b.n	800f420 <tcp_receive+0x624>
 800f3ca:	bf00      	nop
 800f3cc:	08017fd0 	.word	0x08017fd0
 800f3d0:	08017fd8 	.word	0x08017fd8
 800f3d4:	20040ae4 	.word	0x20040ae4
 800f3d8:	20040ae0 	.word	0x20040ae0
 800f3dc:	20040aa4 	.word	0x20040aa4
 800f3e0:	20040ae6 	.word	0x20040ae6
 800f3e4:	20040adc 	.word	0x20040adc
 800f3e8:	20040abc 	.word	0x20040abc
 800f3ec:	08017c68 	.word	0x08017c68
 800f3f0:	08017fe0 	.word	0x08017fe0
 800f3f4:	08017cb4 	.word	0x08017cb4
 800f3f8:	08017ff0 	.word	0x08017ff0
 800f3fc:	08018000 	.word	0x08018000
        off -= p->len;
 800f400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f402:	895b      	ldrh	r3, [r3, #10]
 800f404:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f408:	1ad3      	subs	r3, r2, r3
 800f40a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f410:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f412:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f416:	2200      	movs	r2, #0
 800f418:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f422:	895b      	ldrh	r3, [r3, #10]
 800f424:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f428:	429a      	cmp	r2, r3
 800f42a:	d8e9      	bhi.n	800f400 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f42c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f430:	4619      	mov	r1, r3
 800f432:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f434:	f7fc fa72 	bl	800b91c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43c:	4a91      	ldr	r2, [pc, #580]	; (800f684 <tcp_receive+0x888>)
 800f43e:	6013      	str	r3, [r2, #0]
 800f440:	4b91      	ldr	r3, [pc, #580]	; (800f688 <tcp_receive+0x88c>)
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	4a8f      	ldr	r2, [pc, #572]	; (800f684 <tcp_receive+0x888>)
 800f446:	6812      	ldr	r2, [r2, #0]
 800f448:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f44a:	e00d      	b.n	800f468 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f44c:	4b8d      	ldr	r3, [pc, #564]	; (800f684 <tcp_receive+0x888>)
 800f44e:	681a      	ldr	r2, [r3, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	2b00      	cmp	r3, #0
 800f458:	da06      	bge.n	800f468 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	8b5b      	ldrh	r3, [r3, #26]
 800f45e:	f043 0302 	orr.w	r3, r3, #2
 800f462:	b29a      	uxth	r2, r3
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f468:	4b86      	ldr	r3, [pc, #536]	; (800f684 <tcp_receive+0x888>)
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	f2c0 842a 	blt.w	800fccc <tcp_receive+0xed0>
 800f478:	4b82      	ldr	r3, [pc, #520]	; (800f684 <tcp_receive+0x888>)
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f480:	6879      	ldr	r1, [r7, #4]
 800f482:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f484:	440b      	add	r3, r1
 800f486:	1ad3      	subs	r3, r2, r3
 800f488:	3301      	adds	r3, #1
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f300 841e 	bgt.w	800fccc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f494:	4b7b      	ldr	r3, [pc, #492]	; (800f684 <tcp_receive+0x888>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	429a      	cmp	r2, r3
 800f49a:	f040 829a 	bne.w	800f9d2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f49e:	4b7a      	ldr	r3, [pc, #488]	; (800f688 <tcp_receive+0x88c>)
 800f4a0:	891c      	ldrh	r4, [r3, #8]
 800f4a2:	4b79      	ldr	r3, [pc, #484]	; (800f688 <tcp_receive+0x88c>)
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	899b      	ldrh	r3, [r3, #12]
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7fa fede 	bl	800a26c <lwip_htons>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	f003 0303 	and.w	r3, r3, #3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d001      	beq.n	800f4c0 <tcp_receive+0x6c4>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e000      	b.n	800f4c2 <tcp_receive+0x6c6>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	4423      	add	r3, r4
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	4b71      	ldr	r3, [pc, #452]	; (800f68c <tcp_receive+0x890>)
 800f4c8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f4ce:	4b6f      	ldr	r3, [pc, #444]	; (800f68c <tcp_receive+0x890>)
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d275      	bcs.n	800f5c2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f4d6:	4b6c      	ldr	r3, [pc, #432]	; (800f688 <tcp_receive+0x88c>)
 800f4d8:	68db      	ldr	r3, [r3, #12]
 800f4da:	899b      	ldrh	r3, [r3, #12]
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fa fec4 	bl	800a26c <lwip_htons>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	f003 0301 	and.w	r3, r3, #1
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d01f      	beq.n	800f530 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f4f0:	4b65      	ldr	r3, [pc, #404]	; (800f688 <tcp_receive+0x88c>)
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	899b      	ldrh	r3, [r3, #12]
 800f4f6:	b29b      	uxth	r3, r3
 800f4f8:	b21b      	sxth	r3, r3
 800f4fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f4fe:	b21c      	sxth	r4, r3
 800f500:	4b61      	ldr	r3, [pc, #388]	; (800f688 <tcp_receive+0x88c>)
 800f502:	68db      	ldr	r3, [r3, #12]
 800f504:	899b      	ldrh	r3, [r3, #12]
 800f506:	b29b      	uxth	r3, r3
 800f508:	4618      	mov	r0, r3
 800f50a:	f7fa feaf 	bl	800a26c <lwip_htons>
 800f50e:	4603      	mov	r3, r0
 800f510:	b2db      	uxtb	r3, r3
 800f512:	b29b      	uxth	r3, r3
 800f514:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f518:	b29b      	uxth	r3, r3
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fa fea6 	bl	800a26c <lwip_htons>
 800f520:	4603      	mov	r3, r0
 800f522:	b21b      	sxth	r3, r3
 800f524:	4323      	orrs	r3, r4
 800f526:	b21a      	sxth	r2, r3
 800f528:	4b57      	ldr	r3, [pc, #348]	; (800f688 <tcp_receive+0x88c>)
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	b292      	uxth	r2, r2
 800f52e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f534:	4b54      	ldr	r3, [pc, #336]	; (800f688 <tcp_receive+0x88c>)
 800f536:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f538:	4b53      	ldr	r3, [pc, #332]	; (800f688 <tcp_receive+0x88c>)
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	899b      	ldrh	r3, [r3, #12]
 800f53e:	b29b      	uxth	r3, r3
 800f540:	4618      	mov	r0, r3
 800f542:	f7fa fe93 	bl	800a26c <lwip_htons>
 800f546:	4603      	mov	r3, r0
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	f003 0302 	and.w	r3, r3, #2
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d005      	beq.n	800f55e <tcp_receive+0x762>
            inseg.len -= 1;
 800f552:	4b4d      	ldr	r3, [pc, #308]	; (800f688 <tcp_receive+0x88c>)
 800f554:	891b      	ldrh	r3, [r3, #8]
 800f556:	3b01      	subs	r3, #1
 800f558:	b29a      	uxth	r2, r3
 800f55a:	4b4b      	ldr	r3, [pc, #300]	; (800f688 <tcp_receive+0x88c>)
 800f55c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f55e:	4b4a      	ldr	r3, [pc, #296]	; (800f688 <tcp_receive+0x88c>)
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	4a49      	ldr	r2, [pc, #292]	; (800f688 <tcp_receive+0x88c>)
 800f564:	8912      	ldrh	r2, [r2, #8]
 800f566:	4611      	mov	r1, r2
 800f568:	4618      	mov	r0, r3
 800f56a:	f7fc f8d9 	bl	800b720 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f56e:	4b46      	ldr	r3, [pc, #280]	; (800f688 <tcp_receive+0x88c>)
 800f570:	891c      	ldrh	r4, [r3, #8]
 800f572:	4b45      	ldr	r3, [pc, #276]	; (800f688 <tcp_receive+0x88c>)
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	899b      	ldrh	r3, [r3, #12]
 800f578:	b29b      	uxth	r3, r3
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fa fe76 	bl	800a26c <lwip_htons>
 800f580:	4603      	mov	r3, r0
 800f582:	b2db      	uxtb	r3, r3
 800f584:	f003 0303 	and.w	r3, r3, #3
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d001      	beq.n	800f590 <tcp_receive+0x794>
 800f58c:	2301      	movs	r3, #1
 800f58e:	e000      	b.n	800f592 <tcp_receive+0x796>
 800f590:	2300      	movs	r3, #0
 800f592:	4423      	add	r3, r4
 800f594:	b29a      	uxth	r2, r3
 800f596:	4b3d      	ldr	r3, [pc, #244]	; (800f68c <tcp_receive+0x890>)
 800f598:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f59a:	4b3c      	ldr	r3, [pc, #240]	; (800f68c <tcp_receive+0x890>)
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	461a      	mov	r2, r3
 800f5a0:	4b38      	ldr	r3, [pc, #224]	; (800f684 <tcp_receive+0x888>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	441a      	add	r2, r3
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5aa:	6879      	ldr	r1, [r7, #4]
 800f5ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f5ae:	440b      	add	r3, r1
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	d006      	beq.n	800f5c2 <tcp_receive+0x7c6>
 800f5b4:	4b36      	ldr	r3, [pc, #216]	; (800f690 <tcp_receive+0x894>)
 800f5b6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f5ba:	4936      	ldr	r1, [pc, #216]	; (800f694 <tcp_receive+0x898>)
 800f5bc:	4836      	ldr	r0, [pc, #216]	; (800f698 <tcp_receive+0x89c>)
 800f5be:	f005 ff2f 	bl	8015420 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	f000 80e7 	beq.w	800f79a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f5cc:	4b2e      	ldr	r3, [pc, #184]	; (800f688 <tcp_receive+0x88c>)
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	899b      	ldrh	r3, [r3, #12]
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7fa fe49 	bl	800a26c <lwip_htons>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	b2db      	uxtb	r3, r3
 800f5de:	f003 0301 	and.w	r3, r3, #1
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d010      	beq.n	800f608 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f5e6:	e00a      	b.n	800f5fe <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5ec:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f7fd fd92 	bl	800d122 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f602:	2b00      	cmp	r3, #0
 800f604:	d1f0      	bne.n	800f5e8 <tcp_receive+0x7ec>
 800f606:	e0c8      	b.n	800f79a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f60c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f60e:	e052      	b.n	800f6b6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	899b      	ldrh	r3, [r3, #12]
 800f616:	b29b      	uxth	r3, r3
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fa fe27 	bl	800a26c <lwip_htons>
 800f61e:	4603      	mov	r3, r0
 800f620:	b2db      	uxtb	r3, r3
 800f622:	f003 0301 	and.w	r3, r3, #1
 800f626:	2b00      	cmp	r3, #0
 800f628:	d03d      	beq.n	800f6a6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f62a:	4b17      	ldr	r3, [pc, #92]	; (800f688 <tcp_receive+0x88c>)
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	899b      	ldrh	r3, [r3, #12]
 800f630:	b29b      	uxth	r3, r3
 800f632:	4618      	mov	r0, r3
 800f634:	f7fa fe1a 	bl	800a26c <lwip_htons>
 800f638:	4603      	mov	r3, r0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f640:	2b00      	cmp	r3, #0
 800f642:	d130      	bne.n	800f6a6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f644:	4b10      	ldr	r3, [pc, #64]	; (800f688 <tcp_receive+0x88c>)
 800f646:	68db      	ldr	r3, [r3, #12]
 800f648:	899b      	ldrh	r3, [r3, #12]
 800f64a:	b29c      	uxth	r4, r3
 800f64c:	2001      	movs	r0, #1
 800f64e:	f7fa fe0d 	bl	800a26c <lwip_htons>
 800f652:	4603      	mov	r3, r0
 800f654:	461a      	mov	r2, r3
 800f656:	4b0c      	ldr	r3, [pc, #48]	; (800f688 <tcp_receive+0x88c>)
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	4322      	orrs	r2, r4
 800f65c:	b292      	uxth	r2, r2
 800f65e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f660:	4b09      	ldr	r3, [pc, #36]	; (800f688 <tcp_receive+0x88c>)
 800f662:	891c      	ldrh	r4, [r3, #8]
 800f664:	4b08      	ldr	r3, [pc, #32]	; (800f688 <tcp_receive+0x88c>)
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	899b      	ldrh	r3, [r3, #12]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fa fdfd 	bl	800a26c <lwip_htons>
 800f672:	4603      	mov	r3, r0
 800f674:	b2db      	uxtb	r3, r3
 800f676:	f003 0303 	and.w	r3, r3, #3
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00e      	beq.n	800f69c <tcp_receive+0x8a0>
 800f67e:	2301      	movs	r3, #1
 800f680:	e00d      	b.n	800f69e <tcp_receive+0x8a2>
 800f682:	bf00      	nop
 800f684:	20040adc 	.word	0x20040adc
 800f688:	20040abc 	.word	0x20040abc
 800f68c:	20040ae6 	.word	0x20040ae6
 800f690:	08017c68 	.word	0x08017c68
 800f694:	08018010 	.word	0x08018010
 800f698:	08017cb4 	.word	0x08017cb4
 800f69c:	2300      	movs	r3, #0
 800f69e:	4423      	add	r3, r4
 800f6a0:	b29a      	uxth	r2, r3
 800f6a2:	4b98      	ldr	r3, [pc, #608]	; (800f904 <tcp_receive+0xb08>)
 800f6a4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6a8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f6b0:	6938      	ldr	r0, [r7, #16]
 800f6b2:	f7fd fd36 	bl	800d122 <tcp_seg_free>
            while (next &&
 800f6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00e      	beq.n	800f6da <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f6bc:	4b91      	ldr	r3, [pc, #580]	; (800f904 <tcp_receive+0xb08>)
 800f6be:	881b      	ldrh	r3, [r3, #0]
 800f6c0:	461a      	mov	r2, r3
 800f6c2:	4b91      	ldr	r3, [pc, #580]	; (800f908 <tcp_receive+0xb0c>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	441a      	add	r2, r3
 800f6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f6d0:	8909      	ldrh	r1, [r1, #8]
 800f6d2:	440b      	add	r3, r1
 800f6d4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	da9a      	bge.n	800f610 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d059      	beq.n	800f794 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f6e0:	4b88      	ldr	r3, [pc, #544]	; (800f904 <tcp_receive+0xb08>)
 800f6e2:	881b      	ldrh	r3, [r3, #0]
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	4b88      	ldr	r3, [pc, #544]	; (800f908 <tcp_receive+0xb0c>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	441a      	add	r2, r3
 800f6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	dd4d      	ble.n	800f794 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6fa:	68db      	ldr	r3, [r3, #12]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	4b81      	ldr	r3, [pc, #516]	; (800f908 <tcp_receive+0xb0c>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	b29b      	uxth	r3, r3
 800f706:	1ad3      	subs	r3, r2, r3
 800f708:	b29a      	uxth	r2, r3
 800f70a:	4b80      	ldr	r3, [pc, #512]	; (800f90c <tcp_receive+0xb10>)
 800f70c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f70e:	4b7f      	ldr	r3, [pc, #508]	; (800f90c <tcp_receive+0xb10>)
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	899b      	ldrh	r3, [r3, #12]
 800f714:	b29b      	uxth	r3, r3
 800f716:	4618      	mov	r0, r3
 800f718:	f7fa fda8 	bl	800a26c <lwip_htons>
 800f71c:	4603      	mov	r3, r0
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	f003 0302 	and.w	r3, r3, #2
 800f724:	2b00      	cmp	r3, #0
 800f726:	d005      	beq.n	800f734 <tcp_receive+0x938>
                inseg.len -= 1;
 800f728:	4b78      	ldr	r3, [pc, #480]	; (800f90c <tcp_receive+0xb10>)
 800f72a:	891b      	ldrh	r3, [r3, #8]
 800f72c:	3b01      	subs	r3, #1
 800f72e:	b29a      	uxth	r2, r3
 800f730:	4b76      	ldr	r3, [pc, #472]	; (800f90c <tcp_receive+0xb10>)
 800f732:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f734:	4b75      	ldr	r3, [pc, #468]	; (800f90c <tcp_receive+0xb10>)
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	4a74      	ldr	r2, [pc, #464]	; (800f90c <tcp_receive+0xb10>)
 800f73a:	8912      	ldrh	r2, [r2, #8]
 800f73c:	4611      	mov	r1, r2
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fb ffee 	bl	800b720 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f744:	4b71      	ldr	r3, [pc, #452]	; (800f90c <tcp_receive+0xb10>)
 800f746:	891c      	ldrh	r4, [r3, #8]
 800f748:	4b70      	ldr	r3, [pc, #448]	; (800f90c <tcp_receive+0xb10>)
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	899b      	ldrh	r3, [r3, #12]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	4618      	mov	r0, r3
 800f752:	f7fa fd8b 	bl	800a26c <lwip_htons>
 800f756:	4603      	mov	r3, r0
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	f003 0303 	and.w	r3, r3, #3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d001      	beq.n	800f766 <tcp_receive+0x96a>
 800f762:	2301      	movs	r3, #1
 800f764:	e000      	b.n	800f768 <tcp_receive+0x96c>
 800f766:	2300      	movs	r3, #0
 800f768:	4423      	add	r3, r4
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	4b65      	ldr	r3, [pc, #404]	; (800f904 <tcp_receive+0xb08>)
 800f76e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f770:	4b64      	ldr	r3, [pc, #400]	; (800f904 <tcp_receive+0xb08>)
 800f772:	881b      	ldrh	r3, [r3, #0]
 800f774:	461a      	mov	r2, r3
 800f776:	4b64      	ldr	r3, [pc, #400]	; (800f908 <tcp_receive+0xb0c>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	441a      	add	r2, r3
 800f77c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	685b      	ldr	r3, [r3, #4]
 800f782:	429a      	cmp	r2, r3
 800f784:	d006      	beq.n	800f794 <tcp_receive+0x998>
 800f786:	4b62      	ldr	r3, [pc, #392]	; (800f910 <tcp_receive+0xb14>)
 800f788:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f78c:	4961      	ldr	r1, [pc, #388]	; (800f914 <tcp_receive+0xb18>)
 800f78e:	4862      	ldr	r0, [pc, #392]	; (800f918 <tcp_receive+0xb1c>)
 800f790:	f005 fe46 	bl	8015420 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f798:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f79a:	4b5a      	ldr	r3, [pc, #360]	; (800f904 <tcp_receive+0xb08>)
 800f79c:	881b      	ldrh	r3, [r3, #0]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4b59      	ldr	r3, [pc, #356]	; (800f908 <tcp_receive+0xb0c>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	441a      	add	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7ae:	4b55      	ldr	r3, [pc, #340]	; (800f904 <tcp_receive+0xb08>)
 800f7b0:	881b      	ldrh	r3, [r3, #0]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d206      	bcs.n	800f7c4 <tcp_receive+0x9c8>
 800f7b6:	4b56      	ldr	r3, [pc, #344]	; (800f910 <tcp_receive+0xb14>)
 800f7b8:	f240 6207 	movw	r2, #1543	; 0x607
 800f7bc:	4957      	ldr	r1, [pc, #348]	; (800f91c <tcp_receive+0xb20>)
 800f7be:	4856      	ldr	r0, [pc, #344]	; (800f918 <tcp_receive+0xb1c>)
 800f7c0:	f005 fe2e 	bl	8015420 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7c8:	4b4e      	ldr	r3, [pc, #312]	; (800f904 <tcp_receive+0xb08>)
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7fc ffc5 	bl	800c764 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f7da:	4b4c      	ldr	r3, [pc, #304]	; (800f90c <tcp_receive+0xb10>)
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	891b      	ldrh	r3, [r3, #8]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d006      	beq.n	800f7f2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f7e4:	4b49      	ldr	r3, [pc, #292]	; (800f90c <tcp_receive+0xb10>)
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	4a4d      	ldr	r2, [pc, #308]	; (800f920 <tcp_receive+0xb24>)
 800f7ea:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f7ec:	4b47      	ldr	r3, [pc, #284]	; (800f90c <tcp_receive+0xb10>)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f7f2:	4b46      	ldr	r3, [pc, #280]	; (800f90c <tcp_receive+0xb10>)
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	899b      	ldrh	r3, [r3, #12]
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fa fd36 	bl	800a26c <lwip_htons>
 800f800:	4603      	mov	r3, r0
 800f802:	b2db      	uxtb	r3, r3
 800f804:	f003 0301 	and.w	r3, r3, #1
 800f808:	2b00      	cmp	r3, #0
 800f80a:	f000 80b8 	beq.w	800f97e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f80e:	4b45      	ldr	r3, [pc, #276]	; (800f924 <tcp_receive+0xb28>)
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	f043 0320 	orr.w	r3, r3, #32
 800f816:	b2da      	uxtb	r2, r3
 800f818:	4b42      	ldr	r3, [pc, #264]	; (800f924 <tcp_receive+0xb28>)
 800f81a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f81c:	e0af      	b.n	800f97e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f822:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	4a36      	ldr	r2, [pc, #216]	; (800f908 <tcp_receive+0xb0c>)
 800f82e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	891b      	ldrh	r3, [r3, #8]
 800f834:	461c      	mov	r4, r3
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	899b      	ldrh	r3, [r3, #12]
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fa fd14 	bl	800a26c <lwip_htons>
 800f844:	4603      	mov	r3, r0
 800f846:	b2db      	uxtb	r3, r3
 800f848:	f003 0303 	and.w	r3, r3, #3
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d001      	beq.n	800f854 <tcp_receive+0xa58>
 800f850:	2301      	movs	r3, #1
 800f852:	e000      	b.n	800f856 <tcp_receive+0xa5a>
 800f854:	2300      	movs	r3, #0
 800f856:	191a      	adds	r2, r3, r4
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85c:	441a      	add	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f866:	461c      	mov	r4, r3
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	891b      	ldrh	r3, [r3, #8]
 800f86c:	461d      	mov	r5, r3
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	899b      	ldrh	r3, [r3, #12]
 800f874:	b29b      	uxth	r3, r3
 800f876:	4618      	mov	r0, r3
 800f878:	f7fa fcf8 	bl	800a26c <lwip_htons>
 800f87c:	4603      	mov	r3, r0
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	f003 0303 	and.w	r3, r3, #3
 800f884:	2b00      	cmp	r3, #0
 800f886:	d001      	beq.n	800f88c <tcp_receive+0xa90>
 800f888:	2301      	movs	r3, #1
 800f88a:	e000      	b.n	800f88e <tcp_receive+0xa92>
 800f88c:	2300      	movs	r3, #0
 800f88e:	442b      	add	r3, r5
 800f890:	429c      	cmp	r4, r3
 800f892:	d206      	bcs.n	800f8a2 <tcp_receive+0xaa6>
 800f894:	4b1e      	ldr	r3, [pc, #120]	; (800f910 <tcp_receive+0xb14>)
 800f896:	f240 622b 	movw	r2, #1579	; 0x62b
 800f89a:	4923      	ldr	r1, [pc, #140]	; (800f928 <tcp_receive+0xb2c>)
 800f89c:	481e      	ldr	r0, [pc, #120]	; (800f918 <tcp_receive+0xb1c>)
 800f89e:	f005 fdbf 	bl	8015420 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	891b      	ldrh	r3, [r3, #8]
 800f8a6:	461c      	mov	r4, r3
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	899b      	ldrh	r3, [r3, #12]
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	f7fa fcdb 	bl	800a26c <lwip_htons>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	f003 0303 	and.w	r3, r3, #3
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d001      	beq.n	800f8c6 <tcp_receive+0xaca>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	e000      	b.n	800f8c8 <tcp_receive+0xacc>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	1919      	adds	r1, r3, r4
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8ce:	b28b      	uxth	r3, r1
 800f8d0:	1ad3      	subs	r3, r2, r3
 800f8d2:	b29a      	uxth	r2, r3
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7fc ff43 	bl	800c764 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	891b      	ldrh	r3, [r3, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d028      	beq.n	800f93a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f8e8:	4b0d      	ldr	r3, [pc, #52]	; (800f920 <tcp_receive+0xb24>)
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d01d      	beq.n	800f92c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f8f0:	4b0b      	ldr	r3, [pc, #44]	; (800f920 <tcp_receive+0xb24>)
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4610      	mov	r0, r2
 800f8fc:	f7fc f962 	bl	800bbc4 <pbuf_cat>
 800f900:	e018      	b.n	800f934 <tcp_receive+0xb38>
 800f902:	bf00      	nop
 800f904:	20040ae6 	.word	0x20040ae6
 800f908:	20040adc 	.word	0x20040adc
 800f90c:	20040abc 	.word	0x20040abc
 800f910:	08017c68 	.word	0x08017c68
 800f914:	08018048 	.word	0x08018048
 800f918:	08017cb4 	.word	0x08017cb4
 800f91c:	08018084 	.word	0x08018084
 800f920:	20040aec 	.word	0x20040aec
 800f924:	20040ae9 	.word	0x20040ae9
 800f928:	080180a4 	.word	0x080180a4
            } else {
              recv_data = cseg->p;
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	685b      	ldr	r3, [r3, #4]
 800f930:	4a70      	ldr	r2, [pc, #448]	; (800faf4 <tcp_receive+0xcf8>)
 800f932:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	2200      	movs	r2, #0
 800f938:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	899b      	ldrh	r3, [r3, #12]
 800f940:	b29b      	uxth	r3, r3
 800f942:	4618      	mov	r0, r3
 800f944:	f7fa fc92 	bl	800a26c <lwip_htons>
 800f948:	4603      	mov	r3, r0
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	f003 0301 	and.w	r3, r3, #1
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00d      	beq.n	800f970 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f954:	4b68      	ldr	r3, [pc, #416]	; (800faf8 <tcp_receive+0xcfc>)
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	f043 0320 	orr.w	r3, r3, #32
 800f95c:	b2da      	uxtb	r2, r3
 800f95e:	4b66      	ldr	r3, [pc, #408]	; (800faf8 <tcp_receive+0xcfc>)
 800f960:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	7d1b      	ldrb	r3, [r3, #20]
 800f966:	2b04      	cmp	r3, #4
 800f968:	d102      	bne.n	800f970 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2207      	movs	r2, #7
 800f96e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f978:	68b8      	ldr	r0, [r7, #8]
 800f97a:	f7fd fbd2 	bl	800d122 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f982:	2b00      	cmp	r3, #0
 800f984:	d008      	beq.n	800f998 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	685a      	ldr	r2, [r3, #4]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f992:	429a      	cmp	r2, r3
 800f994:	f43f af43 	beq.w	800f81e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	8b5b      	ldrh	r3, [r3, #26]
 800f99c:	f003 0301 	and.w	r3, r3, #1
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00e      	beq.n	800f9c2 <tcp_receive+0xbc6>
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	8b5b      	ldrh	r3, [r3, #26]
 800f9a8:	f023 0301 	bic.w	r3, r3, #1
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	835a      	strh	r2, [r3, #26]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	8b5b      	ldrh	r3, [r3, #26]
 800f9b6:	f043 0302 	orr.w	r3, r3, #2
 800f9ba:	b29a      	uxth	r2, r3
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f9c0:	e188      	b.n	800fcd4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	8b5b      	ldrh	r3, [r3, #26]
 800f9c6:	f043 0301 	orr.w	r3, r3, #1
 800f9ca:	b29a      	uxth	r2, r3
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f9d0:	e180      	b.n	800fcd4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d106      	bne.n	800f9e8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f9da:	4848      	ldr	r0, [pc, #288]	; (800fafc <tcp_receive+0xd00>)
 800f9dc:	f7fd fbba 	bl	800d154 <tcp_seg_copy>
 800f9e0:	4602      	mov	r2, r0
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	675a      	str	r2, [r3, #116]	; 0x74
 800f9e6:	e16d      	b.n	800fcc4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800f9f2:	e157      	b.n	800fca4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	685a      	ldr	r2, [r3, #4]
 800f9fa:	4b41      	ldr	r3, [pc, #260]	; (800fb00 <tcp_receive+0xd04>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d11d      	bne.n	800fa3e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fa02:	4b3e      	ldr	r3, [pc, #248]	; (800fafc <tcp_receive+0xd00>)
 800fa04:	891a      	ldrh	r2, [r3, #8]
 800fa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa08:	891b      	ldrh	r3, [r3, #8]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	f240 814f 	bls.w	800fcae <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa10:	483a      	ldr	r0, [pc, #232]	; (800fafc <tcp_receive+0xd00>)
 800fa12:	f7fd fb9f 	bl	800d154 <tcp_seg_copy>
 800fa16:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f000 8149 	beq.w	800fcb2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d003      	beq.n	800fa2e <tcp_receive+0xc32>
                    prev->next = cseg;
 800fa26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa28:	697a      	ldr	r2, [r7, #20]
 800fa2a:	601a      	str	r2, [r3, #0]
 800fa2c:	e002      	b.n	800fa34 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	697a      	ldr	r2, [r7, #20]
 800fa32:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fa34:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa36:	6978      	ldr	r0, [r7, #20]
 800fa38:	f7ff f8dc 	bl	800ebf4 <tcp_oos_insert_segment>
                }
                break;
 800fa3c:	e139      	b.n	800fcb2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fa3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d117      	bne.n	800fa74 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fa44:	4b2e      	ldr	r3, [pc, #184]	; (800fb00 <tcp_receive+0xd04>)
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	da57      	bge.n	800fb04 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa54:	4829      	ldr	r0, [pc, #164]	; (800fafc <tcp_receive+0xd00>)
 800fa56:	f7fd fb7d 	bl	800d154 <tcp_seg_copy>
 800fa5a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f000 8129 	beq.w	800fcb6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	69ba      	ldr	r2, [r7, #24]
 800fa68:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fa6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa6c:	69b8      	ldr	r0, [r7, #24]
 800fa6e:	f7ff f8c1 	bl	800ebf4 <tcp_oos_insert_segment>
                  }
                  break;
 800fa72:	e120      	b.n	800fcb6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fa74:	4b22      	ldr	r3, [pc, #136]	; (800fb00 <tcp_receive+0xd04>)
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	685b      	ldr	r3, [r3, #4]
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	3b01      	subs	r3, #1
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	db3e      	blt.n	800fb04 <tcp_receive+0xd08>
 800fa86:	4b1e      	ldr	r3, [pc, #120]	; (800fb00 <tcp_receive+0xd04>)
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	685b      	ldr	r3, [r3, #4]
 800fa90:	1ad3      	subs	r3, r2, r3
 800fa92:	3301      	adds	r3, #1
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	dc35      	bgt.n	800fb04 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa98:	4818      	ldr	r0, [pc, #96]	; (800fafc <tcp_receive+0xd00>)
 800fa9a:	f7fd fb5b 	bl	800d154 <tcp_seg_copy>
 800fa9e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f000 8109 	beq.w	800fcba <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800faa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fab0:	8912      	ldrh	r2, [r2, #8]
 800fab2:	441a      	add	r2, r3
 800fab4:	4b12      	ldr	r3, [pc, #72]	; (800fb00 <tcp_receive+0xd04>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	2b00      	cmp	r3, #0
 800fabc:	dd12      	ble.n	800fae4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fabe:	4b10      	ldr	r3, [pc, #64]	; (800fb00 <tcp_receive+0xd04>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	b29b      	uxth	r3, r3
 800facc:	1ad3      	subs	r3, r2, r3
 800face:	b29a      	uxth	r2, r3
 800fad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad6:	685a      	ldr	r2, [r3, #4]
 800fad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fada:	891b      	ldrh	r3, [r3, #8]
 800fadc:	4619      	mov	r1, r3
 800fade:	4610      	mov	r0, r2
 800fae0:	f7fb fe1e 	bl	800b720 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae6:	69fa      	ldr	r2, [r7, #28]
 800fae8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800faea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800faec:	69f8      	ldr	r0, [r7, #28]
 800faee:	f7ff f881 	bl	800ebf4 <tcp_oos_insert_segment>
                  }
                  break;
 800faf2:	e0e2      	b.n	800fcba <tcp_receive+0xebe>
 800faf4:	20040aec 	.word	0x20040aec
 800faf8:	20040ae9 	.word	0x20040ae9
 800fafc:	20040abc 	.word	0x20040abc
 800fb00:	20040adc 	.word	0x20040adc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb06:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	f040 80c6 	bne.w	800fc9e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fb12:	4b80      	ldr	r3, [pc, #512]	; (800fd14 <tcp_receive+0xf18>)
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb18:	68db      	ldr	r3, [r3, #12]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	f340 80bd 	ble.w	800fc9e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	899b      	ldrh	r3, [r3, #12]
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7fa fb9d 	bl	800a26c <lwip_htons>
 800fb32:	4603      	mov	r3, r0
 800fb34:	b2db      	uxtb	r3, r3
 800fb36:	f003 0301 	and.w	r3, r3, #1
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f040 80bf 	bne.w	800fcbe <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fb40:	4875      	ldr	r0, [pc, #468]	; (800fd18 <tcp_receive+0xf1c>)
 800fb42:	f7fd fb07 	bl	800d154 <tcp_seg_copy>
 800fb46:	4602      	mov	r2, r0
 800fb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f000 80b6 	beq.w	800fcc2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb5e:	8912      	ldrh	r2, [r2, #8]
 800fb60:	441a      	add	r2, r3
 800fb62:	4b6c      	ldr	r3, [pc, #432]	; (800fd14 <tcp_receive+0xf18>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	dd12      	ble.n	800fb92 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fb6c:	4b69      	ldr	r3, [pc, #420]	; (800fd14 <tcp_receive+0xf18>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb80:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb84:	685a      	ldr	r2, [r3, #4]
 800fb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb88:	891b      	ldrh	r3, [r3, #8]
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	4610      	mov	r0, r2
 800fb8e:	f7fb fdc7 	bl	800b720 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fb92:	4b62      	ldr	r3, [pc, #392]	; (800fd1c <tcp_receive+0xf20>)
 800fb94:	881b      	ldrh	r3, [r3, #0]
 800fb96:	461a      	mov	r2, r3
 800fb98:	4b5e      	ldr	r3, [pc, #376]	; (800fd14 <tcp_receive+0xf18>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	441a      	add	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fba2:	6879      	ldr	r1, [r7, #4]
 800fba4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fba6:	440b      	add	r3, r1
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	f340 8089 	ble.w	800fcc2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	68db      	ldr	r3, [r3, #12]
 800fbb6:	899b      	ldrh	r3, [r3, #12]
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fa fb56 	bl	800a26c <lwip_htons>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	f003 0301 	and.w	r3, r3, #1
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d022      	beq.n	800fc12 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	899b      	ldrh	r3, [r3, #12]
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	b21b      	sxth	r3, r3
 800fbd8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fbdc:	b21c      	sxth	r4, r3
 800fbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	899b      	ldrh	r3, [r3, #12]
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7fa fb3f 	bl	800a26c <lwip_htons>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fa fb36 	bl	800a26c <lwip_htons>
 800fc00:	4603      	mov	r3, r0
 800fc02:	b21b      	sxth	r3, r3
 800fc04:	4323      	orrs	r3, r4
 800fc06:	b21a      	sxth	r2, r3
 800fc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	68db      	ldr	r3, [r3, #12]
 800fc0e:	b292      	uxth	r2, r2
 800fc10:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc16:	b29a      	uxth	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc1c:	4413      	add	r3, r2
 800fc1e:	b299      	uxth	r1, r3
 800fc20:	4b3c      	ldr	r3, [pc, #240]	; (800fd14 <tcp_receive+0xf18>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	b29a      	uxth	r2, r3
 800fc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	1a8a      	subs	r2, r1, r2
 800fc2c:	b292      	uxth	r2, r2
 800fc2e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fc30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	685a      	ldr	r2, [r3, #4]
 800fc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	891b      	ldrh	r3, [r3, #8]
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	4610      	mov	r0, r2
 800fc40:	f7fb fd6e 	bl	800b720 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	891c      	ldrh	r4, [r3, #8]
 800fc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	899b      	ldrh	r3, [r3, #12]
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7fa fb09 	bl	800a26c <lwip_htons>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	b2db      	uxtb	r3, r3
 800fc5e:	f003 0303 	and.w	r3, r3, #3
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <tcp_receive+0xe6e>
 800fc66:	2301      	movs	r3, #1
 800fc68:	e000      	b.n	800fc6c <tcp_receive+0xe70>
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	4423      	add	r3, r4
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	4b2a      	ldr	r3, [pc, #168]	; (800fd1c <tcp_receive+0xf20>)
 800fc72:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fc74:	4b29      	ldr	r3, [pc, #164]	; (800fd1c <tcp_receive+0xf20>)
 800fc76:	881b      	ldrh	r3, [r3, #0]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	4b26      	ldr	r3, [pc, #152]	; (800fd14 <tcp_receive+0xf18>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	441a      	add	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc84:	6879      	ldr	r1, [r7, #4]
 800fc86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc88:	440b      	add	r3, r1
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d019      	beq.n	800fcc2 <tcp_receive+0xec6>
 800fc8e:	4b24      	ldr	r3, [pc, #144]	; (800fd20 <tcp_receive+0xf24>)
 800fc90:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fc94:	4923      	ldr	r1, [pc, #140]	; (800fd24 <tcp_receive+0xf28>)
 800fc96:	4824      	ldr	r0, [pc, #144]	; (800fd28 <tcp_receive+0xf2c>)
 800fc98:	f005 fbc2 	bl	8015420 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fc9c:	e011      	b.n	800fcc2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	63bb      	str	r3, [r7, #56]	; 0x38
 800fca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f47f aea4 	bne.w	800f9f4 <tcp_receive+0xbf8>
 800fcac:	e00a      	b.n	800fcc4 <tcp_receive+0xec8>
                break;
 800fcae:	bf00      	nop
 800fcb0:	e008      	b.n	800fcc4 <tcp_receive+0xec8>
                break;
 800fcb2:	bf00      	nop
 800fcb4:	e006      	b.n	800fcc4 <tcp_receive+0xec8>
                  break;
 800fcb6:	bf00      	nop
 800fcb8:	e004      	b.n	800fcc4 <tcp_receive+0xec8>
                  break;
 800fcba:	bf00      	nop
 800fcbc:	e002      	b.n	800fcc4 <tcp_receive+0xec8>
                  break;
 800fcbe:	bf00      	nop
 800fcc0:	e000      	b.n	800fcc4 <tcp_receive+0xec8>
                break;
 800fcc2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f001 fa33 	bl	8011130 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fcca:	e003      	b.n	800fcd4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f001 fa2f 	bl	8011130 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fcd2:	e01a      	b.n	800fd0a <tcp_receive+0xf0e>
 800fcd4:	e019      	b.n	800fd0a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fcd6:	4b0f      	ldr	r3, [pc, #60]	; (800fd14 <tcp_receive+0xf18>)
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcde:	1ad3      	subs	r3, r2, r3
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	db0a      	blt.n	800fcfa <tcp_receive+0xefe>
 800fce4:	4b0b      	ldr	r3, [pc, #44]	; (800fd14 <tcp_receive+0xf18>)
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcf0:	440b      	add	r3, r1
 800fcf2:	1ad3      	subs	r3, r2, r3
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	dd07      	ble.n	800fd0a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	8b5b      	ldrh	r3, [r3, #26]
 800fcfe:	f043 0302 	orr.w	r3, r3, #2
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fd08:	e7ff      	b.n	800fd0a <tcp_receive+0xf0e>
 800fd0a:	bf00      	nop
 800fd0c:	3750      	adds	r7, #80	; 0x50
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bdb0      	pop	{r4, r5, r7, pc}
 800fd12:	bf00      	nop
 800fd14:	20040adc 	.word	0x20040adc
 800fd18:	20040abc 	.word	0x20040abc
 800fd1c:	20040ae6 	.word	0x20040ae6
 800fd20:	08017c68 	.word	0x08017c68
 800fd24:	08018010 	.word	0x08018010
 800fd28:	08017cb4 	.word	0x08017cb4

0800fd2c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fd32:	4b15      	ldr	r3, [pc, #84]	; (800fd88 <tcp_get_next_optbyte+0x5c>)
 800fd34:	881b      	ldrh	r3, [r3, #0]
 800fd36:	1c5a      	adds	r2, r3, #1
 800fd38:	b291      	uxth	r1, r2
 800fd3a:	4a13      	ldr	r2, [pc, #76]	; (800fd88 <tcp_get_next_optbyte+0x5c>)
 800fd3c:	8011      	strh	r1, [r2, #0]
 800fd3e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fd40:	4b12      	ldr	r3, [pc, #72]	; (800fd8c <tcp_get_next_optbyte+0x60>)
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d004      	beq.n	800fd52 <tcp_get_next_optbyte+0x26>
 800fd48:	4b11      	ldr	r3, [pc, #68]	; (800fd90 <tcp_get_next_optbyte+0x64>)
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	88fa      	ldrh	r2, [r7, #6]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d208      	bcs.n	800fd64 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fd52:	4b10      	ldr	r3, [pc, #64]	; (800fd94 <tcp_get_next_optbyte+0x68>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	3314      	adds	r3, #20
 800fd58:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fd5a:	88fb      	ldrh	r3, [r7, #6]
 800fd5c:	683a      	ldr	r2, [r7, #0]
 800fd5e:	4413      	add	r3, r2
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	e00b      	b.n	800fd7c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fd64:	88fb      	ldrh	r3, [r7, #6]
 800fd66:	b2da      	uxtb	r2, r3
 800fd68:	4b09      	ldr	r3, [pc, #36]	; (800fd90 <tcp_get_next_optbyte+0x64>)
 800fd6a:	881b      	ldrh	r3, [r3, #0]
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fd72:	4b06      	ldr	r3, [pc, #24]	; (800fd8c <tcp_get_next_optbyte+0x60>)
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	797b      	ldrb	r3, [r7, #5]
 800fd78:	4413      	add	r3, r2
 800fd7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr
 800fd88:	20040ad8 	.word	0x20040ad8
 800fd8c:	20040ad4 	.word	0x20040ad4
 800fd90:	20040ad2 	.word	0x20040ad2
 800fd94:	20040acc 	.word	0x20040acc

0800fd98 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b084      	sub	sp, #16
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d106      	bne.n	800fdb4 <tcp_parseopt+0x1c>
 800fda6:	4b32      	ldr	r3, [pc, #200]	; (800fe70 <tcp_parseopt+0xd8>)
 800fda8:	f240 727d 	movw	r2, #1917	; 0x77d
 800fdac:	4931      	ldr	r1, [pc, #196]	; (800fe74 <tcp_parseopt+0xdc>)
 800fdae:	4832      	ldr	r0, [pc, #200]	; (800fe78 <tcp_parseopt+0xe0>)
 800fdb0:	f005 fb36 	bl	8015420 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fdb4:	4b31      	ldr	r3, [pc, #196]	; (800fe7c <tcp_parseopt+0xe4>)
 800fdb6:	881b      	ldrh	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d055      	beq.n	800fe68 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fdbc:	4b30      	ldr	r3, [pc, #192]	; (800fe80 <tcp_parseopt+0xe8>)
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	801a      	strh	r2, [r3, #0]
 800fdc2:	e045      	b.n	800fe50 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fdc4:	f7ff ffb2 	bl	800fd2c <tcp_get_next_optbyte>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	d006      	beq.n	800fde0 <tcp_parseopt+0x48>
 800fdd2:	2b02      	cmp	r3, #2
 800fdd4:	dc2b      	bgt.n	800fe2e <tcp_parseopt+0x96>
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d041      	beq.n	800fe5e <tcp_parseopt+0xc6>
 800fdda:	2b01      	cmp	r3, #1
 800fddc:	d127      	bne.n	800fe2e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fdde:	e037      	b.n	800fe50 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fde0:	f7ff ffa4 	bl	800fd2c <tcp_get_next_optbyte>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b04      	cmp	r3, #4
 800fde8:	d13b      	bne.n	800fe62 <tcp_parseopt+0xca>
 800fdea:	4b25      	ldr	r3, [pc, #148]	; (800fe80 <tcp_parseopt+0xe8>)
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	4a22      	ldr	r2, [pc, #136]	; (800fe7c <tcp_parseopt+0xe4>)
 800fdf2:	8812      	ldrh	r2, [r2, #0]
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	da34      	bge.n	800fe62 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fdf8:	f7ff ff98 	bl	800fd2c <tcp_get_next_optbyte>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	021b      	lsls	r3, r3, #8
 800fe02:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fe04:	f7ff ff92 	bl	800fd2c <tcp_get_next_optbyte>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	89bb      	ldrh	r3, [r7, #12]
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fe12:	89bb      	ldrh	r3, [r7, #12]
 800fe14:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fe18:	d804      	bhi.n	800fe24 <tcp_parseopt+0x8c>
 800fe1a:	89bb      	ldrh	r3, [r7, #12]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d001      	beq.n	800fe24 <tcp_parseopt+0x8c>
 800fe20:	89ba      	ldrh	r2, [r7, #12]
 800fe22:	e001      	b.n	800fe28 <tcp_parseopt+0x90>
 800fe24:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fe2c:	e010      	b.n	800fe50 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fe2e:	f7ff ff7d 	bl	800fd2c <tcp_get_next_optbyte>
 800fe32:	4603      	mov	r3, r0
 800fe34:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fe36:	7afb      	ldrb	r3, [r7, #11]
 800fe38:	2b01      	cmp	r3, #1
 800fe3a:	d914      	bls.n	800fe66 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fe3c:	7afb      	ldrb	r3, [r7, #11]
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	4b0f      	ldr	r3, [pc, #60]	; (800fe80 <tcp_parseopt+0xe8>)
 800fe42:	881b      	ldrh	r3, [r3, #0]
 800fe44:	4413      	add	r3, r2
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	3b02      	subs	r3, #2
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	4b0c      	ldr	r3, [pc, #48]	; (800fe80 <tcp_parseopt+0xe8>)
 800fe4e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe50:	4b0b      	ldr	r3, [pc, #44]	; (800fe80 <tcp_parseopt+0xe8>)
 800fe52:	881a      	ldrh	r2, [r3, #0]
 800fe54:	4b09      	ldr	r3, [pc, #36]	; (800fe7c <tcp_parseopt+0xe4>)
 800fe56:	881b      	ldrh	r3, [r3, #0]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d3b3      	bcc.n	800fdc4 <tcp_parseopt+0x2c>
 800fe5c:	e004      	b.n	800fe68 <tcp_parseopt+0xd0>
          return;
 800fe5e:	bf00      	nop
 800fe60:	e002      	b.n	800fe68 <tcp_parseopt+0xd0>
            return;
 800fe62:	bf00      	nop
 800fe64:	e000      	b.n	800fe68 <tcp_parseopt+0xd0>
            return;
 800fe66:	bf00      	nop
      }
    }
  }
}
 800fe68:	3710      	adds	r7, #16
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	08017c68 	.word	0x08017c68
 800fe74:	080180cc 	.word	0x080180cc
 800fe78:	08017cb4 	.word	0x08017cb4
 800fe7c:	20040ad0 	.word	0x20040ad0
 800fe80:	20040ad8 	.word	0x20040ad8

0800fe84 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fe84:	b480      	push	{r7}
 800fe86:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fe88:	4b05      	ldr	r3, [pc, #20]	; (800fea0 <tcp_trigger_input_pcb_close+0x1c>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f043 0310 	orr.w	r3, r3, #16
 800fe90:	b2da      	uxtb	r2, r3
 800fe92:	4b03      	ldr	r3, [pc, #12]	; (800fea0 <tcp_trigger_input_pcb_close+0x1c>)
 800fe94:	701a      	strb	r2, [r3, #0]
}
 800fe96:	bf00      	nop
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr
 800fea0:	20040ae9 	.word	0x20040ae9

0800fea4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00a      	beq.n	800fecc <tcp_route+0x28>
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	7a1b      	ldrb	r3, [r3, #8]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d006      	beq.n	800fecc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	7a1b      	ldrb	r3, [r3, #8]
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fb fa24 	bl	800b310 <netif_get_by_index>
 800fec8:	4603      	mov	r3, r0
 800feca:	e003      	b.n	800fed4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f003 f9e3 	bl	8013298 <ip4_route>
 800fed2:	4603      	mov	r3, r0
  }
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fedc:	b590      	push	{r4, r7, lr}
 800fede:	b087      	sub	sp, #28
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	603b      	str	r3, [r7, #0]
 800fee8:	4613      	mov	r3, r2
 800feea:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d105      	bne.n	800fefe <tcp_create_segment+0x22>
 800fef2:	4b44      	ldr	r3, [pc, #272]	; (8010004 <tcp_create_segment+0x128>)
 800fef4:	22a3      	movs	r2, #163	; 0xa3
 800fef6:	4944      	ldr	r1, [pc, #272]	; (8010008 <tcp_create_segment+0x12c>)
 800fef8:	4844      	ldr	r0, [pc, #272]	; (801000c <tcp_create_segment+0x130>)
 800fefa:	f005 fa91 	bl	8015420 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d105      	bne.n	800ff10 <tcp_create_segment+0x34>
 800ff04:	4b3f      	ldr	r3, [pc, #252]	; (8010004 <tcp_create_segment+0x128>)
 800ff06:	22a4      	movs	r2, #164	; 0xa4
 800ff08:	4941      	ldr	r1, [pc, #260]	; (8010010 <tcp_create_segment+0x134>)
 800ff0a:	4840      	ldr	r0, [pc, #256]	; (801000c <tcp_create_segment+0x130>)
 800ff0c:	f005 fa88 	bl	8015420 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	b2db      	uxtb	r3, r3
 800ff18:	f003 0304 	and.w	r3, r3, #4
 800ff1c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ff1e:	2003      	movs	r0, #3
 800ff20:	f7fa fe6a 	bl	800abf8 <memp_malloc>
 800ff24:	6138      	str	r0, [r7, #16]
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d104      	bne.n	800ff36 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ff2c:	68b8      	ldr	r0, [r7, #8]
 800ff2e:	f7fb fd7b 	bl	800ba28 <pbuf_free>
    return NULL;
 800ff32:	2300      	movs	r3, #0
 800ff34:	e061      	b.n	800fffa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ff3c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ff3e:	693b      	ldr	r3, [r7, #16]
 800ff40:	2200      	movs	r2, #0
 800ff42:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	68ba      	ldr	r2, [r7, #8]
 800ff48:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	891a      	ldrh	r2, [r3, #8]
 800ff4e:	7dfb      	ldrb	r3, [r7, #23]
 800ff50:	b29b      	uxth	r3, r3
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d205      	bcs.n	800ff62 <tcp_create_segment+0x86>
 800ff56:	4b2b      	ldr	r3, [pc, #172]	; (8010004 <tcp_create_segment+0x128>)
 800ff58:	22b0      	movs	r2, #176	; 0xb0
 800ff5a:	492e      	ldr	r1, [pc, #184]	; (8010014 <tcp_create_segment+0x138>)
 800ff5c:	482b      	ldr	r0, [pc, #172]	; (801000c <tcp_create_segment+0x130>)
 800ff5e:	f005 fa5f 	bl	8015420 <iprintf>
  seg->len = p->tot_len - optlen;
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	891a      	ldrh	r2, [r3, #8]
 800ff66:	7dfb      	ldrb	r3, [r7, #23]
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ff72:	2114      	movs	r1, #20
 800ff74:	68b8      	ldr	r0, [r7, #8]
 800ff76:	f7fb fcc1 	bl	800b8fc <pbuf_add_header>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d004      	beq.n	800ff8a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ff80:	6938      	ldr	r0, [r7, #16]
 800ff82:	f7fd f8ce 	bl	800d122 <tcp_seg_free>
    return NULL;
 800ff86:	2300      	movs	r3, #0
 800ff88:	e037      	b.n	800fffa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	8ada      	ldrh	r2, [r3, #22]
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	68dc      	ldr	r4, [r3, #12]
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	f7fa f965 	bl	800a26c <lwip_htons>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	8b1a      	ldrh	r2, [r3, #24]
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	68dc      	ldr	r4, [r3, #12]
 800ffae:	4610      	mov	r0, r2
 800ffb0:	f7fa f95c 	bl	800a26c <lwip_htons>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	68dc      	ldr	r4, [r3, #12]
 800ffbc:	6838      	ldr	r0, [r7, #0]
 800ffbe:	f7fa f96a 	bl	800a296 <lwip_htonl>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ffc6:	7dfb      	ldrb	r3, [r7, #23]
 800ffc8:	089b      	lsrs	r3, r3, #2
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	3305      	adds	r3, #5
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	031b      	lsls	r3, r3, #12
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	b29a      	uxth	r2, r3
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	68dc      	ldr	r4, [r3, #12]
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	f7fa f942 	bl	800a26c <lwip_htons>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ffec:	693b      	ldr	r3, [r7, #16]
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	2200      	movs	r2, #0
 800fff2:	749a      	strb	r2, [r3, #18]
 800fff4:	2200      	movs	r2, #0
 800fff6:	74da      	strb	r2, [r3, #19]
  return seg;
 800fff8:	693b      	ldr	r3, [r7, #16]
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	371c      	adds	r7, #28
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd90      	pop	{r4, r7, pc}
 8010002:	bf00      	nop
 8010004:	080180e8 	.word	0x080180e8
 8010008:	0801811c 	.word	0x0801811c
 801000c:	0801813c 	.word	0x0801813c
 8010010:	08018164 	.word	0x08018164
 8010014:	08018188 	.word	0x08018188

08010018 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010018:	b590      	push	{r4, r7, lr}
 801001a:	b08b      	sub	sp, #44	; 0x2c
 801001c:	af02      	add	r7, sp, #8
 801001e:	6078      	str	r0, [r7, #4]
 8010020:	460b      	mov	r3, r1
 8010022:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010024:	2300      	movs	r3, #0
 8010026:	61fb      	str	r3, [r7, #28]
 8010028:	2300      	movs	r3, #0
 801002a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801002c:	2300      	movs	r3, #0
 801002e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d106      	bne.n	8010044 <tcp_split_unsent_seg+0x2c>
 8010036:	4b95      	ldr	r3, [pc, #596]	; (801028c <tcp_split_unsent_seg+0x274>)
 8010038:	f240 324b 	movw	r2, #843	; 0x34b
 801003c:	4994      	ldr	r1, [pc, #592]	; (8010290 <tcp_split_unsent_seg+0x278>)
 801003e:	4895      	ldr	r0, [pc, #596]	; (8010294 <tcp_split_unsent_seg+0x27c>)
 8010040:	f005 f9ee 	bl	8015420 <iprintf>

  useg = pcb->unsent;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010048:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d102      	bne.n	8010056 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010050:	f04f 33ff 	mov.w	r3, #4294967295
 8010054:	e116      	b.n	8010284 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010056:	887b      	ldrh	r3, [r7, #2]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d109      	bne.n	8010070 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801005c:	4b8b      	ldr	r3, [pc, #556]	; (801028c <tcp_split_unsent_seg+0x274>)
 801005e:	f240 3253 	movw	r2, #851	; 0x353
 8010062:	498d      	ldr	r1, [pc, #564]	; (8010298 <tcp_split_unsent_seg+0x280>)
 8010064:	488b      	ldr	r0, [pc, #556]	; (8010294 <tcp_split_unsent_seg+0x27c>)
 8010066:	f005 f9db 	bl	8015420 <iprintf>
    return ERR_VAL;
 801006a:	f06f 0305 	mvn.w	r3, #5
 801006e:	e109      	b.n	8010284 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	891b      	ldrh	r3, [r3, #8]
 8010074:	887a      	ldrh	r2, [r7, #2]
 8010076:	429a      	cmp	r2, r3
 8010078:	d301      	bcc.n	801007e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801007a:	2300      	movs	r3, #0
 801007c:	e102      	b.n	8010284 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010082:	887a      	ldrh	r2, [r7, #2]
 8010084:	429a      	cmp	r2, r3
 8010086:	d906      	bls.n	8010096 <tcp_split_unsent_seg+0x7e>
 8010088:	4b80      	ldr	r3, [pc, #512]	; (801028c <tcp_split_unsent_seg+0x274>)
 801008a:	f240 325b 	movw	r2, #859	; 0x35b
 801008e:	4983      	ldr	r1, [pc, #524]	; (801029c <tcp_split_unsent_seg+0x284>)
 8010090:	4880      	ldr	r0, [pc, #512]	; (8010294 <tcp_split_unsent_seg+0x27c>)
 8010092:	f005 f9c5 	bl	8015420 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	891b      	ldrh	r3, [r3, #8]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d106      	bne.n	80100ac <tcp_split_unsent_seg+0x94>
 801009e:	4b7b      	ldr	r3, [pc, #492]	; (801028c <tcp_split_unsent_seg+0x274>)
 80100a0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80100a4:	497e      	ldr	r1, [pc, #504]	; (80102a0 <tcp_split_unsent_seg+0x288>)
 80100a6:	487b      	ldr	r0, [pc, #492]	; (8010294 <tcp_split_unsent_seg+0x27c>)
 80100a8:	f005 f9ba 	bl	8015420 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	7a9b      	ldrb	r3, [r3, #10]
 80100b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80100b2:	7bfb      	ldrb	r3, [r7, #15]
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	f003 0304 	and.w	r3, r3, #4
 80100bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	891a      	ldrh	r2, [r3, #8]
 80100c2:	887b      	ldrh	r3, [r7, #2]
 80100c4:	1ad3      	subs	r3, r2, r3
 80100c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80100c8:	7bbb      	ldrb	r3, [r7, #14]
 80100ca:	b29a      	uxth	r2, r3
 80100cc:	89bb      	ldrh	r3, [r7, #12]
 80100ce:	4413      	add	r3, r2
 80100d0:	b29b      	uxth	r3, r3
 80100d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80100d6:	4619      	mov	r1, r3
 80100d8:	2036      	movs	r0, #54	; 0x36
 80100da:	f7fb f9c3 	bl	800b464 <pbuf_alloc>
 80100de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f000 80b7 	beq.w	8010256 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	891a      	ldrh	r2, [r3, #8]
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	891b      	ldrh	r3, [r3, #8]
 80100f2:	1ad3      	subs	r3, r2, r3
 80100f4:	b29a      	uxth	r2, r3
 80100f6:	887b      	ldrh	r3, [r7, #2]
 80100f8:	4413      	add	r3, r2
 80100fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	6858      	ldr	r0, [r3, #4]
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	685a      	ldr	r2, [r3, #4]
 8010104:	7bbb      	ldrb	r3, [r7, #14]
 8010106:	18d1      	adds	r1, r2, r3
 8010108:	897b      	ldrh	r3, [r7, #10]
 801010a:	89ba      	ldrh	r2, [r7, #12]
 801010c:	f7fb fe92 	bl	800be34 <pbuf_copy_partial>
 8010110:	4603      	mov	r3, r0
 8010112:	461a      	mov	r2, r3
 8010114:	89bb      	ldrh	r3, [r7, #12]
 8010116:	4293      	cmp	r3, r2
 8010118:	f040 809f 	bne.w	801025a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	899b      	ldrh	r3, [r3, #12]
 8010122:	b29b      	uxth	r3, r3
 8010124:	4618      	mov	r0, r3
 8010126:	f7fa f8a1 	bl	800a26c <lwip_htons>
 801012a:	4603      	mov	r3, r0
 801012c:	b2db      	uxtb	r3, r3
 801012e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010132:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010134:	2300      	movs	r3, #0
 8010136:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010138:	7efb      	ldrb	r3, [r7, #27]
 801013a:	f003 0308 	and.w	r3, r3, #8
 801013e:	2b00      	cmp	r3, #0
 8010140:	d007      	beq.n	8010152 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010142:	7efb      	ldrb	r3, [r7, #27]
 8010144:	f023 0308 	bic.w	r3, r3, #8
 8010148:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801014a:	7ebb      	ldrb	r3, [r7, #26]
 801014c:	f043 0308 	orr.w	r3, r3, #8
 8010150:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010152:	7efb      	ldrb	r3, [r7, #27]
 8010154:	f003 0301 	and.w	r3, r3, #1
 8010158:	2b00      	cmp	r3, #0
 801015a:	d007      	beq.n	801016c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801015c:	7efb      	ldrb	r3, [r7, #27]
 801015e:	f023 0301 	bic.w	r3, r3, #1
 8010162:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010164:	7ebb      	ldrb	r3, [r7, #26]
 8010166:	f043 0301 	orr.w	r3, r3, #1
 801016a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	68db      	ldr	r3, [r3, #12]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	4618      	mov	r0, r3
 8010174:	f7fa f88f 	bl	800a296 <lwip_htonl>
 8010178:	4602      	mov	r2, r0
 801017a:	887b      	ldrh	r3, [r7, #2]
 801017c:	18d1      	adds	r1, r2, r3
 801017e:	7eba      	ldrb	r2, [r7, #26]
 8010180:	7bfb      	ldrb	r3, [r7, #15]
 8010182:	9300      	str	r3, [sp, #0]
 8010184:	460b      	mov	r3, r1
 8010186:	6939      	ldr	r1, [r7, #16]
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f7ff fea7 	bl	800fedc <tcp_create_segment>
 801018e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d063      	beq.n	801025e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	685b      	ldr	r3, [r3, #4]
 801019a:	4618      	mov	r0, r3
 801019c:	f7fb fcd2 	bl	800bb44 <pbuf_clen>
 80101a0:	4603      	mov	r3, r0
 80101a2:	461a      	mov	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101aa:	1a9b      	subs	r3, r3, r2
 80101ac:	b29a      	uxth	r2, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	6858      	ldr	r0, [r3, #4]
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	891a      	ldrh	r2, [r3, #8]
 80101be:	89bb      	ldrh	r3, [r7, #12]
 80101c0:	1ad3      	subs	r3, r2, r3
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	4619      	mov	r1, r3
 80101c6:	f7fb faab 	bl	800b720 <pbuf_realloc>
  useg->len -= remainder;
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	891a      	ldrh	r2, [r3, #8]
 80101ce:	89bb      	ldrh	r3, [r7, #12]
 80101d0:	1ad3      	subs	r3, r2, r3
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	68db      	ldr	r3, [r3, #12]
 80101dc:	899b      	ldrh	r3, [r3, #12]
 80101de:	b29c      	uxth	r4, r3
 80101e0:	7efb      	ldrb	r3, [r7, #27]
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7fa f841 	bl	800a26c <lwip_htons>
 80101ea:	4603      	mov	r3, r0
 80101ec:	461a      	mov	r2, r3
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	4322      	orrs	r2, r4
 80101f4:	b292      	uxth	r2, r2
 80101f6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fb fca1 	bl	800bb44 <pbuf_clen>
 8010202:	4603      	mov	r3, r0
 8010204:	461a      	mov	r2, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801020c:	4413      	add	r3, r2
 801020e:	b29a      	uxth	r2, r3
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	4618      	mov	r0, r3
 801021c:	f7fb fc92 	bl	800bb44 <pbuf_clen>
 8010220:	4603      	mov	r3, r0
 8010222:	461a      	mov	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801022a:	4413      	add	r3, r2
 801022c:	b29a      	uxth	r2, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	69fa      	ldr	r2, [r7, #28]
 8010240:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010242:	69fb      	ldr	r3, [r7, #28]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d103      	bne.n	8010252 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2200      	movs	r2, #0
 801024e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010252:	2300      	movs	r3, #0
 8010254:	e016      	b.n	8010284 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010256:	bf00      	nop
 8010258:	e002      	b.n	8010260 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801025a:	bf00      	nop
 801025c:	e000      	b.n	8010260 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801025e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d006      	beq.n	8010274 <tcp_split_unsent_seg+0x25c>
 8010266:	4b09      	ldr	r3, [pc, #36]	; (801028c <tcp_split_unsent_seg+0x274>)
 8010268:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801026c:	490d      	ldr	r1, [pc, #52]	; (80102a4 <tcp_split_unsent_seg+0x28c>)
 801026e:	4809      	ldr	r0, [pc, #36]	; (8010294 <tcp_split_unsent_seg+0x27c>)
 8010270:	f005 f8d6 	bl	8015420 <iprintf>
  if (p != NULL) {
 8010274:	693b      	ldr	r3, [r7, #16]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d002      	beq.n	8010280 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801027a:	6938      	ldr	r0, [r7, #16]
 801027c:	f7fb fbd4 	bl	800ba28 <pbuf_free>
  }

  return ERR_MEM;
 8010280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010284:	4618      	mov	r0, r3
 8010286:	3724      	adds	r7, #36	; 0x24
 8010288:	46bd      	mov	sp, r7
 801028a:	bd90      	pop	{r4, r7, pc}
 801028c:	080180e8 	.word	0x080180e8
 8010290:	0801847c 	.word	0x0801847c
 8010294:	0801813c 	.word	0x0801813c
 8010298:	080184a0 	.word	0x080184a0
 801029c:	080184c4 	.word	0x080184c4
 80102a0:	080184d4 	.word	0x080184d4
 80102a4:	080184e4 	.word	0x080184e4

080102a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80102a8:	b590      	push	{r4, r7, lr}
 80102aa:	b085      	sub	sp, #20
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d106      	bne.n	80102c4 <tcp_send_fin+0x1c>
 80102b6:	4b21      	ldr	r3, [pc, #132]	; (801033c <tcp_send_fin+0x94>)
 80102b8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80102bc:	4920      	ldr	r1, [pc, #128]	; (8010340 <tcp_send_fin+0x98>)
 80102be:	4821      	ldr	r0, [pc, #132]	; (8010344 <tcp_send_fin+0x9c>)
 80102c0:	f005 f8ae 	bl	8015420 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d02e      	beq.n	801032a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102d0:	60fb      	str	r3, [r7, #12]
 80102d2:	e002      	b.n	80102da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1f8      	bne.n	80102d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	899b      	ldrh	r3, [r3, #12]
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7f9 ffbe 	bl	800a26c <lwip_htons>
 80102f0:	4603      	mov	r3, r0
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	f003 0307 	and.w	r3, r3, #7
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d116      	bne.n	801032a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	68db      	ldr	r3, [r3, #12]
 8010300:	899b      	ldrh	r3, [r3, #12]
 8010302:	b29c      	uxth	r4, r3
 8010304:	2001      	movs	r0, #1
 8010306:	f7f9 ffb1 	bl	800a26c <lwip_htons>
 801030a:	4603      	mov	r3, r0
 801030c:	461a      	mov	r2, r3
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	4322      	orrs	r2, r4
 8010314:	b292      	uxth	r2, r2
 8010316:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	8b5b      	ldrh	r3, [r3, #26]
 801031c:	f043 0320 	orr.w	r3, r3, #32
 8010320:	b29a      	uxth	r2, r3
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010326:	2300      	movs	r3, #0
 8010328:	e004      	b.n	8010334 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801032a:	2101      	movs	r1, #1
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 f80b 	bl	8010348 <tcp_enqueue_flags>
 8010332:	4603      	mov	r3, r0
}
 8010334:	4618      	mov	r0, r3
 8010336:	3714      	adds	r7, #20
 8010338:	46bd      	mov	sp, r7
 801033a:	bd90      	pop	{r4, r7, pc}
 801033c:	080180e8 	.word	0x080180e8
 8010340:	080184f0 	.word	0x080184f0
 8010344:	0801813c 	.word	0x0801813c

08010348 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b08a      	sub	sp, #40	; 0x28
 801034c:	af02      	add	r7, sp, #8
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	460b      	mov	r3, r1
 8010352:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010354:	2300      	movs	r3, #0
 8010356:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010358:	2300      	movs	r3, #0
 801035a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801035c:	78fb      	ldrb	r3, [r7, #3]
 801035e:	f003 0303 	and.w	r3, r3, #3
 8010362:	2b00      	cmp	r3, #0
 8010364:	d106      	bne.n	8010374 <tcp_enqueue_flags+0x2c>
 8010366:	4b67      	ldr	r3, [pc, #412]	; (8010504 <tcp_enqueue_flags+0x1bc>)
 8010368:	f240 4211 	movw	r2, #1041	; 0x411
 801036c:	4966      	ldr	r1, [pc, #408]	; (8010508 <tcp_enqueue_flags+0x1c0>)
 801036e:	4867      	ldr	r0, [pc, #412]	; (801050c <tcp_enqueue_flags+0x1c4>)
 8010370:	f005 f856 	bl	8015420 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d106      	bne.n	8010388 <tcp_enqueue_flags+0x40>
 801037a:	4b62      	ldr	r3, [pc, #392]	; (8010504 <tcp_enqueue_flags+0x1bc>)
 801037c:	f240 4213 	movw	r2, #1043	; 0x413
 8010380:	4963      	ldr	r1, [pc, #396]	; (8010510 <tcp_enqueue_flags+0x1c8>)
 8010382:	4862      	ldr	r0, [pc, #392]	; (801050c <tcp_enqueue_flags+0x1c4>)
 8010384:	f005 f84c 	bl	8015420 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010388:	78fb      	ldrb	r3, [r7, #3]
 801038a:	f003 0302 	and.w	r3, r3, #2
 801038e:	2b00      	cmp	r3, #0
 8010390:	d001      	beq.n	8010396 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010392:	2301      	movs	r3, #1
 8010394:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010396:	7ffb      	ldrb	r3, [r7, #31]
 8010398:	009b      	lsls	r3, r3, #2
 801039a:	b2db      	uxtb	r3, r3
 801039c:	f003 0304 	and.w	r3, r3, #4
 80103a0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80103a2:	7dfb      	ldrb	r3, [r7, #23]
 80103a4:	b29b      	uxth	r3, r3
 80103a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80103aa:	4619      	mov	r1, r3
 80103ac:	2036      	movs	r0, #54	; 0x36
 80103ae:	f7fb f859 	bl	800b464 <pbuf_alloc>
 80103b2:	6138      	str	r0, [r7, #16]
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d109      	bne.n	80103ce <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	8b5b      	ldrh	r3, [r3, #26]
 80103be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80103c8:	f04f 33ff 	mov.w	r3, #4294967295
 80103cc:	e095      	b.n	80104fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	895a      	ldrh	r2, [r3, #10]
 80103d2:	7dfb      	ldrb	r3, [r7, #23]
 80103d4:	b29b      	uxth	r3, r3
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d206      	bcs.n	80103e8 <tcp_enqueue_flags+0xa0>
 80103da:	4b4a      	ldr	r3, [pc, #296]	; (8010504 <tcp_enqueue_flags+0x1bc>)
 80103dc:	f240 4239 	movw	r2, #1081	; 0x439
 80103e0:	494c      	ldr	r1, [pc, #304]	; (8010514 <tcp_enqueue_flags+0x1cc>)
 80103e2:	484a      	ldr	r0, [pc, #296]	; (801050c <tcp_enqueue_flags+0x1c4>)
 80103e4:	f005 f81c 	bl	8015420 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80103ec:	78fa      	ldrb	r2, [r7, #3]
 80103ee:	7ffb      	ldrb	r3, [r7, #31]
 80103f0:	9300      	str	r3, [sp, #0]
 80103f2:	460b      	mov	r3, r1
 80103f4:	6939      	ldr	r1, [r7, #16]
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f7ff fd70 	bl	800fedc <tcp_create_segment>
 80103fc:	60f8      	str	r0, [r7, #12]
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d109      	bne.n	8010418 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	8b5b      	ldrh	r3, [r3, #26]
 8010408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801040c:	b29a      	uxth	r2, r3
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010412:	f04f 33ff 	mov.w	r3, #4294967295
 8010416:	e070      	b.n	80104fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	68db      	ldr	r3, [r3, #12]
 801041c:	f003 0303 	and.w	r3, r3, #3
 8010420:	2b00      	cmp	r3, #0
 8010422:	d006      	beq.n	8010432 <tcp_enqueue_flags+0xea>
 8010424:	4b37      	ldr	r3, [pc, #220]	; (8010504 <tcp_enqueue_flags+0x1bc>)
 8010426:	f240 4242 	movw	r2, #1090	; 0x442
 801042a:	493b      	ldr	r1, [pc, #236]	; (8010518 <tcp_enqueue_flags+0x1d0>)
 801042c:	4837      	ldr	r0, [pc, #220]	; (801050c <tcp_enqueue_flags+0x1c4>)
 801042e:	f004 fff7 	bl	8015420 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	891b      	ldrh	r3, [r3, #8]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d006      	beq.n	8010448 <tcp_enqueue_flags+0x100>
 801043a:	4b32      	ldr	r3, [pc, #200]	; (8010504 <tcp_enqueue_flags+0x1bc>)
 801043c:	f240 4243 	movw	r2, #1091	; 0x443
 8010440:	4936      	ldr	r1, [pc, #216]	; (801051c <tcp_enqueue_flags+0x1d4>)
 8010442:	4832      	ldr	r0, [pc, #200]	; (801050c <tcp_enqueue_flags+0x1c4>)
 8010444:	f004 ffec 	bl	8015420 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801044c:	2b00      	cmp	r3, #0
 801044e:	d103      	bne.n	8010458 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	68fa      	ldr	r2, [r7, #12]
 8010454:	66da      	str	r2, [r3, #108]	; 0x6c
 8010456:	e00d      	b.n	8010474 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801045c:	61bb      	str	r3, [r7, #24]
 801045e:	e002      	b.n	8010466 <tcp_enqueue_flags+0x11e>
 8010460:	69bb      	ldr	r3, [r7, #24]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	61bb      	str	r3, [r7, #24]
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1f8      	bne.n	8010460 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	68fa      	ldr	r2, [r7, #12]
 8010472:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2200      	movs	r2, #0
 8010478:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801047c:	78fb      	ldrb	r3, [r7, #3]
 801047e:	f003 0302 	and.w	r3, r3, #2
 8010482:	2b00      	cmp	r3, #0
 8010484:	d104      	bne.n	8010490 <tcp_enqueue_flags+0x148>
 8010486:	78fb      	ldrb	r3, [r7, #3]
 8010488:	f003 0301 	and.w	r3, r3, #1
 801048c:	2b00      	cmp	r3, #0
 801048e:	d004      	beq.n	801049a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010494:	1c5a      	adds	r2, r3, #1
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801049a:	78fb      	ldrb	r3, [r7, #3]
 801049c:	f003 0301 	and.w	r3, r3, #1
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d006      	beq.n	80104b2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	8b5b      	ldrh	r3, [r3, #26]
 80104a8:	f043 0320 	orr.w	r3, r3, #32
 80104ac:	b29a      	uxth	r2, r3
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fb fb44 	bl	800bb44 <pbuf_clen>
 80104bc:	4603      	mov	r3, r0
 80104be:	461a      	mov	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104c6:	4413      	add	r3, r2
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00e      	beq.n	80104f8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d10a      	bne.n	80104f8 <tcp_enqueue_flags+0x1b0>
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d106      	bne.n	80104f8 <tcp_enqueue_flags+0x1b0>
 80104ea:	4b06      	ldr	r3, [pc, #24]	; (8010504 <tcp_enqueue_flags+0x1bc>)
 80104ec:	f240 4265 	movw	r2, #1125	; 0x465
 80104f0:	490b      	ldr	r1, [pc, #44]	; (8010520 <tcp_enqueue_flags+0x1d8>)
 80104f2:	4806      	ldr	r0, [pc, #24]	; (801050c <tcp_enqueue_flags+0x1c4>)
 80104f4:	f004 ff94 	bl	8015420 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3720      	adds	r7, #32
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	080180e8 	.word	0x080180e8
 8010508:	0801850c 	.word	0x0801850c
 801050c:	0801813c 	.word	0x0801813c
 8010510:	08018564 	.word	0x08018564
 8010514:	08018584 	.word	0x08018584
 8010518:	080185c0 	.word	0x080185c0
 801051c:	080185d8 	.word	0x080185d8
 8010520:	08018604 	.word	0x08018604

08010524 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010524:	b5b0      	push	{r4, r5, r7, lr}
 8010526:	b08a      	sub	sp, #40	; 0x28
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d106      	bne.n	8010540 <tcp_output+0x1c>
 8010532:	4b8a      	ldr	r3, [pc, #552]	; (801075c <tcp_output+0x238>)
 8010534:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010538:	4989      	ldr	r1, [pc, #548]	; (8010760 <tcp_output+0x23c>)
 801053a:	488a      	ldr	r0, [pc, #552]	; (8010764 <tcp_output+0x240>)
 801053c:	f004 ff70 	bl	8015420 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	7d1b      	ldrb	r3, [r3, #20]
 8010544:	2b01      	cmp	r3, #1
 8010546:	d106      	bne.n	8010556 <tcp_output+0x32>
 8010548:	4b84      	ldr	r3, [pc, #528]	; (801075c <tcp_output+0x238>)
 801054a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801054e:	4986      	ldr	r1, [pc, #536]	; (8010768 <tcp_output+0x244>)
 8010550:	4884      	ldr	r0, [pc, #528]	; (8010764 <tcp_output+0x240>)
 8010552:	f004 ff65 	bl	8015420 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010556:	4b85      	ldr	r3, [pc, #532]	; (801076c <tcp_output+0x248>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	687a      	ldr	r2, [r7, #4]
 801055c:	429a      	cmp	r2, r3
 801055e:	d101      	bne.n	8010564 <tcp_output+0x40>
    return ERR_OK;
 8010560:	2300      	movs	r3, #0
 8010562:	e1ce      	b.n	8010902 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010570:	4293      	cmp	r3, r2
 8010572:	bf28      	it	cs
 8010574:	4613      	movcs	r3, r2
 8010576:	b29b      	uxth	r3, r3
 8010578:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801057e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10b      	bne.n	801059e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	8b5b      	ldrh	r3, [r3, #26]
 801058a:	f003 0302 	and.w	r3, r3, #2
 801058e:	2b00      	cmp	r3, #0
 8010590:	f000 81aa 	beq.w	80108e8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f000 fdcb 	bl	8011130 <tcp_send_empty_ack>
 801059a:	4603      	mov	r3, r0
 801059c:	e1b1      	b.n	8010902 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801059e:	6879      	ldr	r1, [r7, #4]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	3304      	adds	r3, #4
 80105a4:	461a      	mov	r2, r3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f7ff fc7c 	bl	800fea4 <tcp_route>
 80105ac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80105ae:	697b      	ldr	r3, [r7, #20]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d102      	bne.n	80105ba <tcp_output+0x96>
    return ERR_RTE;
 80105b4:	f06f 0303 	mvn.w	r3, #3
 80105b8:	e1a3      	b.n	8010902 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d003      	beq.n	80105c8 <tcp_output+0xa4>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d111      	bne.n	80105ec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d002      	beq.n	80105d4 <tcp_output+0xb0>
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	3304      	adds	r3, #4
 80105d2:	e000      	b.n	80105d6 <tcp_output+0xb2>
 80105d4:	2300      	movs	r3, #0
 80105d6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d102      	bne.n	80105e4 <tcp_output+0xc0>
      return ERR_RTE;
 80105de:	f06f 0303 	mvn.w	r3, #3
 80105e2:	e18e      	b.n	8010902 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80105ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ee:	68db      	ldr	r3, [r3, #12]
 80105f0:	685b      	ldr	r3, [r3, #4]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7f9 fe4f 	bl	800a296 <lwip_htonl>
 80105f8:	4602      	mov	r2, r0
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105fe:	1ad3      	subs	r3, r2, r3
 8010600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010602:	8912      	ldrh	r2, [r2, #8]
 8010604:	4413      	add	r3, r2
 8010606:	69ba      	ldr	r2, [r7, #24]
 8010608:	429a      	cmp	r2, r3
 801060a:	d227      	bcs.n	801065c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010612:	461a      	mov	r2, r3
 8010614:	69bb      	ldr	r3, [r7, #24]
 8010616:	4293      	cmp	r3, r2
 8010618:	d114      	bne.n	8010644 <tcp_output+0x120>
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801061e:	2b00      	cmp	r3, #0
 8010620:	d110      	bne.n	8010644 <tcp_output+0x120>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010628:	2b00      	cmp	r3, #0
 801062a:	d10b      	bne.n	8010644 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2201      	movs	r2, #1
 8010638:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	8b5b      	ldrh	r3, [r3, #26]
 8010648:	f003 0302 	and.w	r3, r3, #2
 801064c:	2b00      	cmp	r3, #0
 801064e:	f000 814d 	beq.w	80108ec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 fd6c 	bl	8011130 <tcp_send_empty_ack>
 8010658:	4603      	mov	r3, r0
 801065a:	e152      	b.n	8010902 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2200      	movs	r2, #0
 8010660:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010668:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801066a:	6a3b      	ldr	r3, [r7, #32]
 801066c:	2b00      	cmp	r3, #0
 801066e:	f000 811c 	beq.w	80108aa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010672:	e002      	b.n	801067a <tcp_output+0x156>
 8010674:	6a3b      	ldr	r3, [r7, #32]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	623b      	str	r3, [r7, #32]
 801067a:	6a3b      	ldr	r3, [r7, #32]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d1f8      	bne.n	8010674 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010682:	e112      	b.n	80108aa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	899b      	ldrh	r3, [r3, #12]
 801068a:	b29b      	uxth	r3, r3
 801068c:	4618      	mov	r0, r3
 801068e:	f7f9 fded 	bl	800a26c <lwip_htons>
 8010692:	4603      	mov	r3, r0
 8010694:	b2db      	uxtb	r3, r3
 8010696:	f003 0304 	and.w	r3, r3, #4
 801069a:	2b00      	cmp	r3, #0
 801069c:	d006      	beq.n	80106ac <tcp_output+0x188>
 801069e:	4b2f      	ldr	r3, [pc, #188]	; (801075c <tcp_output+0x238>)
 80106a0:	f240 5236 	movw	r2, #1334	; 0x536
 80106a4:	4932      	ldr	r1, [pc, #200]	; (8010770 <tcp_output+0x24c>)
 80106a6:	482f      	ldr	r0, [pc, #188]	; (8010764 <tcp_output+0x240>)
 80106a8:	f004 feba 	bl	8015420 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d01f      	beq.n	80106f4 <tcp_output+0x1d0>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	8b5b      	ldrh	r3, [r3, #26]
 80106b8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d119      	bne.n	80106f4 <tcp_output+0x1d0>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00b      	beq.n	80106e0 <tcp_output+0x1bc>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d110      	bne.n	80106f4 <tcp_output+0x1d0>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106d6:	891a      	ldrh	r2, [r3, #8]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106dc:	429a      	cmp	r2, r3
 80106de:	d209      	bcs.n	80106f4 <tcp_output+0x1d0>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d004      	beq.n	80106f4 <tcp_output+0x1d0>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106f0:	2b08      	cmp	r3, #8
 80106f2:	d901      	bls.n	80106f8 <tcp_output+0x1d4>
 80106f4:	2301      	movs	r3, #1
 80106f6:	e000      	b.n	80106fa <tcp_output+0x1d6>
 80106f8:	2300      	movs	r3, #0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d106      	bne.n	801070c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	8b5b      	ldrh	r3, [r3, #26]
 8010702:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010706:	2b00      	cmp	r3, #0
 8010708:	f000 80e4 	beq.w	80108d4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	7d1b      	ldrb	r3, [r3, #20]
 8010710:	2b02      	cmp	r3, #2
 8010712:	d00d      	beq.n	8010730 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	899b      	ldrh	r3, [r3, #12]
 801071a:	b29c      	uxth	r4, r3
 801071c:	2010      	movs	r0, #16
 801071e:	f7f9 fda5 	bl	800a26c <lwip_htons>
 8010722:	4603      	mov	r3, r0
 8010724:	461a      	mov	r2, r3
 8010726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010728:	68db      	ldr	r3, [r3, #12]
 801072a:	4322      	orrs	r2, r4
 801072c:	b292      	uxth	r2, r2
 801072e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010730:	697a      	ldr	r2, [r7, #20]
 8010732:	6879      	ldr	r1, [r7, #4]
 8010734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010736:	f000 f909 	bl	801094c <tcp_output_segment>
 801073a:	4603      	mov	r3, r0
 801073c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801073e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d016      	beq.n	8010774 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	8b5b      	ldrh	r3, [r3, #26]
 801074a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801074e:	b29a      	uxth	r2, r3
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	835a      	strh	r2, [r3, #26]
      return err;
 8010754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010758:	e0d3      	b.n	8010902 <tcp_output+0x3de>
 801075a:	bf00      	nop
 801075c:	080180e8 	.word	0x080180e8
 8010760:	0801862c 	.word	0x0801862c
 8010764:	0801813c 	.word	0x0801813c
 8010768:	08018644 	.word	0x08018644
 801076c:	20040af0 	.word	0x20040af0
 8010770:	0801866c 	.word	0x0801866c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010776:	681a      	ldr	r2, [r3, #0]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	7d1b      	ldrb	r3, [r3, #20]
 8010780:	2b02      	cmp	r3, #2
 8010782:	d006      	beq.n	8010792 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	8b5b      	ldrh	r3, [r3, #26]
 8010788:	f023 0303 	bic.w	r3, r3, #3
 801078c:	b29a      	uxth	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	4618      	mov	r0, r3
 801079a:	f7f9 fd7c 	bl	800a296 <lwip_htonl>
 801079e:	4604      	mov	r4, r0
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a2:	891b      	ldrh	r3, [r3, #8]
 80107a4:	461d      	mov	r5, r3
 80107a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	899b      	ldrh	r3, [r3, #12]
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7f9 fd5c 	bl	800a26c <lwip_htons>
 80107b4:	4603      	mov	r3, r0
 80107b6:	b2db      	uxtb	r3, r3
 80107b8:	f003 0303 	and.w	r3, r3, #3
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d001      	beq.n	80107c4 <tcp_output+0x2a0>
 80107c0:	2301      	movs	r3, #1
 80107c2:	e000      	b.n	80107c6 <tcp_output+0x2a2>
 80107c4:	2300      	movs	r3, #0
 80107c6:	442b      	add	r3, r5
 80107c8:	4423      	add	r3, r4
 80107ca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	da02      	bge.n	80107de <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68ba      	ldr	r2, [r7, #8]
 80107dc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	891b      	ldrh	r3, [r3, #8]
 80107e2:	461c      	mov	r4, r3
 80107e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e6:	68db      	ldr	r3, [r3, #12]
 80107e8:	899b      	ldrh	r3, [r3, #12]
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7f9 fd3d 	bl	800a26c <lwip_htons>
 80107f2:	4603      	mov	r3, r0
 80107f4:	b2db      	uxtb	r3, r3
 80107f6:	f003 0303 	and.w	r3, r3, #3
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d001      	beq.n	8010802 <tcp_output+0x2de>
 80107fe:	2301      	movs	r3, #1
 8010800:	e000      	b.n	8010804 <tcp_output+0x2e0>
 8010802:	2300      	movs	r3, #0
 8010804:	4423      	add	r3, r4
 8010806:	2b00      	cmp	r3, #0
 8010808:	d049      	beq.n	801089e <tcp_output+0x37a>
      seg->next = NULL;
 801080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080c:	2200      	movs	r2, #0
 801080e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010814:	2b00      	cmp	r3, #0
 8010816:	d105      	bne.n	8010824 <tcp_output+0x300>
        pcb->unacked = seg;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801081c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	623b      	str	r3, [r7, #32]
 8010822:	e03f      	b.n	80108a4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	4618      	mov	r0, r3
 801082c:	f7f9 fd33 	bl	800a296 <lwip_htonl>
 8010830:	4604      	mov	r4, r0
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	4618      	mov	r0, r3
 801083a:	f7f9 fd2c 	bl	800a296 <lwip_htonl>
 801083e:	4603      	mov	r3, r0
 8010840:	1ae3      	subs	r3, r4, r3
 8010842:	2b00      	cmp	r3, #0
 8010844:	da24      	bge.n	8010890 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	3370      	adds	r3, #112	; 0x70
 801084a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801084c:	e002      	b.n	8010854 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801084e:	69fb      	ldr	r3, [r7, #28]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d011      	beq.n	8010880 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	4618      	mov	r0, r3
 8010866:	f7f9 fd16 	bl	800a296 <lwip_htonl>
 801086a:	4604      	mov	r4, r0
 801086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086e:	68db      	ldr	r3, [r3, #12]
 8010870:	685b      	ldr	r3, [r3, #4]
 8010872:	4618      	mov	r0, r3
 8010874:	f7f9 fd0f 	bl	800a296 <lwip_htonl>
 8010878:	4603      	mov	r3, r0
 801087a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801087c:	2b00      	cmp	r3, #0
 801087e:	dbe6      	blt.n	801084e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801088c:	601a      	str	r2, [r3, #0]
 801088e:	e009      	b.n	80108a4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010890:	6a3b      	ldr	r3, [r7, #32]
 8010892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010894:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010896:	6a3b      	ldr	r3, [r7, #32]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	623b      	str	r3, [r7, #32]
 801089c:	e002      	b.n	80108a4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801089e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108a0:	f7fc fc3f 	bl	800d122 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108a8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d012      	beq.n	80108d6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	685b      	ldr	r3, [r3, #4]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7f9 fced 	bl	800a296 <lwip_htonl>
 80108bc:	4602      	mov	r2, r0
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108c2:	1ad3      	subs	r3, r2, r3
 80108c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108c6:	8912      	ldrh	r2, [r2, #8]
 80108c8:	4413      	add	r3, r2
  while (seg != NULL &&
 80108ca:	69ba      	ldr	r2, [r7, #24]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	f4bf aed9 	bcs.w	8010684 <tcp_output+0x160>
 80108d2:	e000      	b.n	80108d6 <tcp_output+0x3b2>
      break;
 80108d4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d108      	bne.n	80108f0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2200      	movs	r2, #0
 80108e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80108e6:	e004      	b.n	80108f2 <tcp_output+0x3ce>
    goto output_done;
 80108e8:	bf00      	nop
 80108ea:	e002      	b.n	80108f2 <tcp_output+0x3ce>
    goto output_done;
 80108ec:	bf00      	nop
 80108ee:	e000      	b.n	80108f2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80108f0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	8b5b      	ldrh	r3, [r3, #26]
 80108f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010900:	2300      	movs	r3, #0
}
 8010902:	4618      	mov	r0, r3
 8010904:	3728      	adds	r7, #40	; 0x28
 8010906:	46bd      	mov	sp, r7
 8010908:	bdb0      	pop	{r4, r5, r7, pc}
 801090a:	bf00      	nop

0801090c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d106      	bne.n	8010928 <tcp_output_segment_busy+0x1c>
 801091a:	4b09      	ldr	r3, [pc, #36]	; (8010940 <tcp_output_segment_busy+0x34>)
 801091c:	f240 529a 	movw	r2, #1434	; 0x59a
 8010920:	4908      	ldr	r1, [pc, #32]	; (8010944 <tcp_output_segment_busy+0x38>)
 8010922:	4809      	ldr	r0, [pc, #36]	; (8010948 <tcp_output_segment_busy+0x3c>)
 8010924:	f004 fd7c 	bl	8015420 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	7b9b      	ldrb	r3, [r3, #14]
 801092e:	2b01      	cmp	r3, #1
 8010930:	d001      	beq.n	8010936 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010932:	2301      	movs	r3, #1
 8010934:	e000      	b.n	8010938 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	080180e8 	.word	0x080180e8
 8010944:	08018684 	.word	0x08018684
 8010948:	0801813c 	.word	0x0801813c

0801094c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801094c:	b5b0      	push	{r4, r5, r7, lr}
 801094e:	b08c      	sub	sp, #48	; 0x30
 8010950:	af04      	add	r7, sp, #16
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d106      	bne.n	801096c <tcp_output_segment+0x20>
 801095e:	4b63      	ldr	r3, [pc, #396]	; (8010aec <tcp_output_segment+0x1a0>)
 8010960:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010964:	4962      	ldr	r1, [pc, #392]	; (8010af0 <tcp_output_segment+0x1a4>)
 8010966:	4863      	ldr	r0, [pc, #396]	; (8010af4 <tcp_output_segment+0x1a8>)
 8010968:	f004 fd5a 	bl	8015420 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d106      	bne.n	8010980 <tcp_output_segment+0x34>
 8010972:	4b5e      	ldr	r3, [pc, #376]	; (8010aec <tcp_output_segment+0x1a0>)
 8010974:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010978:	495f      	ldr	r1, [pc, #380]	; (8010af8 <tcp_output_segment+0x1ac>)
 801097a:	485e      	ldr	r0, [pc, #376]	; (8010af4 <tcp_output_segment+0x1a8>)
 801097c:	f004 fd50 	bl	8015420 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d106      	bne.n	8010994 <tcp_output_segment+0x48>
 8010986:	4b59      	ldr	r3, [pc, #356]	; (8010aec <tcp_output_segment+0x1a0>)
 8010988:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801098c:	495b      	ldr	r1, [pc, #364]	; (8010afc <tcp_output_segment+0x1b0>)
 801098e:	4859      	ldr	r0, [pc, #356]	; (8010af4 <tcp_output_segment+0x1a8>)
 8010990:	f004 fd46 	bl	8015420 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010994:	68f8      	ldr	r0, [r7, #12]
 8010996:	f7ff ffb9 	bl	801090c <tcp_output_segment_busy>
 801099a:	4603      	mov	r3, r0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d001      	beq.n	80109a4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80109a0:	2300      	movs	r3, #0
 80109a2:	e09f      	b.n	8010ae4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	68dc      	ldr	r4, [r3, #12]
 80109ac:	4610      	mov	r0, r2
 80109ae:	f7f9 fc72 	bl	800a296 <lwip_htonl>
 80109b2:	4603      	mov	r3, r0
 80109b4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80109b6:	68bb      	ldr	r3, [r7, #8]
 80109b8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	68dc      	ldr	r4, [r3, #12]
 80109be:	4610      	mov	r0, r2
 80109c0:	f7f9 fc54 	bl	800a26c <lwip_htons>
 80109c4:	4603      	mov	r3, r0
 80109c6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109cc:	68ba      	ldr	r2, [r7, #8]
 80109ce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80109d0:	441a      	add	r2, r3
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	68db      	ldr	r3, [r3, #12]
 80109da:	3314      	adds	r3, #20
 80109dc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	7a9b      	ldrb	r3, [r3, #10]
 80109e2:	f003 0301 	and.w	r3, r3, #1
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d015      	beq.n	8010a16 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	3304      	adds	r3, #4
 80109ee:	461a      	mov	r2, r3
 80109f0:	6879      	ldr	r1, [r7, #4]
 80109f2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80109f6:	f7fc fe8b 	bl	800d710 <tcp_eff_send_mss_netif>
 80109fa:	4603      	mov	r3, r0
 80109fc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80109fe:	8b7b      	ldrh	r3, [r7, #26]
 8010a00:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7f9 fc46 	bl	800a296 <lwip_htonl>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	69fb      	ldr	r3, [r7, #28]
 8010a0e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	3304      	adds	r3, #4
 8010a14:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	da02      	bge.n	8010a26 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	2200      	movs	r2, #0
 8010a24:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d10c      	bne.n	8010a48 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010a2e:	4b34      	ldr	r3, [pc, #208]	; (8010b00 <tcp_output_segment+0x1b4>)
 8010a30:	681a      	ldr	r2, [r3, #0]
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	68db      	ldr	r3, [r3, #12]
 8010a3a:	685b      	ldr	r3, [r3, #4]
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7f9 fc2a 	bl	800a296 <lwip_htonl>
 8010a42:	4602      	mov	r2, r0
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	68da      	ldr	r2, [r3, #12]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	8959      	ldrh	r1, [r3, #10]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	8b3a      	ldrh	r2, [r7, #24]
 8010a62:	1a8a      	subs	r2, r1, r2
 8010a64:	b292      	uxth	r2, r2
 8010a66:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	685b      	ldr	r3, [r3, #4]
 8010a6c:	8919      	ldrh	r1, [r3, #8]
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	8b3a      	ldrh	r2, [r7, #24]
 8010a74:	1a8a      	subs	r2, r1, r2
 8010a76:	b292      	uxth	r2, r2
 8010a78:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	68fa      	ldr	r2, [r7, #12]
 8010a80:	68d2      	ldr	r2, [r2, #12]
 8010a82:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	741a      	strb	r2, [r3, #16]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	f103 0214 	add.w	r2, r3, #20
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	7a9b      	ldrb	r3, [r3, #10]
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	f003 0304 	and.w	r3, r3, #4
 8010aa2:	4413      	add	r3, r2
 8010aa4:	69fa      	ldr	r2, [r7, #28]
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d006      	beq.n	8010ab8 <tcp_output_segment+0x16c>
 8010aaa:	4b10      	ldr	r3, [pc, #64]	; (8010aec <tcp_output_segment+0x1a0>)
 8010aac:	f240 621c 	movw	r2, #1564	; 0x61c
 8010ab0:	4914      	ldr	r1, [pc, #80]	; (8010b04 <tcp_output_segment+0x1b8>)
 8010ab2:	4810      	ldr	r0, [pc, #64]	; (8010af4 <tcp_output_segment+0x1a8>)
 8010ab4:	f004 fcb4 	bl	8015420 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	6858      	ldr	r0, [r3, #4]
 8010abc:	68b9      	ldr	r1, [r7, #8]
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	1d1c      	adds	r4, r3, #4
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	7add      	ldrb	r5, [r3, #11]
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	7a9b      	ldrb	r3, [r3, #10]
 8010aca:	687a      	ldr	r2, [r7, #4]
 8010acc:	9202      	str	r2, [sp, #8]
 8010ace:	2206      	movs	r2, #6
 8010ad0:	9201      	str	r2, [sp, #4]
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	462b      	mov	r3, r5
 8010ad6:	4622      	mov	r2, r4
 8010ad8:	f002 fd9c 	bl	8013614 <ip4_output_if>
 8010adc:	4603      	mov	r3, r0
 8010ade:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	3720      	adds	r7, #32
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bdb0      	pop	{r4, r5, r7, pc}
 8010aec:	080180e8 	.word	0x080180e8
 8010af0:	080186ac 	.word	0x080186ac
 8010af4:	0801813c 	.word	0x0801813c
 8010af8:	080186cc 	.word	0x080186cc
 8010afc:	080186ec 	.word	0x080186ec
 8010b00:	20040aa4 	.word	0x20040aa4
 8010b04:	08018710 	.word	0x08018710

08010b08 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010b08:	b5b0      	push	{r4, r5, r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d106      	bne.n	8010b24 <tcp_rexmit_rto_prepare+0x1c>
 8010b16:	4b31      	ldr	r3, [pc, #196]	; (8010bdc <tcp_rexmit_rto_prepare+0xd4>)
 8010b18:	f240 6263 	movw	r2, #1635	; 0x663
 8010b1c:	4930      	ldr	r1, [pc, #192]	; (8010be0 <tcp_rexmit_rto_prepare+0xd8>)
 8010b1e:	4831      	ldr	r0, [pc, #196]	; (8010be4 <tcp_rexmit_rto_prepare+0xdc>)
 8010b20:	f004 fc7e 	bl	8015420 <iprintf>

  if (pcb->unacked == NULL) {
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d102      	bne.n	8010b32 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010b2c:	f06f 0305 	mvn.w	r3, #5
 8010b30:	e050      	b.n	8010bd4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b36:	60fb      	str	r3, [r7, #12]
 8010b38:	e00b      	b.n	8010b52 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f7ff fee6 	bl	801090c <tcp_output_segment_busy>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d002      	beq.n	8010b4c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010b46:	f06f 0305 	mvn.w	r3, #5
 8010b4a:	e043      	b.n	8010bd4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	60fb      	str	r3, [r7, #12]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d1ef      	bne.n	8010b3a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010b5a:	68f8      	ldr	r0, [r7, #12]
 8010b5c:	f7ff fed6 	bl	801090c <tcp_output_segment_busy>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d002      	beq.n	8010b6c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010b66:	f06f 0305 	mvn.w	r3, #5
 8010b6a:	e033      	b.n	8010bd4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	8b5b      	ldrh	r3, [r3, #26]
 8010b86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	68db      	ldr	r3, [r3, #12]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7f9 fb7d 	bl	800a296 <lwip_htonl>
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	891b      	ldrh	r3, [r3, #8]
 8010ba2:	461d      	mov	r5, r3
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	899b      	ldrh	r3, [r3, #12]
 8010baa:	b29b      	uxth	r3, r3
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7f9 fb5d 	bl	800a26c <lwip_htons>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	b2db      	uxtb	r3, r3
 8010bb6:	f003 0303 	and.w	r3, r3, #3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d001      	beq.n	8010bc2 <tcp_rexmit_rto_prepare+0xba>
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	e000      	b.n	8010bc4 <tcp_rexmit_rto_prepare+0xbc>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	442b      	add	r3, r5
 8010bc6:	18e2      	adds	r2, r4, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010bd2:	2300      	movs	r3, #0
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3710      	adds	r7, #16
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bdb0      	pop	{r4, r5, r7, pc}
 8010bdc:	080180e8 	.word	0x080180e8
 8010be0:	08018724 	.word	0x08018724
 8010be4:	0801813c 	.word	0x0801813c

08010be8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d106      	bne.n	8010c04 <tcp_rexmit_rto_commit+0x1c>
 8010bf6:	4b0d      	ldr	r3, [pc, #52]	; (8010c2c <tcp_rexmit_rto_commit+0x44>)
 8010bf8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010bfc:	490c      	ldr	r1, [pc, #48]	; (8010c30 <tcp_rexmit_rto_commit+0x48>)
 8010bfe:	480d      	ldr	r0, [pc, #52]	; (8010c34 <tcp_rexmit_rto_commit+0x4c>)
 8010c00:	f004 fc0e 	bl	8015420 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c0a:	2bff      	cmp	r3, #255	; 0xff
 8010c0c:	d007      	beq.n	8010c1e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c14:	3301      	adds	r3, #1
 8010c16:	b2da      	uxtb	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f7ff fc80 	bl	8010524 <tcp_output>
}
 8010c24:	bf00      	nop
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}
 8010c2c:	080180e8 	.word	0x080180e8
 8010c30:	08018748 	.word	0x08018748
 8010c34:	0801813c 	.word	0x0801813c

08010c38 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d106      	bne.n	8010c54 <tcp_rexmit_rto+0x1c>
 8010c46:	4b0a      	ldr	r3, [pc, #40]	; (8010c70 <tcp_rexmit_rto+0x38>)
 8010c48:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010c4c:	4909      	ldr	r1, [pc, #36]	; (8010c74 <tcp_rexmit_rto+0x3c>)
 8010c4e:	480a      	ldr	r0, [pc, #40]	; (8010c78 <tcp_rexmit_rto+0x40>)
 8010c50:	f004 fbe6 	bl	8015420 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ff ff57 	bl	8010b08 <tcp_rexmit_rto_prepare>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d102      	bne.n	8010c66 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f7ff ffc1 	bl	8010be8 <tcp_rexmit_rto_commit>
  }
}
 8010c66:	bf00      	nop
 8010c68:	3708      	adds	r7, #8
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	080180e8 	.word	0x080180e8
 8010c74:	0801876c 	.word	0x0801876c
 8010c78:	0801813c 	.word	0x0801813c

08010c7c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010c7c:	b590      	push	{r4, r7, lr}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <tcp_rexmit+0x1c>
 8010c8a:	4b2f      	ldr	r3, [pc, #188]	; (8010d48 <tcp_rexmit+0xcc>)
 8010c8c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010c90:	492e      	ldr	r1, [pc, #184]	; (8010d4c <tcp_rexmit+0xd0>)
 8010c92:	482f      	ldr	r0, [pc, #188]	; (8010d50 <tcp_rexmit+0xd4>)
 8010c94:	f004 fbc4 	bl	8015420 <iprintf>

  if (pcb->unacked == NULL) {
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d102      	bne.n	8010ca6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010ca0:	f06f 0305 	mvn.w	r3, #5
 8010ca4:	e04c      	b.n	8010d40 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010caa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010cac:	68b8      	ldr	r0, [r7, #8]
 8010cae:	f7ff fe2d 	bl	801090c <tcp_output_segment_busy>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010cb8:	f06f 0305 	mvn.w	r3, #5
 8010cbc:	e040      	b.n	8010d40 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	681a      	ldr	r2, [r3, #0]
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	336c      	adds	r3, #108	; 0x6c
 8010cca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ccc:	e002      	b.n	8010cd4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d011      	beq.n	8010d00 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f7f9 fad6 	bl	800a296 <lwip_htonl>
 8010cea:	4604      	mov	r4, r0
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	68db      	ldr	r3, [r3, #12]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7f9 facf 	bl	800a296 <lwip_htonl>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	dbe6      	blt.n	8010cce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	68bb      	ldr	r3, [r7, #8]
 8010d06:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	68ba      	ldr	r2, [r7, #8]
 8010d0c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d103      	bne.n	8010d1e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d24:	2bff      	cmp	r3, #255	; 0xff
 8010d26:	d007      	beq.n	8010d38 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d2e:	3301      	adds	r3, #1
 8010d30:	b2da      	uxtb	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010d3e:	2300      	movs	r3, #0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3714      	adds	r7, #20
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd90      	pop	{r4, r7, pc}
 8010d48:	080180e8 	.word	0x080180e8
 8010d4c:	08018788 	.word	0x08018788
 8010d50:	0801813c 	.word	0x0801813c

08010d54 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d106      	bne.n	8010d70 <tcp_rexmit_fast+0x1c>
 8010d62:	4b2a      	ldr	r3, [pc, #168]	; (8010e0c <tcp_rexmit_fast+0xb8>)
 8010d64:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010d68:	4929      	ldr	r1, [pc, #164]	; (8010e10 <tcp_rexmit_fast+0xbc>)
 8010d6a:	482a      	ldr	r0, [pc, #168]	; (8010e14 <tcp_rexmit_fast+0xc0>)
 8010d6c:	f004 fb58 	bl	8015420 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d045      	beq.n	8010e04 <tcp_rexmit_fast+0xb0>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	8b5b      	ldrh	r3, [r3, #26]
 8010d7c:	f003 0304 	and.w	r3, r3, #4
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d13f      	bne.n	8010e04 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7ff ff79 	bl	8010c7c <tcp_rexmit>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d139      	bne.n	8010e04 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	bf28      	it	cs
 8010da0:	4613      	movcs	r3, r2
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	da00      	bge.n	8010daa <tcp_rexmit_fast+0x56>
 8010da8:	3301      	adds	r3, #1
 8010daa:	105b      	asrs	r3, r3, #1
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010dba:	461a      	mov	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dc0:	005b      	lsls	r3, r3, #1
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d206      	bcs.n	8010dd4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dca:	005b      	lsls	r3, r3, #1
 8010dcc:	b29a      	uxth	r2, r3
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dde:	4619      	mov	r1, r3
 8010de0:	0049      	lsls	r1, r1, #1
 8010de2:	440b      	add	r3, r1
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	4413      	add	r3, r2
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	8b5b      	ldrh	r3, [r3, #26]
 8010df4:	f043 0304 	orr.w	r3, r3, #4
 8010df8:	b29a      	uxth	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2200      	movs	r2, #0
 8010e02:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010e04:	bf00      	nop
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	080180e8 	.word	0x080180e8
 8010e10:	080187a0 	.word	0x080187a0
 8010e14:	0801813c 	.word	0x0801813c

08010e18 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b086      	sub	sp, #24
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	607b      	str	r3, [r7, #4]
 8010e22:	460b      	mov	r3, r1
 8010e24:	817b      	strh	r3, [r7, #10]
 8010e26:	4613      	mov	r3, r2
 8010e28:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010e2a:	897a      	ldrh	r2, [r7, #10]
 8010e2c:	893b      	ldrh	r3, [r7, #8]
 8010e2e:	4413      	add	r3, r2
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	3314      	adds	r3, #20
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	2022      	movs	r0, #34	; 0x22
 8010e3e:	f7fa fb11 	bl	800b464 <pbuf_alloc>
 8010e42:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d04d      	beq.n	8010ee6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010e4a:	897b      	ldrh	r3, [r7, #10]
 8010e4c:	3313      	adds	r3, #19
 8010e4e:	697a      	ldr	r2, [r7, #20]
 8010e50:	8952      	ldrh	r2, [r2, #10]
 8010e52:	4293      	cmp	r3, r2
 8010e54:	db06      	blt.n	8010e64 <tcp_output_alloc_header_common+0x4c>
 8010e56:	4b26      	ldr	r3, [pc, #152]	; (8010ef0 <tcp_output_alloc_header_common+0xd8>)
 8010e58:	f240 7223 	movw	r2, #1827	; 0x723
 8010e5c:	4925      	ldr	r1, [pc, #148]	; (8010ef4 <tcp_output_alloc_header_common+0xdc>)
 8010e5e:	4826      	ldr	r0, [pc, #152]	; (8010ef8 <tcp_output_alloc_header_common+0xe0>)
 8010e60:	f004 fade 	bl	8015420 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010e6a:	8c3b      	ldrh	r3, [r7, #32]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7f9 f9fd 	bl	800a26c <lwip_htons>
 8010e72:	4603      	mov	r3, r0
 8010e74:	461a      	mov	r2, r3
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f7f9 f9f5 	bl	800a26c <lwip_htons>
 8010e82:	4603      	mov	r3, r0
 8010e84:	461a      	mov	r2, r3
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	f7f9 fa00 	bl	800a296 <lwip_htonl>
 8010e96:	4602      	mov	r2, r0
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010e9c:	897b      	ldrh	r3, [r7, #10]
 8010e9e:	089b      	lsrs	r3, r3, #2
 8010ea0:	b29b      	uxth	r3, r3
 8010ea2:	3305      	adds	r3, #5
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	031b      	lsls	r3, r3, #12
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	4313      	orrs	r3, r2
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	f7f9 f9d9 	bl	800a26c <lwip_htons>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010ec2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7f9 f9d1 	bl	800a26c <lwip_htons>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	461a      	mov	r2, r3
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	741a      	strb	r2, [r3, #16]
 8010ed8:	2200      	movs	r2, #0
 8010eda:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	2200      	movs	r2, #0
 8010ee0:	749a      	strb	r2, [r3, #18]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010ee6:	697b      	ldr	r3, [r7, #20]
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3718      	adds	r7, #24
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	080180e8 	.word	0x080180e8
 8010ef4:	080187c0 	.word	0x080187c0
 8010ef8:	0801813c 	.word	0x0801813c

08010efc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010efc:	b5b0      	push	{r4, r5, r7, lr}
 8010efe:	b08a      	sub	sp, #40	; 0x28
 8010f00:	af04      	add	r7, sp, #16
 8010f02:	60f8      	str	r0, [r7, #12]
 8010f04:	607b      	str	r3, [r7, #4]
 8010f06:	460b      	mov	r3, r1
 8010f08:	817b      	strh	r3, [r7, #10]
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d106      	bne.n	8010f22 <tcp_output_alloc_header+0x26>
 8010f14:	4b15      	ldr	r3, [pc, #84]	; (8010f6c <tcp_output_alloc_header+0x70>)
 8010f16:	f240 7242 	movw	r2, #1858	; 0x742
 8010f1a:	4915      	ldr	r1, [pc, #84]	; (8010f70 <tcp_output_alloc_header+0x74>)
 8010f1c:	4815      	ldr	r0, [pc, #84]	; (8010f74 <tcp_output_alloc_header+0x78>)
 8010f1e:	f004 fa7f 	bl	8015420 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	8adb      	ldrh	r3, [r3, #22]
 8010f2a:	68fa      	ldr	r2, [r7, #12]
 8010f2c:	8b12      	ldrh	r2, [r2, #24]
 8010f2e:	68f9      	ldr	r1, [r7, #12]
 8010f30:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010f32:	893d      	ldrh	r5, [r7, #8]
 8010f34:	897c      	ldrh	r4, [r7, #10]
 8010f36:	9103      	str	r1, [sp, #12]
 8010f38:	2110      	movs	r1, #16
 8010f3a:	9102      	str	r1, [sp, #8]
 8010f3c:	9201      	str	r2, [sp, #4]
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	462a      	mov	r2, r5
 8010f44:	4621      	mov	r1, r4
 8010f46:	f7ff ff67 	bl	8010e18 <tcp_output_alloc_header_common>
 8010f4a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d006      	beq.n	8010f60 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010f5a:	441a      	add	r2, r3
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010f60:	697b      	ldr	r3, [r7, #20]
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3718      	adds	r7, #24
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bdb0      	pop	{r4, r5, r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	080180e8 	.word	0x080180e8
 8010f70:	080187f0 	.word	0x080187f0
 8010f74:	0801813c 	.word	0x0801813c

08010f78 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b088      	sub	sp, #32
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	4611      	mov	r1, r2
 8010f84:	461a      	mov	r2, r3
 8010f86:	460b      	mov	r3, r1
 8010f88:	71fb      	strb	r3, [r7, #7]
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d106      	bne.n	8010fa6 <tcp_output_fill_options+0x2e>
 8010f98:	4b13      	ldr	r3, [pc, #76]	; (8010fe8 <tcp_output_fill_options+0x70>)
 8010f9a:	f240 7256 	movw	r2, #1878	; 0x756
 8010f9e:	4913      	ldr	r1, [pc, #76]	; (8010fec <tcp_output_fill_options+0x74>)
 8010fa0:	4813      	ldr	r0, [pc, #76]	; (8010ff0 <tcp_output_fill_options+0x78>)
 8010fa2:	f004 fa3d 	bl	8015420 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	3314      	adds	r3, #20
 8010fb0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010fb2:	69bb      	ldr	r3, [r7, #24]
 8010fb4:	f103 0214 	add.w	r2, r3, #20
 8010fb8:	8bfb      	ldrh	r3, [r7, #30]
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	79fb      	ldrb	r3, [r7, #7]
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	f003 0304 	and.w	r3, r3, #4
 8010fc6:	440b      	add	r3, r1
 8010fc8:	4413      	add	r3, r2
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d006      	beq.n	8010fde <tcp_output_fill_options+0x66>
 8010fd0:	4b05      	ldr	r3, [pc, #20]	; (8010fe8 <tcp_output_fill_options+0x70>)
 8010fd2:	f240 7275 	movw	r2, #1909	; 0x775
 8010fd6:	4907      	ldr	r1, [pc, #28]	; (8010ff4 <tcp_output_fill_options+0x7c>)
 8010fd8:	4805      	ldr	r0, [pc, #20]	; (8010ff0 <tcp_output_fill_options+0x78>)
 8010fda:	f004 fa21 	bl	8015420 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010fde:	bf00      	nop
 8010fe0:	3720      	adds	r7, #32
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	080180e8 	.word	0x080180e8
 8010fec:	08018818 	.word	0x08018818
 8010ff0:	0801813c 	.word	0x0801813c
 8010ff4:	08018710 	.word	0x08018710

08010ff8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b08a      	sub	sp, #40	; 0x28
 8010ffc:	af04      	add	r7, sp, #16
 8010ffe:	60f8      	str	r0, [r7, #12]
 8011000:	60b9      	str	r1, [r7, #8]
 8011002:	607a      	str	r2, [r7, #4]
 8011004:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d106      	bne.n	801101a <tcp_output_control_segment+0x22>
 801100c:	4b1c      	ldr	r3, [pc, #112]	; (8011080 <tcp_output_control_segment+0x88>)
 801100e:	f240 7287 	movw	r2, #1927	; 0x787
 8011012:	491c      	ldr	r1, [pc, #112]	; (8011084 <tcp_output_control_segment+0x8c>)
 8011014:	481c      	ldr	r0, [pc, #112]	; (8011088 <tcp_output_control_segment+0x90>)
 8011016:	f004 fa03 	bl	8015420 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801101a:	683a      	ldr	r2, [r7, #0]
 801101c:	6879      	ldr	r1, [r7, #4]
 801101e:	68f8      	ldr	r0, [r7, #12]
 8011020:	f7fe ff40 	bl	800fea4 <tcp_route>
 8011024:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011026:	693b      	ldr	r3, [r7, #16]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d102      	bne.n	8011032 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801102c:	23fc      	movs	r3, #252	; 0xfc
 801102e:	75fb      	strb	r3, [r7, #23]
 8011030:	e01c      	b.n	801106c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d006      	beq.n	8011046 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	7adb      	ldrb	r3, [r3, #11]
 801103c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	7a9b      	ldrb	r3, [r3, #10]
 8011042:	757b      	strb	r3, [r7, #21]
 8011044:	e003      	b.n	801104e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011046:	23ff      	movs	r3, #255	; 0xff
 8011048:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801104a:	2300      	movs	r3, #0
 801104c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801104e:	7dba      	ldrb	r2, [r7, #22]
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	9302      	str	r3, [sp, #8]
 8011054:	2306      	movs	r3, #6
 8011056:	9301      	str	r3, [sp, #4]
 8011058:	7d7b      	ldrb	r3, [r7, #21]
 801105a:	9300      	str	r3, [sp, #0]
 801105c:	4613      	mov	r3, r2
 801105e:	683a      	ldr	r2, [r7, #0]
 8011060:	6879      	ldr	r1, [r7, #4]
 8011062:	68b8      	ldr	r0, [r7, #8]
 8011064:	f002 fad6 	bl	8013614 <ip4_output_if>
 8011068:	4603      	mov	r3, r0
 801106a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801106c:	68b8      	ldr	r0, [r7, #8]
 801106e:	f7fa fcdb 	bl	800ba28 <pbuf_free>
  return err;
 8011072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011076:	4618      	mov	r0, r3
 8011078:	3718      	adds	r7, #24
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	080180e8 	.word	0x080180e8
 8011084:	08018840 	.word	0x08018840
 8011088:	0801813c 	.word	0x0801813c

0801108c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801108c:	b590      	push	{r4, r7, lr}
 801108e:	b08b      	sub	sp, #44	; 0x2c
 8011090:	af04      	add	r7, sp, #16
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
 8011098:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d106      	bne.n	80110ae <tcp_rst+0x22>
 80110a0:	4b1f      	ldr	r3, [pc, #124]	; (8011120 <tcp_rst+0x94>)
 80110a2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80110a6:	491f      	ldr	r1, [pc, #124]	; (8011124 <tcp_rst+0x98>)
 80110a8:	481f      	ldr	r0, [pc, #124]	; (8011128 <tcp_rst+0x9c>)
 80110aa:	f004 f9b9 	bl	8015420 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80110ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d106      	bne.n	80110c2 <tcp_rst+0x36>
 80110b4:	4b1a      	ldr	r3, [pc, #104]	; (8011120 <tcp_rst+0x94>)
 80110b6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80110ba:	491c      	ldr	r1, [pc, #112]	; (801112c <tcp_rst+0xa0>)
 80110bc:	481a      	ldr	r0, [pc, #104]	; (8011128 <tcp_rst+0x9c>)
 80110be:	f004 f9af 	bl	8015420 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80110c2:	2300      	movs	r3, #0
 80110c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80110c6:	f246 0308 	movw	r3, #24584	; 0x6008
 80110ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80110cc:	7dfb      	ldrb	r3, [r7, #23]
 80110ce:	b29c      	uxth	r4, r3
 80110d0:	68b8      	ldr	r0, [r7, #8]
 80110d2:	f7f9 f8e0 	bl	800a296 <lwip_htonl>
 80110d6:	4602      	mov	r2, r0
 80110d8:	8abb      	ldrh	r3, [r7, #20]
 80110da:	9303      	str	r3, [sp, #12]
 80110dc:	2314      	movs	r3, #20
 80110de:	9302      	str	r3, [sp, #8]
 80110e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80110e2:	9301      	str	r3, [sp, #4]
 80110e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110e6:	9300      	str	r3, [sp, #0]
 80110e8:	4613      	mov	r3, r2
 80110ea:	2200      	movs	r2, #0
 80110ec:	4621      	mov	r1, r4
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f7ff fe92 	bl	8010e18 <tcp_output_alloc_header_common>
 80110f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00c      	beq.n	8011116 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80110fc:	7dfb      	ldrb	r3, [r7, #23]
 80110fe:	2200      	movs	r2, #0
 8011100:	6939      	ldr	r1, [r7, #16]
 8011102:	68f8      	ldr	r0, [r7, #12]
 8011104:	f7ff ff38 	bl	8010f78 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110a:	683a      	ldr	r2, [r7, #0]
 801110c:	6939      	ldr	r1, [r7, #16]
 801110e:	68f8      	ldr	r0, [r7, #12]
 8011110:	f7ff ff72 	bl	8010ff8 <tcp_output_control_segment>
 8011114:	e000      	b.n	8011118 <tcp_rst+0x8c>
    return;
 8011116:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011118:	371c      	adds	r7, #28
 801111a:	46bd      	mov	sp, r7
 801111c:	bd90      	pop	{r4, r7, pc}
 801111e:	bf00      	nop
 8011120:	080180e8 	.word	0x080180e8
 8011124:	0801886c 	.word	0x0801886c
 8011128:	0801813c 	.word	0x0801813c
 801112c:	08018888 	.word	0x08018888

08011130 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011130:	b590      	push	{r4, r7, lr}
 8011132:	b087      	sub	sp, #28
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011138:	2300      	movs	r3, #0
 801113a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801113c:	2300      	movs	r3, #0
 801113e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d106      	bne.n	8011154 <tcp_send_empty_ack+0x24>
 8011146:	4b28      	ldr	r3, [pc, #160]	; (80111e8 <tcp_send_empty_ack+0xb8>)
 8011148:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801114c:	4927      	ldr	r1, [pc, #156]	; (80111ec <tcp_send_empty_ack+0xbc>)
 801114e:	4828      	ldr	r0, [pc, #160]	; (80111f0 <tcp_send_empty_ack+0xc0>)
 8011150:	f004 f966 	bl	8015420 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011154:	7dfb      	ldrb	r3, [r7, #23]
 8011156:	009b      	lsls	r3, r3, #2
 8011158:	b2db      	uxtb	r3, r3
 801115a:	f003 0304 	and.w	r3, r3, #4
 801115e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011160:	7d7b      	ldrb	r3, [r7, #21]
 8011162:	b29c      	uxth	r4, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011168:	4618      	mov	r0, r3
 801116a:	f7f9 f894 	bl	800a296 <lwip_htonl>
 801116e:	4603      	mov	r3, r0
 8011170:	2200      	movs	r2, #0
 8011172:	4621      	mov	r1, r4
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7ff fec1 	bl	8010efc <tcp_output_alloc_header>
 801117a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d109      	bne.n	8011196 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8b5b      	ldrh	r3, [r3, #26]
 8011186:	f043 0303 	orr.w	r3, r3, #3
 801118a:	b29a      	uxth	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011190:	f06f 0301 	mvn.w	r3, #1
 8011194:	e023      	b.n	80111de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011196:	7dbb      	ldrb	r3, [r7, #22]
 8011198:	7dfa      	ldrb	r2, [r7, #23]
 801119a:	6939      	ldr	r1, [r7, #16]
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7ff feeb 	bl	8010f78 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	3304      	adds	r3, #4
 80111a8:	6939      	ldr	r1, [r7, #16]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f7ff ff24 	bl	8010ff8 <tcp_output_control_segment>
 80111b0:	4603      	mov	r3, r0
 80111b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80111b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d007      	beq.n	80111cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	8b5b      	ldrh	r3, [r3, #26]
 80111c0:	f043 0303 	orr.w	r3, r3, #3
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	835a      	strh	r2, [r3, #26]
 80111ca:	e006      	b.n	80111da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	8b5b      	ldrh	r3, [r3, #26]
 80111d0:	f023 0303 	bic.w	r3, r3, #3
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80111da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80111de:	4618      	mov	r0, r3
 80111e0:	371c      	adds	r7, #28
 80111e2:	46bd      	mov	sp, r7
 80111e4:	bd90      	pop	{r4, r7, pc}
 80111e6:	bf00      	nop
 80111e8:	080180e8 	.word	0x080180e8
 80111ec:	080188a4 	.word	0x080188a4
 80111f0:	0801813c 	.word	0x0801813c

080111f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80111f4:	b590      	push	{r4, r7, lr}
 80111f6:	b087      	sub	sp, #28
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111fc:	2300      	movs	r3, #0
 80111fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d106      	bne.n	8011214 <tcp_keepalive+0x20>
 8011206:	4b18      	ldr	r3, [pc, #96]	; (8011268 <tcp_keepalive+0x74>)
 8011208:	f640 0224 	movw	r2, #2084	; 0x824
 801120c:	4917      	ldr	r1, [pc, #92]	; (801126c <tcp_keepalive+0x78>)
 801120e:	4818      	ldr	r0, [pc, #96]	; (8011270 <tcp_keepalive+0x7c>)
 8011210:	f004 f906 	bl	8015420 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011214:	7dfb      	ldrb	r3, [r7, #23]
 8011216:	b29c      	uxth	r4, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801121c:	3b01      	subs	r3, #1
 801121e:	4618      	mov	r0, r3
 8011220:	f7f9 f839 	bl	800a296 <lwip_htonl>
 8011224:	4603      	mov	r3, r0
 8011226:	2200      	movs	r2, #0
 8011228:	4621      	mov	r1, r4
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f7ff fe66 	bl	8010efc <tcp_output_alloc_header>
 8011230:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d102      	bne.n	801123e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011238:	f04f 33ff 	mov.w	r3, #4294967295
 801123c:	e010      	b.n	8011260 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801123e:	7dfb      	ldrb	r3, [r7, #23]
 8011240:	2200      	movs	r2, #0
 8011242:	6939      	ldr	r1, [r7, #16]
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f7ff fe97 	bl	8010f78 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801124a:	687a      	ldr	r2, [r7, #4]
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	3304      	adds	r3, #4
 8011250:	6939      	ldr	r1, [r7, #16]
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f7ff fed0 	bl	8010ff8 <tcp_output_control_segment>
 8011258:	4603      	mov	r3, r0
 801125a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011260:	4618      	mov	r0, r3
 8011262:	371c      	adds	r7, #28
 8011264:	46bd      	mov	sp, r7
 8011266:	bd90      	pop	{r4, r7, pc}
 8011268:	080180e8 	.word	0x080180e8
 801126c:	080188c4 	.word	0x080188c4
 8011270:	0801813c 	.word	0x0801813c

08011274 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011274:	b590      	push	{r4, r7, lr}
 8011276:	b08b      	sub	sp, #44	; 0x2c
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801127c:	2300      	movs	r3, #0
 801127e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d106      	bne.n	8011296 <tcp_zero_window_probe+0x22>
 8011288:	4b4c      	ldr	r3, [pc, #304]	; (80113bc <tcp_zero_window_probe+0x148>)
 801128a:	f640 024f 	movw	r2, #2127	; 0x84f
 801128e:	494c      	ldr	r1, [pc, #304]	; (80113c0 <tcp_zero_window_probe+0x14c>)
 8011290:	484c      	ldr	r0, [pc, #304]	; (80113c4 <tcp_zero_window_probe+0x150>)
 8011292:	f004 f8c5 	bl	8015420 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801129a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d101      	bne.n	80112a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80112a2:	2300      	movs	r3, #0
 80112a4:	e086      	b.n	80113b4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80112ac:	2bff      	cmp	r3, #255	; 0xff
 80112ae:	d007      	beq.n	80112c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80112b6:	3301      	adds	r3, #1
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80112c0:	6a3b      	ldr	r3, [r7, #32]
 80112c2:	68db      	ldr	r3, [r3, #12]
 80112c4:	899b      	ldrh	r3, [r3, #12]
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	4618      	mov	r0, r3
 80112ca:	f7f8 ffcf 	bl	800a26c <lwip_htons>
 80112ce:	4603      	mov	r3, r0
 80112d0:	b2db      	uxtb	r3, r3
 80112d2:	f003 0301 	and.w	r3, r3, #1
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d005      	beq.n	80112e6 <tcp_zero_window_probe+0x72>
 80112da:	6a3b      	ldr	r3, [r7, #32]
 80112dc:	891b      	ldrh	r3, [r3, #8]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d101      	bne.n	80112e6 <tcp_zero_window_probe+0x72>
 80112e2:	2301      	movs	r3, #1
 80112e4:	e000      	b.n	80112e8 <tcp_zero_window_probe+0x74>
 80112e6:	2300      	movs	r3, #0
 80112e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80112ea:	7ffb      	ldrb	r3, [r7, #31]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	bf0c      	ite	eq
 80112f0:	2301      	moveq	r3, #1
 80112f2:	2300      	movne	r3, #0
 80112f4:	b2db      	uxtb	r3, r3
 80112f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80112f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112fc:	b299      	uxth	r1, r3
 80112fe:	6a3b      	ldr	r3, [r7, #32]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	8bba      	ldrh	r2, [r7, #28]
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f7ff fdf8 	bl	8010efc <tcp_output_alloc_header>
 801130c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801130e:	69bb      	ldr	r3, [r7, #24]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d102      	bne.n	801131a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011314:	f04f 33ff 	mov.w	r3, #4294967295
 8011318:	e04c      	b.n	80113b4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801131a:	69bb      	ldr	r3, [r7, #24]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011320:	7ffb      	ldrb	r3, [r7, #31]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d011      	beq.n	801134a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	899b      	ldrh	r3, [r3, #12]
 801132a:	b29b      	uxth	r3, r3
 801132c:	b21b      	sxth	r3, r3
 801132e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011332:	b21c      	sxth	r4, r3
 8011334:	2011      	movs	r0, #17
 8011336:	f7f8 ff99 	bl	800a26c <lwip_htons>
 801133a:	4603      	mov	r3, r0
 801133c:	b21b      	sxth	r3, r3
 801133e:	4323      	orrs	r3, r4
 8011340:	b21b      	sxth	r3, r3
 8011342:	b29a      	uxth	r2, r3
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	819a      	strh	r2, [r3, #12]
 8011348:	e010      	b.n	801136c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801134a:	69bb      	ldr	r3, [r7, #24]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	3314      	adds	r3, #20
 8011350:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011352:	6a3b      	ldr	r3, [r7, #32]
 8011354:	6858      	ldr	r0, [r3, #4]
 8011356:	6a3b      	ldr	r3, [r7, #32]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	891a      	ldrh	r2, [r3, #8]
 801135c:	6a3b      	ldr	r3, [r7, #32]
 801135e:	891b      	ldrh	r3, [r3, #8]
 8011360:	1ad3      	subs	r3, r2, r3
 8011362:	b29b      	uxth	r3, r3
 8011364:	2201      	movs	r2, #1
 8011366:	6939      	ldr	r1, [r7, #16]
 8011368:	f7fa fd64 	bl	800be34 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801136c:	6a3b      	ldr	r3, [r7, #32]
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	4618      	mov	r0, r3
 8011374:	f7f8 ff8f 	bl	800a296 <lwip_htonl>
 8011378:	4603      	mov	r3, r0
 801137a:	3301      	adds	r3, #1
 801137c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	1ad3      	subs	r3, r2, r3
 8011386:	2b00      	cmp	r3, #0
 8011388:	da02      	bge.n	8011390 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	68fa      	ldr	r2, [r7, #12]
 801138e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011394:	2200      	movs	r2, #0
 8011396:	69b9      	ldr	r1, [r7, #24]
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f7ff fded 	bl	8010f78 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801139e:	687a      	ldr	r2, [r7, #4]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	3304      	adds	r3, #4
 80113a4:	69b9      	ldr	r1, [r7, #24]
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7ff fe26 	bl	8010ff8 <tcp_output_control_segment>
 80113ac:	4603      	mov	r3, r0
 80113ae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80113b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	372c      	adds	r7, #44	; 0x2c
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd90      	pop	{r4, r7, pc}
 80113bc:	080180e8 	.word	0x080180e8
 80113c0:	080188e0 	.word	0x080188e0
 80113c4:	0801813c 	.word	0x0801813c

080113c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80113d0:	f7fa ff0c 	bl	800c1ec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80113d4:	4b0a      	ldr	r3, [pc, #40]	; (8011400 <tcpip_tcp_timer+0x38>)
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d103      	bne.n	80113e4 <tcpip_tcp_timer+0x1c>
 80113dc:	4b09      	ldr	r3, [pc, #36]	; (8011404 <tcpip_tcp_timer+0x3c>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d005      	beq.n	80113f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80113e4:	2200      	movs	r2, #0
 80113e6:	4908      	ldr	r1, [pc, #32]	; (8011408 <tcpip_tcp_timer+0x40>)
 80113e8:	20fa      	movs	r0, #250	; 0xfa
 80113ea:	f000 f8f3 	bl	80115d4 <sys_timeout>
 80113ee:	e003      	b.n	80113f8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80113f0:	4b06      	ldr	r3, [pc, #24]	; (801140c <tcpip_tcp_timer+0x44>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	601a      	str	r2, [r3, #0]
  }
}
 80113f6:	bf00      	nop
 80113f8:	bf00      	nop
 80113fa:	3708      	adds	r7, #8
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}
 8011400:	20040ab0 	.word	0x20040ab0
 8011404:	20040ab4 	.word	0x20040ab4
 8011408:	080113c9 	.word	0x080113c9
 801140c:	20040afc 	.word	0x20040afc

08011410 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011414:	4b0a      	ldr	r3, [pc, #40]	; (8011440 <tcp_timer_needed+0x30>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d10f      	bne.n	801143c <tcp_timer_needed+0x2c>
 801141c:	4b09      	ldr	r3, [pc, #36]	; (8011444 <tcp_timer_needed+0x34>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d103      	bne.n	801142c <tcp_timer_needed+0x1c>
 8011424:	4b08      	ldr	r3, [pc, #32]	; (8011448 <tcp_timer_needed+0x38>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d007      	beq.n	801143c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801142c:	4b04      	ldr	r3, [pc, #16]	; (8011440 <tcp_timer_needed+0x30>)
 801142e:	2201      	movs	r2, #1
 8011430:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011432:	2200      	movs	r2, #0
 8011434:	4905      	ldr	r1, [pc, #20]	; (801144c <tcp_timer_needed+0x3c>)
 8011436:	20fa      	movs	r0, #250	; 0xfa
 8011438:	f000 f8cc 	bl	80115d4 <sys_timeout>
  }
}
 801143c:	bf00      	nop
 801143e:	bd80      	pop	{r7, pc}
 8011440:	20040afc 	.word	0x20040afc
 8011444:	20040ab0 	.word	0x20040ab0
 8011448:	20040ab4 	.word	0x20040ab4
 801144c:	080113c9 	.word	0x080113c9

08011450 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b086      	sub	sp, #24
 8011454:	af00      	add	r7, sp, #0
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801145c:	200a      	movs	r0, #10
 801145e:	f7f9 fbcb 	bl	800abf8 <memp_malloc>
 8011462:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d109      	bne.n	801147e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d151      	bne.n	8011514 <sys_timeout_abs+0xc4>
 8011470:	4b2a      	ldr	r3, [pc, #168]	; (801151c <sys_timeout_abs+0xcc>)
 8011472:	22be      	movs	r2, #190	; 0xbe
 8011474:	492a      	ldr	r1, [pc, #168]	; (8011520 <sys_timeout_abs+0xd0>)
 8011476:	482b      	ldr	r0, [pc, #172]	; (8011524 <sys_timeout_abs+0xd4>)
 8011478:	f003 ffd2 	bl	8015420 <iprintf>
    return;
 801147c:	e04a      	b.n	8011514 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	2200      	movs	r2, #0
 8011482:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	68ba      	ldr	r2, [r7, #8]
 8011488:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	68fa      	ldr	r2, [r7, #12]
 8011494:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011496:	4b24      	ldr	r3, [pc, #144]	; (8011528 <sys_timeout_abs+0xd8>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d103      	bne.n	80114a6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801149e:	4a22      	ldr	r2, [pc, #136]	; (8011528 <sys_timeout_abs+0xd8>)
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	6013      	str	r3, [r2, #0]
    return;
 80114a4:	e037      	b.n	8011516 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	685a      	ldr	r2, [r3, #4]
 80114aa:	4b1f      	ldr	r3, [pc, #124]	; (8011528 <sys_timeout_abs+0xd8>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	1ad3      	subs	r3, r2, r3
 80114b2:	0fdb      	lsrs	r3, r3, #31
 80114b4:	f003 0301 	and.w	r3, r3, #1
 80114b8:	b2db      	uxtb	r3, r3
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d007      	beq.n	80114ce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80114be:	4b1a      	ldr	r3, [pc, #104]	; (8011528 <sys_timeout_abs+0xd8>)
 80114c0:	681a      	ldr	r2, [r3, #0]
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80114c6:	4a18      	ldr	r2, [pc, #96]	; (8011528 <sys_timeout_abs+0xd8>)
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	6013      	str	r3, [r2, #0]
 80114cc:	e023      	b.n	8011516 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80114ce:	4b16      	ldr	r3, [pc, #88]	; (8011528 <sys_timeout_abs+0xd8>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	617b      	str	r3, [r7, #20]
 80114d4:	e01a      	b.n	801150c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d00b      	beq.n	80114f6 <sys_timeout_abs+0xa6>
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	685b      	ldr	r3, [r3, #4]
 80114e8:	1ad3      	subs	r3, r2, r3
 80114ea:	0fdb      	lsrs	r3, r3, #31
 80114ec:	f003 0301 	and.w	r3, r3, #1
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d007      	beq.n	8011506 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80114fe:	697b      	ldr	r3, [r7, #20]
 8011500:	693a      	ldr	r2, [r7, #16]
 8011502:	601a      	str	r2, [r3, #0]
        break;
 8011504:	e007      	b.n	8011516 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	617b      	str	r3, [r7, #20]
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d1e1      	bne.n	80114d6 <sys_timeout_abs+0x86>
 8011512:	e000      	b.n	8011516 <sys_timeout_abs+0xc6>
    return;
 8011514:	bf00      	nop
      }
    }
  }
}
 8011516:	3718      	adds	r7, #24
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}
 801151c:	08018904 	.word	0x08018904
 8011520:	08018938 	.word	0x08018938
 8011524:	08018978 	.word	0x08018978
 8011528:	20040af4 	.word	0x20040af4

0801152c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	4798      	blx	r3

  now = sys_now();
 801153e:	f7f4 fd59 	bl	8005ff4 <sys_now>
 8011542:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	4b0f      	ldr	r3, [pc, #60]	; (8011588 <lwip_cyclic_timer+0x5c>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	4413      	add	r3, r2
 801154e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011550:	68fa      	ldr	r2, [r7, #12]
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	1ad3      	subs	r3, r2, r3
 8011556:	0fdb      	lsrs	r3, r3, #31
 8011558:	f003 0301 	and.w	r3, r3, #1
 801155c:	b2db      	uxtb	r3, r3
 801155e:	2b00      	cmp	r3, #0
 8011560:	d009      	beq.n	8011576 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	4413      	add	r3, r2
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	4907      	ldr	r1, [pc, #28]	; (801158c <lwip_cyclic_timer+0x60>)
 801156e:	4618      	mov	r0, r3
 8011570:	f7ff ff6e 	bl	8011450 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011574:	e004      	b.n	8011580 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	4904      	ldr	r1, [pc, #16]	; (801158c <lwip_cyclic_timer+0x60>)
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	f7ff ff68 	bl	8011450 <sys_timeout_abs>
}
 8011580:	bf00      	nop
 8011582:	3718      	adds	r7, #24
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	20040af8 	.word	0x20040af8
 801158c:	0801152d 	.word	0x0801152d

08011590 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011596:	2301      	movs	r3, #1
 8011598:	607b      	str	r3, [r7, #4]
 801159a:	e00e      	b.n	80115ba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801159c:	4a0b      	ldr	r2, [pc, #44]	; (80115cc <sys_timeouts_init+0x3c>)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	00db      	lsls	r3, r3, #3
 80115a8:	4a08      	ldr	r2, [pc, #32]	; (80115cc <sys_timeouts_init+0x3c>)
 80115aa:	4413      	add	r3, r2
 80115ac:	461a      	mov	r2, r3
 80115ae:	4908      	ldr	r1, [pc, #32]	; (80115d0 <sys_timeouts_init+0x40>)
 80115b0:	f000 f810 	bl	80115d4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	3301      	adds	r3, #1
 80115b8:	607b      	str	r3, [r7, #4]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2b02      	cmp	r3, #2
 80115be:	d9ed      	bls.n	801159c <sys_timeouts_init+0xc>
  }
}
 80115c0:	bf00      	nop
 80115c2:	bf00      	nop
 80115c4:	3708      	adds	r7, #8
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	0801966c 	.word	0x0801966c
 80115d0:	0801152d 	.word	0x0801152d

080115d4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b086      	sub	sp, #24
 80115d8:	af00      	add	r7, sp, #0
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115e6:	d306      	bcc.n	80115f6 <sys_timeout+0x22>
 80115e8:	4b0a      	ldr	r3, [pc, #40]	; (8011614 <sys_timeout+0x40>)
 80115ea:	f240 1229 	movw	r2, #297	; 0x129
 80115ee:	490a      	ldr	r1, [pc, #40]	; (8011618 <sys_timeout+0x44>)
 80115f0:	480a      	ldr	r0, [pc, #40]	; (801161c <sys_timeout+0x48>)
 80115f2:	f003 ff15 	bl	8015420 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80115f6:	f7f4 fcfd 	bl	8005ff4 <sys_now>
 80115fa:	4602      	mov	r2, r0
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	4413      	add	r3, r2
 8011600:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	68b9      	ldr	r1, [r7, #8]
 8011606:	6978      	ldr	r0, [r7, #20]
 8011608:	f7ff ff22 	bl	8011450 <sys_timeout_abs>
#endif
}
 801160c:	bf00      	nop
 801160e:	3718      	adds	r7, #24
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}
 8011614:	08018904 	.word	0x08018904
 8011618:	080189a0 	.word	0x080189a0
 801161c:	08018978 	.word	0x08018978

08011620 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b084      	sub	sp, #16
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801162a:	4b19      	ldr	r3, [pc, #100]	; (8011690 <sys_untimeout+0x70>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d029      	beq.n	8011686 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011632:	4b17      	ldr	r3, [pc, #92]	; (8011690 <sys_untimeout+0x70>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	60bb      	str	r3, [r7, #8]
 8011638:	2300      	movs	r3, #0
 801163a:	60fb      	str	r3, [r7, #12]
 801163c:	e01f      	b.n	801167e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801163e:	68bb      	ldr	r3, [r7, #8]
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	429a      	cmp	r2, r3
 8011646:	d115      	bne.n	8011674 <sys_untimeout+0x54>
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	683a      	ldr	r2, [r7, #0]
 801164e:	429a      	cmp	r2, r3
 8011650:	d110      	bne.n	8011674 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d104      	bne.n	8011662 <sys_untimeout+0x42>
        next_timeout = t->next;
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	4a0c      	ldr	r2, [pc, #48]	; (8011690 <sys_untimeout+0x70>)
 801165e:	6013      	str	r3, [r2, #0]
 8011660:	e003      	b.n	801166a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	681a      	ldr	r2, [r3, #0]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801166a:	68b9      	ldr	r1, [r7, #8]
 801166c:	200a      	movs	r0, #10
 801166e:	f7f9 fb39 	bl	800ace4 <memp_free>
      return;
 8011672:	e009      	b.n	8011688 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	60fb      	str	r3, [r7, #12]
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	60bb      	str	r3, [r7, #8]
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d1dc      	bne.n	801163e <sys_untimeout+0x1e>
    }
  }
  return;
 8011684:	e000      	b.n	8011688 <sys_untimeout+0x68>
    return;
 8011686:	bf00      	nop
}
 8011688:	3710      	adds	r7, #16
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	20040af4 	.word	0x20040af4

08011694 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801169a:	f7f4 fcab 	bl	8005ff4 <sys_now>
 801169e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80116a0:	4b17      	ldr	r3, [pc, #92]	; (8011700 <sys_check_timeouts+0x6c>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d022      	beq.n	80116f2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	685b      	ldr	r3, [r3, #4]
 80116b0:	68fa      	ldr	r2, [r7, #12]
 80116b2:	1ad3      	subs	r3, r2, r3
 80116b4:	0fdb      	lsrs	r3, r3, #31
 80116b6:	f003 0301 	and.w	r3, r3, #1
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d11a      	bne.n	80116f6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4a0e      	ldr	r2, [pc, #56]	; (8011700 <sys_check_timeouts+0x6c>)
 80116c6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	689b      	ldr	r3, [r3, #8]
 80116cc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	68db      	ldr	r3, [r3, #12]
 80116d2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	4a0a      	ldr	r2, [pc, #40]	; (8011704 <sys_check_timeouts+0x70>)
 80116da:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80116dc:	68b9      	ldr	r1, [r7, #8]
 80116de:	200a      	movs	r0, #10
 80116e0:	f7f9 fb00 	bl	800ace4 <memp_free>
    if (handler != NULL) {
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d0da      	beq.n	80116a0 <sys_check_timeouts+0xc>
      handler(arg);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6838      	ldr	r0, [r7, #0]
 80116ee:	4798      	blx	r3
  do {
 80116f0:	e7d6      	b.n	80116a0 <sys_check_timeouts+0xc>
      return;
 80116f2:	bf00      	nop
 80116f4:	e000      	b.n	80116f8 <sys_check_timeouts+0x64>
      return;
 80116f6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	20040af4 	.word	0x20040af4
 8011704:	20040af8 	.word	0x20040af8

08011708 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801170e:	4b16      	ldr	r3, [pc, #88]	; (8011768 <sys_timeouts_sleeptime+0x60>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d102      	bne.n	801171c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011716:	f04f 33ff 	mov.w	r3, #4294967295
 801171a:	e020      	b.n	801175e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801171c:	f7f4 fc6a 	bl	8005ff4 <sys_now>
 8011720:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011722:	4b11      	ldr	r3, [pc, #68]	; (8011768 <sys_timeouts_sleeptime+0x60>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	685a      	ldr	r2, [r3, #4]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	1ad3      	subs	r3, r2, r3
 801172c:	0fdb      	lsrs	r3, r3, #31
 801172e:	f003 0301 	and.w	r3, r3, #1
 8011732:	b2db      	uxtb	r3, r3
 8011734:	2b00      	cmp	r3, #0
 8011736:	d001      	beq.n	801173c <sys_timeouts_sleeptime+0x34>
    return 0;
 8011738:	2300      	movs	r3, #0
 801173a:	e010      	b.n	801175e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801173c:	4b0a      	ldr	r3, [pc, #40]	; (8011768 <sys_timeouts_sleeptime+0x60>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	685a      	ldr	r2, [r3, #4]
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	1ad3      	subs	r3, r2, r3
 8011746:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	2b00      	cmp	r3, #0
 801174c:	da06      	bge.n	801175c <sys_timeouts_sleeptime+0x54>
 801174e:	4b07      	ldr	r3, [pc, #28]	; (801176c <sys_timeouts_sleeptime+0x64>)
 8011750:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011754:	4906      	ldr	r1, [pc, #24]	; (8011770 <sys_timeouts_sleeptime+0x68>)
 8011756:	4807      	ldr	r0, [pc, #28]	; (8011774 <sys_timeouts_sleeptime+0x6c>)
 8011758:	f003 fe62 	bl	8015420 <iprintf>
    return ret;
 801175c:	683b      	ldr	r3, [r7, #0]
  }
}
 801175e:	4618      	mov	r0, r3
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	20040af4 	.word	0x20040af4
 801176c:	08018904 	.word	0x08018904
 8011770:	080189d8 	.word	0x080189d8
 8011774:	08018978 	.word	0x08018978

08011778 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801177c:	f003 fede 	bl	801553c <rand>
 8011780:	4603      	mov	r3, r0
 8011782:	b29b      	uxth	r3, r3
 8011784:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011788:	b29b      	uxth	r3, r3
 801178a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801178e:	b29a      	uxth	r2, r3
 8011790:	4b01      	ldr	r3, [pc, #4]	; (8011798 <udp_init+0x20>)
 8011792:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011794:	bf00      	nop
 8011796:	bd80      	pop	{r7, pc}
 8011798:	2000002c 	.word	0x2000002c

0801179c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801179c:	b480      	push	{r7}
 801179e:	b083      	sub	sp, #12
 80117a0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80117a6:	4b17      	ldr	r3, [pc, #92]	; (8011804 <udp_new_port+0x68>)
 80117a8:	881b      	ldrh	r3, [r3, #0]
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	b291      	uxth	r1, r2
 80117ae:	4a15      	ldr	r2, [pc, #84]	; (8011804 <udp_new_port+0x68>)
 80117b0:	8011      	strh	r1, [r2, #0]
 80117b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d103      	bne.n	80117c2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80117ba:	4b12      	ldr	r3, [pc, #72]	; (8011804 <udp_new_port+0x68>)
 80117bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80117c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117c2:	4b11      	ldr	r3, [pc, #68]	; (8011808 <udp_new_port+0x6c>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	603b      	str	r3, [r7, #0]
 80117c8:	e011      	b.n	80117ee <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	8a5a      	ldrh	r2, [r3, #18]
 80117ce:	4b0d      	ldr	r3, [pc, #52]	; (8011804 <udp_new_port+0x68>)
 80117d0:	881b      	ldrh	r3, [r3, #0]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d108      	bne.n	80117e8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80117d6:	88fb      	ldrh	r3, [r7, #6]
 80117d8:	3301      	adds	r3, #1
 80117da:	80fb      	strh	r3, [r7, #6]
 80117dc:	88fb      	ldrh	r3, [r7, #6]
 80117de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80117e2:	d3e0      	bcc.n	80117a6 <udp_new_port+0xa>
        return 0;
 80117e4:	2300      	movs	r3, #0
 80117e6:	e007      	b.n	80117f8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	603b      	str	r3, [r7, #0]
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d1ea      	bne.n	80117ca <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80117f4:	4b03      	ldr	r3, [pc, #12]	; (8011804 <udp_new_port+0x68>)
 80117f6:	881b      	ldrh	r3, [r3, #0]
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	370c      	adds	r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr
 8011804:	2000002c 	.word	0x2000002c
 8011808:	20040b00 	.word	0x20040b00

0801180c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	4613      	mov	r3, r2
 8011818:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d105      	bne.n	801182c <udp_input_local_match+0x20>
 8011820:	4b27      	ldr	r3, [pc, #156]	; (80118c0 <udp_input_local_match+0xb4>)
 8011822:	2287      	movs	r2, #135	; 0x87
 8011824:	4927      	ldr	r1, [pc, #156]	; (80118c4 <udp_input_local_match+0xb8>)
 8011826:	4828      	ldr	r0, [pc, #160]	; (80118c8 <udp_input_local_match+0xbc>)
 8011828:	f003 fdfa 	bl	8015420 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d105      	bne.n	801183e <udp_input_local_match+0x32>
 8011832:	4b23      	ldr	r3, [pc, #140]	; (80118c0 <udp_input_local_match+0xb4>)
 8011834:	2288      	movs	r2, #136	; 0x88
 8011836:	4925      	ldr	r1, [pc, #148]	; (80118cc <udp_input_local_match+0xc0>)
 8011838:	4823      	ldr	r0, [pc, #140]	; (80118c8 <udp_input_local_match+0xbc>)
 801183a:	f003 fdf1 	bl	8015420 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	7a1b      	ldrb	r3, [r3, #8]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d00b      	beq.n	801185e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	7a1a      	ldrb	r2, [r3, #8]
 801184a:	4b21      	ldr	r3, [pc, #132]	; (80118d0 <udp_input_local_match+0xc4>)
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011852:	3301      	adds	r3, #1
 8011854:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011856:	429a      	cmp	r2, r3
 8011858:	d001      	beq.n	801185e <udp_input_local_match+0x52>
    return 0;
 801185a:	2300      	movs	r3, #0
 801185c:	e02b      	b.n	80118b6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801185e:	79fb      	ldrb	r3, [r7, #7]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d018      	beq.n	8011896 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d013      	beq.n	8011892 <udp_input_local_match+0x86>
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d00f      	beq.n	8011892 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011872:	4b17      	ldr	r3, [pc, #92]	; (80118d0 <udp_input_local_match+0xc4>)
 8011874:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801187a:	d00a      	beq.n	8011892 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	4b13      	ldr	r3, [pc, #76]	; (80118d0 <udp_input_local_match+0xc4>)
 8011882:	695b      	ldr	r3, [r3, #20]
 8011884:	405a      	eors	r2, r3
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	3308      	adds	r3, #8
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801188e:	2b00      	cmp	r3, #0
 8011890:	d110      	bne.n	80118b4 <udp_input_local_match+0xa8>
          return 1;
 8011892:	2301      	movs	r3, #1
 8011894:	e00f      	b.n	80118b6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d009      	beq.n	80118b0 <udp_input_local_match+0xa4>
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d005      	beq.n	80118b0 <udp_input_local_match+0xa4>
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	4b09      	ldr	r3, [pc, #36]	; (80118d0 <udp_input_local_match+0xc4>)
 80118aa:	695b      	ldr	r3, [r3, #20]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d101      	bne.n	80118b4 <udp_input_local_match+0xa8>
        return 1;
 80118b0:	2301      	movs	r3, #1
 80118b2:	e000      	b.n	80118b6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80118b4:	2300      	movs	r3, #0
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	080189ec 	.word	0x080189ec
 80118c4:	08018a1c 	.word	0x08018a1c
 80118c8:	08018a40 	.word	0x08018a40
 80118cc:	08018a68 	.word	0x08018a68
 80118d0:	200252e8 	.word	0x200252e8

080118d4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80118d4:	b590      	push	{r4, r7, lr}
 80118d6:	b08d      	sub	sp, #52	; 0x34
 80118d8:	af02      	add	r7, sp, #8
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80118de:	2300      	movs	r3, #0
 80118e0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d105      	bne.n	80118f4 <udp_input+0x20>
 80118e8:	4b7c      	ldr	r3, [pc, #496]	; (8011adc <udp_input+0x208>)
 80118ea:	22cf      	movs	r2, #207	; 0xcf
 80118ec:	497c      	ldr	r1, [pc, #496]	; (8011ae0 <udp_input+0x20c>)
 80118ee:	487d      	ldr	r0, [pc, #500]	; (8011ae4 <udp_input+0x210>)
 80118f0:	f003 fd96 	bl	8015420 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d105      	bne.n	8011906 <udp_input+0x32>
 80118fa:	4b78      	ldr	r3, [pc, #480]	; (8011adc <udp_input+0x208>)
 80118fc:	22d0      	movs	r2, #208	; 0xd0
 80118fe:	497a      	ldr	r1, [pc, #488]	; (8011ae8 <udp_input+0x214>)
 8011900:	4878      	ldr	r0, [pc, #480]	; (8011ae4 <udp_input+0x210>)
 8011902:	f003 fd8d 	bl	8015420 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	895b      	ldrh	r3, [r3, #10]
 801190a:	2b07      	cmp	r3, #7
 801190c:	d803      	bhi.n	8011916 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f7fa f88a 	bl	800ba28 <pbuf_free>
    goto end;
 8011914:	e0de      	b.n	8011ad4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801191c:	4b73      	ldr	r3, [pc, #460]	; (8011aec <udp_input+0x218>)
 801191e:	695b      	ldr	r3, [r3, #20]
 8011920:	4a72      	ldr	r2, [pc, #456]	; (8011aec <udp_input+0x218>)
 8011922:	6812      	ldr	r2, [r2, #0]
 8011924:	4611      	mov	r1, r2
 8011926:	4618      	mov	r0, r3
 8011928:	f001 ff4c 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 801192c:	4603      	mov	r3, r0
 801192e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	b29b      	uxth	r3, r3
 8011936:	4618      	mov	r0, r3
 8011938:	f7f8 fc98 	bl	800a26c <lwip_htons>
 801193c:	4603      	mov	r3, r0
 801193e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	885b      	ldrh	r3, [r3, #2]
 8011944:	b29b      	uxth	r3, r3
 8011946:	4618      	mov	r0, r3
 8011948:	f7f8 fc90 	bl	800a26c <lwip_htons>
 801194c:	4603      	mov	r3, r0
 801194e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011950:	2300      	movs	r3, #0
 8011952:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011954:	2300      	movs	r3, #0
 8011956:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011958:	2300      	movs	r3, #0
 801195a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801195c:	4b64      	ldr	r3, [pc, #400]	; (8011af0 <udp_input+0x21c>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	627b      	str	r3, [r7, #36]	; 0x24
 8011962:	e054      	b.n	8011a0e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011966:	8a5b      	ldrh	r3, [r3, #18]
 8011968:	89fa      	ldrh	r2, [r7, #14]
 801196a:	429a      	cmp	r2, r3
 801196c:	d14a      	bne.n	8011a04 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801196e:	7cfb      	ldrb	r3, [r7, #19]
 8011970:	461a      	mov	r2, r3
 8011972:	6839      	ldr	r1, [r7, #0]
 8011974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011976:	f7ff ff49 	bl	801180c <udp_input_local_match>
 801197a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801197c:	2b00      	cmp	r3, #0
 801197e:	d041      	beq.n	8011a04 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	7c1b      	ldrb	r3, [r3, #16]
 8011984:	f003 0304 	and.w	r3, r3, #4
 8011988:	2b00      	cmp	r3, #0
 801198a:	d11d      	bne.n	80119c8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801198c:	69fb      	ldr	r3, [r7, #28]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d102      	bne.n	8011998 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011994:	61fb      	str	r3, [r7, #28]
 8011996:	e017      	b.n	80119c8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011998:	7cfb      	ldrb	r3, [r7, #19]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d014      	beq.n	80119c8 <udp_input+0xf4>
 801199e:	4b53      	ldr	r3, [pc, #332]	; (8011aec <udp_input+0x218>)
 80119a0:	695b      	ldr	r3, [r3, #20]
 80119a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119a6:	d10f      	bne.n	80119c8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	3304      	adds	r3, #4
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d008      	beq.n	80119c8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80119b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	3304      	adds	r3, #4
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d101      	bne.n	80119c8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80119c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80119c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ca:	8a9b      	ldrh	r3, [r3, #20]
 80119cc:	8a3a      	ldrh	r2, [r7, #16]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	d118      	bne.n	8011a04 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80119d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d005      	beq.n	80119e6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80119da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119dc:	685a      	ldr	r2, [r3, #4]
 80119de:	4b43      	ldr	r3, [pc, #268]	; (8011aec <udp_input+0x218>)
 80119e0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d10e      	bne.n	8011a04 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80119e6:	6a3b      	ldr	r3, [r7, #32]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d014      	beq.n	8011a16 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80119ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ee:	68da      	ldr	r2, [r3, #12]
 80119f0:	6a3b      	ldr	r3, [r7, #32]
 80119f2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80119f4:	4b3e      	ldr	r3, [pc, #248]	; (8011af0 <udp_input+0x21c>)
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fa:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80119fc:	4a3c      	ldr	r2, [pc, #240]	; (8011af0 <udp_input+0x21c>)
 80119fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a00:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011a02:	e008      	b.n	8011a16 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8011a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d1a7      	bne.n	8011964 <udp_input+0x90>
 8011a14:	e000      	b.n	8011a18 <udp_input+0x144>
        break;
 8011a16:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d101      	bne.n	8011a22 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <udp_input+0x15a>
    for_us = 1;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	76fb      	strb	r3, [r7, #27]
 8011a2c:	e00a      	b.n	8011a44 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	3304      	adds	r3, #4
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	4b2d      	ldr	r3, [pc, #180]	; (8011aec <udp_input+0x218>)
 8011a36:	695b      	ldr	r3, [r3, #20]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	bf0c      	ite	eq
 8011a3c:	2301      	moveq	r3, #1
 8011a3e:	2300      	movne	r3, #0
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011a44:	7efb      	ldrb	r3, [r7, #27]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d041      	beq.n	8011ace <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011a4a:	2108      	movs	r1, #8
 8011a4c:	6878      	ldr	r0, [r7, #4]
 8011a4e:	f7f9 ff65 	bl	800b91c <pbuf_remove_header>
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00a      	beq.n	8011a6e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011a58:	4b20      	ldr	r3, [pc, #128]	; (8011adc <udp_input+0x208>)
 8011a5a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011a5e:	4925      	ldr	r1, [pc, #148]	; (8011af4 <udp_input+0x220>)
 8011a60:	4820      	ldr	r0, [pc, #128]	; (8011ae4 <udp_input+0x210>)
 8011a62:	f003 fcdd 	bl	8015420 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f7f9 ffde 	bl	800ba28 <pbuf_free>
      goto end;
 8011a6c:	e032      	b.n	8011ad4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d012      	beq.n	8011a9a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a76:	699b      	ldr	r3, [r3, #24]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d00a      	beq.n	8011a92 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	699c      	ldr	r4, [r3, #24]
 8011a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a82:	69d8      	ldr	r0, [r3, #28]
 8011a84:	8a3b      	ldrh	r3, [r7, #16]
 8011a86:	9300      	str	r3, [sp, #0]
 8011a88:	4b1b      	ldr	r3, [pc, #108]	; (8011af8 <udp_input+0x224>)
 8011a8a:	687a      	ldr	r2, [r7, #4]
 8011a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a8e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011a90:	e021      	b.n	8011ad6 <udp_input+0x202>
        pbuf_free(p);
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f7f9 ffc8 	bl	800ba28 <pbuf_free>
        goto end;
 8011a98:	e01c      	b.n	8011ad4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011a9a:	7cfb      	ldrb	r3, [r7, #19]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d112      	bne.n	8011ac6 <udp_input+0x1f2>
 8011aa0:	4b12      	ldr	r3, [pc, #72]	; (8011aec <udp_input+0x218>)
 8011aa2:	695b      	ldr	r3, [r3, #20]
 8011aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011aa8:	2be0      	cmp	r3, #224	; 0xe0
 8011aaa:	d00c      	beq.n	8011ac6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011aac:	4b0f      	ldr	r3, [pc, #60]	; (8011aec <udp_input+0x218>)
 8011aae:	899b      	ldrh	r3, [r3, #12]
 8011ab0:	3308      	adds	r3, #8
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	b21b      	sxth	r3, r3
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f7f9 ffa2 	bl	800ba02 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011abe:	2103      	movs	r1, #3
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f001 fb5f 	bl	8013184 <icmp_dest_unreach>
      pbuf_free(p);
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f7f9 ffae 	bl	800ba28 <pbuf_free>
  return;
 8011acc:	e003      	b.n	8011ad6 <udp_input+0x202>
    pbuf_free(p);
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f7f9 ffaa 	bl	800ba28 <pbuf_free>
  return;
 8011ad4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011ad6:	372c      	adds	r7, #44	; 0x2c
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd90      	pop	{r4, r7, pc}
 8011adc:	080189ec 	.word	0x080189ec
 8011ae0:	08018a90 	.word	0x08018a90
 8011ae4:	08018a40 	.word	0x08018a40
 8011ae8:	08018aa8 	.word	0x08018aa8
 8011aec:	200252e8 	.word	0x200252e8
 8011af0:	20040b00 	.word	0x20040b00
 8011af4:	08018ac4 	.word	0x08018ac4
 8011af8:	200252f8 	.word	0x200252f8

08011afc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	b088      	sub	sp, #32
 8011b00:	af02      	add	r7, sp, #8
 8011b02:	60f8      	str	r0, [r7, #12]
 8011b04:	60b9      	str	r1, [r7, #8]
 8011b06:	607a      	str	r2, [r7, #4]
 8011b08:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d109      	bne.n	8011b24 <udp_sendto+0x28>
 8011b10:	4b23      	ldr	r3, [pc, #140]	; (8011ba0 <udp_sendto+0xa4>)
 8011b12:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011b16:	4923      	ldr	r1, [pc, #140]	; (8011ba4 <udp_sendto+0xa8>)
 8011b18:	4823      	ldr	r0, [pc, #140]	; (8011ba8 <udp_sendto+0xac>)
 8011b1a:	f003 fc81 	bl	8015420 <iprintf>
 8011b1e:	f06f 030f 	mvn.w	r3, #15
 8011b22:	e038      	b.n	8011b96 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d109      	bne.n	8011b3e <udp_sendto+0x42>
 8011b2a:	4b1d      	ldr	r3, [pc, #116]	; (8011ba0 <udp_sendto+0xa4>)
 8011b2c:	f240 2219 	movw	r2, #537	; 0x219
 8011b30:	491e      	ldr	r1, [pc, #120]	; (8011bac <udp_sendto+0xb0>)
 8011b32:	481d      	ldr	r0, [pc, #116]	; (8011ba8 <udp_sendto+0xac>)
 8011b34:	f003 fc74 	bl	8015420 <iprintf>
 8011b38:	f06f 030f 	mvn.w	r3, #15
 8011b3c:	e02b      	b.n	8011b96 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d109      	bne.n	8011b58 <udp_sendto+0x5c>
 8011b44:	4b16      	ldr	r3, [pc, #88]	; (8011ba0 <udp_sendto+0xa4>)
 8011b46:	f240 221a 	movw	r2, #538	; 0x21a
 8011b4a:	4919      	ldr	r1, [pc, #100]	; (8011bb0 <udp_sendto+0xb4>)
 8011b4c:	4816      	ldr	r0, [pc, #88]	; (8011ba8 <udp_sendto+0xac>)
 8011b4e:	f003 fc67 	bl	8015420 <iprintf>
 8011b52:	f06f 030f 	mvn.w	r3, #15
 8011b56:	e01e      	b.n	8011b96 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	7a1b      	ldrb	r3, [r3, #8]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d006      	beq.n	8011b6e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	7a1b      	ldrb	r3, [r3, #8]
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7f9 fbd3 	bl	800b310 <netif_get_by_index>
 8011b6a:	6178      	str	r0, [r7, #20]
 8011b6c:	e003      	b.n	8011b76 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f001 fb92 	bl	8013298 <ip4_route>
 8011b74:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011b76:	697b      	ldr	r3, [r7, #20]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d102      	bne.n	8011b82 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011b7c:	f06f 0303 	mvn.w	r3, #3
 8011b80:	e009      	b.n	8011b96 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011b82:	887a      	ldrh	r2, [r7, #2]
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	9300      	str	r3, [sp, #0]
 8011b88:	4613      	mov	r3, r2
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	68b9      	ldr	r1, [r7, #8]
 8011b8e:	68f8      	ldr	r0, [r7, #12]
 8011b90:	f000 f810 	bl	8011bb4 <udp_sendto_if>
 8011b94:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3718      	adds	r7, #24
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	080189ec 	.word	0x080189ec
 8011ba4:	08018b10 	.word	0x08018b10
 8011ba8:	08018a40 	.word	0x08018a40
 8011bac:	08018b28 	.word	0x08018b28
 8011bb0:	08018b44 	.word	0x08018b44

08011bb4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b088      	sub	sp, #32
 8011bb8:	af02      	add	r7, sp, #8
 8011bba:	60f8      	str	r0, [r7, #12]
 8011bbc:	60b9      	str	r1, [r7, #8]
 8011bbe:	607a      	str	r2, [r7, #4]
 8011bc0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d109      	bne.n	8011bdc <udp_sendto_if+0x28>
 8011bc8:	4b2e      	ldr	r3, [pc, #184]	; (8011c84 <udp_sendto_if+0xd0>)
 8011bca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bce:	492e      	ldr	r1, [pc, #184]	; (8011c88 <udp_sendto_if+0xd4>)
 8011bd0:	482e      	ldr	r0, [pc, #184]	; (8011c8c <udp_sendto_if+0xd8>)
 8011bd2:	f003 fc25 	bl	8015420 <iprintf>
 8011bd6:	f06f 030f 	mvn.w	r3, #15
 8011bda:	e04f      	b.n	8011c7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d109      	bne.n	8011bf6 <udp_sendto_if+0x42>
 8011be2:	4b28      	ldr	r3, [pc, #160]	; (8011c84 <udp_sendto_if+0xd0>)
 8011be4:	f240 2281 	movw	r2, #641	; 0x281
 8011be8:	4929      	ldr	r1, [pc, #164]	; (8011c90 <udp_sendto_if+0xdc>)
 8011bea:	4828      	ldr	r0, [pc, #160]	; (8011c8c <udp_sendto_if+0xd8>)
 8011bec:	f003 fc18 	bl	8015420 <iprintf>
 8011bf0:	f06f 030f 	mvn.w	r3, #15
 8011bf4:	e042      	b.n	8011c7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d109      	bne.n	8011c10 <udp_sendto_if+0x5c>
 8011bfc:	4b21      	ldr	r3, [pc, #132]	; (8011c84 <udp_sendto_if+0xd0>)
 8011bfe:	f240 2282 	movw	r2, #642	; 0x282
 8011c02:	4924      	ldr	r1, [pc, #144]	; (8011c94 <udp_sendto_if+0xe0>)
 8011c04:	4821      	ldr	r0, [pc, #132]	; (8011c8c <udp_sendto_if+0xd8>)
 8011c06:	f003 fc0b 	bl	8015420 <iprintf>
 8011c0a:	f06f 030f 	mvn.w	r3, #15
 8011c0e:	e035      	b.n	8011c7c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011c10:	6a3b      	ldr	r3, [r7, #32]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d109      	bne.n	8011c2a <udp_sendto_if+0x76>
 8011c16:	4b1b      	ldr	r3, [pc, #108]	; (8011c84 <udp_sendto_if+0xd0>)
 8011c18:	f240 2283 	movw	r2, #643	; 0x283
 8011c1c:	491e      	ldr	r1, [pc, #120]	; (8011c98 <udp_sendto_if+0xe4>)
 8011c1e:	481b      	ldr	r0, [pc, #108]	; (8011c8c <udp_sendto_if+0xd8>)
 8011c20:	f003 fbfe 	bl	8015420 <iprintf>
 8011c24:	f06f 030f 	mvn.w	r3, #15
 8011c28:	e028      	b.n	8011c7c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d009      	beq.n	8011c44 <udp_sendto_if+0x90>
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d005      	beq.n	8011c44 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c40:	2be0      	cmp	r3, #224	; 0xe0
 8011c42:	d103      	bne.n	8011c4c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011c44:	6a3b      	ldr	r3, [r7, #32]
 8011c46:	3304      	adds	r3, #4
 8011c48:	617b      	str	r3, [r7, #20]
 8011c4a:	e00b      	b.n	8011c64 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	681a      	ldr	r2, [r3, #0]
 8011c50:	6a3b      	ldr	r3, [r7, #32]
 8011c52:	3304      	adds	r3, #4
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d002      	beq.n	8011c60 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011c5a:	f06f 0303 	mvn.w	r3, #3
 8011c5e:	e00d      	b.n	8011c7c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011c64:	887a      	ldrh	r2, [r7, #2]
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	9301      	str	r3, [sp, #4]
 8011c6a:	6a3b      	ldr	r3, [r7, #32]
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	4613      	mov	r3, r2
 8011c70:	687a      	ldr	r2, [r7, #4]
 8011c72:	68b9      	ldr	r1, [r7, #8]
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f000 f811 	bl	8011c9c <udp_sendto_if_src>
 8011c7a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3718      	adds	r7, #24
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}
 8011c84:	080189ec 	.word	0x080189ec
 8011c88:	08018b60 	.word	0x08018b60
 8011c8c:	08018a40 	.word	0x08018a40
 8011c90:	08018b7c 	.word	0x08018b7c
 8011c94:	08018b98 	.word	0x08018b98
 8011c98:	08018bb8 	.word	0x08018bb8

08011c9c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b08c      	sub	sp, #48	; 0x30
 8011ca0:	af04      	add	r7, sp, #16
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	607a      	str	r2, [r7, #4]
 8011ca8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d109      	bne.n	8011cc4 <udp_sendto_if_src+0x28>
 8011cb0:	4b65      	ldr	r3, [pc, #404]	; (8011e48 <udp_sendto_if_src+0x1ac>)
 8011cb2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011cb6:	4965      	ldr	r1, [pc, #404]	; (8011e4c <udp_sendto_if_src+0x1b0>)
 8011cb8:	4865      	ldr	r0, [pc, #404]	; (8011e50 <udp_sendto_if_src+0x1b4>)
 8011cba:	f003 fbb1 	bl	8015420 <iprintf>
 8011cbe:	f06f 030f 	mvn.w	r3, #15
 8011cc2:	e0bc      	b.n	8011e3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d109      	bne.n	8011cde <udp_sendto_if_src+0x42>
 8011cca:	4b5f      	ldr	r3, [pc, #380]	; (8011e48 <udp_sendto_if_src+0x1ac>)
 8011ccc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011cd0:	4960      	ldr	r1, [pc, #384]	; (8011e54 <udp_sendto_if_src+0x1b8>)
 8011cd2:	485f      	ldr	r0, [pc, #380]	; (8011e50 <udp_sendto_if_src+0x1b4>)
 8011cd4:	f003 fba4 	bl	8015420 <iprintf>
 8011cd8:	f06f 030f 	mvn.w	r3, #15
 8011cdc:	e0af      	b.n	8011e3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d109      	bne.n	8011cf8 <udp_sendto_if_src+0x5c>
 8011ce4:	4b58      	ldr	r3, [pc, #352]	; (8011e48 <udp_sendto_if_src+0x1ac>)
 8011ce6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011cea:	495b      	ldr	r1, [pc, #364]	; (8011e58 <udp_sendto_if_src+0x1bc>)
 8011cec:	4858      	ldr	r0, [pc, #352]	; (8011e50 <udp_sendto_if_src+0x1b4>)
 8011cee:	f003 fb97 	bl	8015420 <iprintf>
 8011cf2:	f06f 030f 	mvn.w	r3, #15
 8011cf6:	e0a2      	b.n	8011e3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d109      	bne.n	8011d12 <udp_sendto_if_src+0x76>
 8011cfe:	4b52      	ldr	r3, [pc, #328]	; (8011e48 <udp_sendto_if_src+0x1ac>)
 8011d00:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011d04:	4955      	ldr	r1, [pc, #340]	; (8011e5c <udp_sendto_if_src+0x1c0>)
 8011d06:	4852      	ldr	r0, [pc, #328]	; (8011e50 <udp_sendto_if_src+0x1b4>)
 8011d08:	f003 fb8a 	bl	8015420 <iprintf>
 8011d0c:	f06f 030f 	mvn.w	r3, #15
 8011d10:	e095      	b.n	8011e3e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d109      	bne.n	8011d2c <udp_sendto_if_src+0x90>
 8011d18:	4b4b      	ldr	r3, [pc, #300]	; (8011e48 <udp_sendto_if_src+0x1ac>)
 8011d1a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011d1e:	4950      	ldr	r1, [pc, #320]	; (8011e60 <udp_sendto_if_src+0x1c4>)
 8011d20:	484b      	ldr	r0, [pc, #300]	; (8011e50 <udp_sendto_if_src+0x1b4>)
 8011d22:	f003 fb7d 	bl	8015420 <iprintf>
 8011d26:	f06f 030f 	mvn.w	r3, #15
 8011d2a:	e088      	b.n	8011e3e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	8a5b      	ldrh	r3, [r3, #18]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d10f      	bne.n	8011d54 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011d34:	68f9      	ldr	r1, [r7, #12]
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	8a5b      	ldrh	r3, [r3, #18]
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	68f8      	ldr	r0, [r7, #12]
 8011d3e:	f000 f893 	bl	8011e68 <udp_bind>
 8011d42:	4603      	mov	r3, r0
 8011d44:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011d46:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d002      	beq.n	8011d54 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011d4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d52:	e074      	b.n	8011e3e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	891b      	ldrh	r3, [r3, #8]
 8011d58:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d902      	bls.n	8011d66 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011d60:	f04f 33ff 	mov.w	r3, #4294967295
 8011d64:	e06b      	b.n	8011e3e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011d66:	2108      	movs	r1, #8
 8011d68:	68b8      	ldr	r0, [r7, #8]
 8011d6a:	f7f9 fdc7 	bl	800b8fc <pbuf_add_header>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d015      	beq.n	8011da0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011d74:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d78:	2108      	movs	r1, #8
 8011d7a:	2022      	movs	r0, #34	; 0x22
 8011d7c:	f7f9 fb72 	bl	800b464 <pbuf_alloc>
 8011d80:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d102      	bne.n	8011d8e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011d88:	f04f 33ff 	mov.w	r3, #4294967295
 8011d8c:	e057      	b.n	8011e3e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	891b      	ldrh	r3, [r3, #8]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d006      	beq.n	8011da4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011d96:	68b9      	ldr	r1, [r7, #8]
 8011d98:	69f8      	ldr	r0, [r7, #28]
 8011d9a:	f7f9 ff69 	bl	800bc70 <pbuf_chain>
 8011d9e:	e001      	b.n	8011da4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	895b      	ldrh	r3, [r3, #10]
 8011da8:	2b07      	cmp	r3, #7
 8011daa:	d806      	bhi.n	8011dba <udp_sendto_if_src+0x11e>
 8011dac:	4b26      	ldr	r3, [pc, #152]	; (8011e48 <udp_sendto_if_src+0x1ac>)
 8011dae:	f240 320d 	movw	r2, #781	; 0x30d
 8011db2:	492c      	ldr	r1, [pc, #176]	; (8011e64 <udp_sendto_if_src+0x1c8>)
 8011db4:	4826      	ldr	r0, [pc, #152]	; (8011e50 <udp_sendto_if_src+0x1b4>)
 8011db6:	f003 fb33 	bl	8015420 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011dba:	69fb      	ldr	r3, [r7, #28]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	8a5b      	ldrh	r3, [r3, #18]
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7f8 fa51 	bl	800a26c <lwip_htons>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	461a      	mov	r2, r3
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011dd2:	887b      	ldrh	r3, [r7, #2]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7f8 fa49 	bl	800a26c <lwip_htons>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	461a      	mov	r2, r3
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	2200      	movs	r2, #0
 8011de6:	719a      	strb	r2, [r3, #6]
 8011de8:	2200      	movs	r2, #0
 8011dea:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	891b      	ldrh	r3, [r3, #8]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7f8 fa3b 	bl	800a26c <lwip_htons>
 8011df6:	4603      	mov	r3, r0
 8011df8:	461a      	mov	r2, r3
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011dfe:	2311      	movs	r3, #17
 8011e00:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	7adb      	ldrb	r3, [r3, #11]
 8011e06:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	7a9b      	ldrb	r3, [r3, #10]
 8011e0c:	7cb9      	ldrb	r1, [r7, #18]
 8011e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e10:	9202      	str	r2, [sp, #8]
 8011e12:	7cfa      	ldrb	r2, [r7, #19]
 8011e14:	9201      	str	r2, [sp, #4]
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e1e:	69f8      	ldr	r0, [r7, #28]
 8011e20:	f001 fc22 	bl	8013668 <ip4_output_if_src>
 8011e24:	4603      	mov	r3, r0
 8011e26:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011e28:	69fa      	ldr	r2, [r7, #28]
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d004      	beq.n	8011e3a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011e30:	69f8      	ldr	r0, [r7, #28]
 8011e32:	f7f9 fdf9 	bl	800ba28 <pbuf_free>
    q = NULL;
 8011e36:	2300      	movs	r3, #0
 8011e38:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011e3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3720      	adds	r7, #32
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	080189ec 	.word	0x080189ec
 8011e4c:	08018bd8 	.word	0x08018bd8
 8011e50:	08018a40 	.word	0x08018a40
 8011e54:	08018bf8 	.word	0x08018bf8
 8011e58:	08018c18 	.word	0x08018c18
 8011e5c:	08018c3c 	.word	0x08018c3c
 8011e60:	08018c60 	.word	0x08018c60
 8011e64:	08018c84 	.word	0x08018c84

08011e68 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b086      	sub	sp, #24
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	4613      	mov	r3, r2
 8011e74:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d101      	bne.n	8011e80 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011e7c:	4b39      	ldr	r3, [pc, #228]	; (8011f64 <udp_bind+0xfc>)
 8011e7e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d109      	bne.n	8011e9a <udp_bind+0x32>
 8011e86:	4b38      	ldr	r3, [pc, #224]	; (8011f68 <udp_bind+0x100>)
 8011e88:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011e8c:	4937      	ldr	r1, [pc, #220]	; (8011f6c <udp_bind+0x104>)
 8011e8e:	4838      	ldr	r0, [pc, #224]	; (8011f70 <udp_bind+0x108>)
 8011e90:	f003 fac6 	bl	8015420 <iprintf>
 8011e94:	f06f 030f 	mvn.w	r3, #15
 8011e98:	e060      	b.n	8011f5c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011e9e:	4b35      	ldr	r3, [pc, #212]	; (8011f74 <udp_bind+0x10c>)
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	617b      	str	r3, [r7, #20]
 8011ea4:	e009      	b.n	8011eba <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011ea6:	68fa      	ldr	r2, [r7, #12]
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d102      	bne.n	8011eb4 <udp_bind+0x4c>
      rebind = 1;
 8011eae:	2301      	movs	r3, #1
 8011eb0:	74fb      	strb	r3, [r7, #19]
      break;
 8011eb2:	e005      	b.n	8011ec0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	617b      	str	r3, [r7, #20]
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1f2      	bne.n	8011ea6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011ec0:	88fb      	ldrh	r3, [r7, #6]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d109      	bne.n	8011eda <udp_bind+0x72>
    port = udp_new_port();
 8011ec6:	f7ff fc69 	bl	801179c <udp_new_port>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011ece:	88fb      	ldrh	r3, [r7, #6]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d12c      	bne.n	8011f2e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011ed4:	f06f 0307 	mvn.w	r3, #7
 8011ed8:	e040      	b.n	8011f5c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011eda:	4b26      	ldr	r3, [pc, #152]	; (8011f74 <udp_bind+0x10c>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	617b      	str	r3, [r7, #20]
 8011ee0:	e022      	b.n	8011f28 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011ee2:	68fa      	ldr	r2, [r7, #12]
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	429a      	cmp	r2, r3
 8011ee8:	d01b      	beq.n	8011f22 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	8a5b      	ldrh	r3, [r3, #18]
 8011eee:	88fa      	ldrh	r2, [r7, #6]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d116      	bne.n	8011f22 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	681a      	ldr	r2, [r3, #0]
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d00d      	beq.n	8011f1c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d00a      	beq.n	8011f1c <udp_bind+0xb4>
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d006      	beq.n	8011f1c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011f0e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d003      	beq.n	8011f1c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d102      	bne.n	8011f22 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011f1c:	f06f 0307 	mvn.w	r3, #7
 8011f20:	e01c      	b.n	8011f5c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011f22:	697b      	ldr	r3, [r7, #20]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	617b      	str	r3, [r7, #20]
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d1d9      	bne.n	8011ee2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d002      	beq.n	8011f3a <udp_bind+0xd2>
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	e000      	b.n	8011f3c <udp_bind+0xd4>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	68fa      	ldr	r2, [r7, #12]
 8011f3e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	88fa      	ldrh	r2, [r7, #6]
 8011f44:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011f46:	7cfb      	ldrb	r3, [r7, #19]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d106      	bne.n	8011f5a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011f4c:	4b09      	ldr	r3, [pc, #36]	; (8011f74 <udp_bind+0x10c>)
 8011f4e:	681a      	ldr	r2, [r3, #0]
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011f54:	4a07      	ldr	r2, [pc, #28]	; (8011f74 <udp_bind+0x10c>)
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011f5a:	2300      	movs	r3, #0
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3718      	adds	r7, #24
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	08019684 	.word	0x08019684
 8011f68:	080189ec 	.word	0x080189ec
 8011f6c:	08018cb4 	.word	0x08018cb4
 8011f70:	08018a40 	.word	0x08018a40
 8011f74:	20040b00 	.word	0x20040b00

08011f78 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b084      	sub	sp, #16
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d107      	bne.n	8011f9a <udp_recv+0x22>
 8011f8a:	4b08      	ldr	r3, [pc, #32]	; (8011fac <udp_recv+0x34>)
 8011f8c:	f240 428a 	movw	r2, #1162	; 0x48a
 8011f90:	4907      	ldr	r1, [pc, #28]	; (8011fb0 <udp_recv+0x38>)
 8011f92:	4808      	ldr	r0, [pc, #32]	; (8011fb4 <udp_recv+0x3c>)
 8011f94:	f003 fa44 	bl	8015420 <iprintf>
 8011f98:	e005      	b.n	8011fa6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	68ba      	ldr	r2, [r7, #8]
 8011f9e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	61da      	str	r2, [r3, #28]
}
 8011fa6:	3710      	adds	r7, #16
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}
 8011fac:	080189ec 	.word	0x080189ec
 8011fb0:	08018d20 	.word	0x08018d20
 8011fb4:	08018a40 	.word	0x08018a40

08011fb8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d107      	bne.n	8011fd6 <udp_remove+0x1e>
 8011fc6:	4b19      	ldr	r3, [pc, #100]	; (801202c <udp_remove+0x74>)
 8011fc8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011fcc:	4918      	ldr	r1, [pc, #96]	; (8012030 <udp_remove+0x78>)
 8011fce:	4819      	ldr	r0, [pc, #100]	; (8012034 <udp_remove+0x7c>)
 8011fd0:	f003 fa26 	bl	8015420 <iprintf>
 8011fd4:	e026      	b.n	8012024 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011fd6:	4b18      	ldr	r3, [pc, #96]	; (8012038 <udp_remove+0x80>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d105      	bne.n	8011fec <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011fe0:	4b15      	ldr	r3, [pc, #84]	; (8012038 <udp_remove+0x80>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	4a14      	ldr	r2, [pc, #80]	; (8012038 <udp_remove+0x80>)
 8011fe8:	6013      	str	r3, [r2, #0]
 8011fea:	e017      	b.n	801201c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011fec:	4b12      	ldr	r3, [pc, #72]	; (8012038 <udp_remove+0x80>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	60fb      	str	r3, [r7, #12]
 8011ff2:	e010      	b.n	8012016 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	68db      	ldr	r3, [r3, #12]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d009      	beq.n	8012010 <udp_remove+0x58>
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	429a      	cmp	r2, r3
 8012004:	d104      	bne.n	8012010 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	68da      	ldr	r2, [r3, #12]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	60da      	str	r2, [r3, #12]
        break;
 801200e:	e005      	b.n	801201c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	60fb      	str	r3, [r7, #12]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d1eb      	bne.n	8011ff4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801201c:	6879      	ldr	r1, [r7, #4]
 801201e:	2000      	movs	r0, #0
 8012020:	f7f8 fe60 	bl	800ace4 <memp_free>
}
 8012024:	3710      	adds	r7, #16
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}
 801202a:	bf00      	nop
 801202c:	080189ec 	.word	0x080189ec
 8012030:	08018d38 	.word	0x08018d38
 8012034:	08018a40 	.word	0x08018a40
 8012038:	20040b00 	.word	0x20040b00

0801203c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b082      	sub	sp, #8
 8012040:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012042:	2000      	movs	r0, #0
 8012044:	f7f8 fdd8 	bl	800abf8 <memp_malloc>
 8012048:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d007      	beq.n	8012060 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012050:	2220      	movs	r2, #32
 8012052:	2100      	movs	r1, #0
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f003 f946 	bl	80152e6 <memset>
    pcb->ttl = UDP_TTL;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	22ff      	movs	r2, #255	; 0xff
 801205e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012060:	687b      	ldr	r3, [r7, #4]
}
 8012062:	4618      	mov	r0, r3
 8012064:	3708      	adds	r7, #8
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}

0801206a <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801206a:	b580      	push	{r7, lr}
 801206c:	b084      	sub	sp, #16
 801206e:	af00      	add	r7, sp, #0
 8012070:	4603      	mov	r3, r0
 8012072:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012074:	f7ff ffe2 	bl	801203c <udp_new>
 8012078:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801207a:	68fb      	ldr	r3, [r7, #12]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3710      	adds	r7, #16
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012084:	b480      	push	{r7}
 8012086:	b085      	sub	sp, #20
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d01e      	beq.n	80120d2 <udp_netif_ip_addr_changed+0x4e>
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d01a      	beq.n	80120d2 <udp_netif_ip_addr_changed+0x4e>
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d017      	beq.n	80120d2 <udp_netif_ip_addr_changed+0x4e>
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d013      	beq.n	80120d2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80120aa:	4b0d      	ldr	r3, [pc, #52]	; (80120e0 <udp_netif_ip_addr_changed+0x5c>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	60fb      	str	r3, [r7, #12]
 80120b0:	e00c      	b.n	80120cc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d103      	bne.n	80120c6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	60fb      	str	r3, [r7, #12]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1ef      	bne.n	80120b2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80120d2:	bf00      	nop
 80120d4:	3714      	adds	r7, #20
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop
 80120e0:	20040b00 	.word	0x20040b00

080120e4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b082      	sub	sp, #8
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80120ec:	4915      	ldr	r1, [pc, #84]	; (8012144 <etharp_free_entry+0x60>)
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	4613      	mov	r3, r2
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	4413      	add	r3, r2
 80120f6:	00db      	lsls	r3, r3, #3
 80120f8:	440b      	add	r3, r1
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d013      	beq.n	8012128 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012100:	4910      	ldr	r1, [pc, #64]	; (8012144 <etharp_free_entry+0x60>)
 8012102:	687a      	ldr	r2, [r7, #4]
 8012104:	4613      	mov	r3, r2
 8012106:	005b      	lsls	r3, r3, #1
 8012108:	4413      	add	r3, r2
 801210a:	00db      	lsls	r3, r3, #3
 801210c:	440b      	add	r3, r1
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4618      	mov	r0, r3
 8012112:	f7f9 fc89 	bl	800ba28 <pbuf_free>
    arp_table[i].q = NULL;
 8012116:	490b      	ldr	r1, [pc, #44]	; (8012144 <etharp_free_entry+0x60>)
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	4613      	mov	r3, r2
 801211c:	005b      	lsls	r3, r3, #1
 801211e:	4413      	add	r3, r2
 8012120:	00db      	lsls	r3, r3, #3
 8012122:	440b      	add	r3, r1
 8012124:	2200      	movs	r2, #0
 8012126:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012128:	4906      	ldr	r1, [pc, #24]	; (8012144 <etharp_free_entry+0x60>)
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	4613      	mov	r3, r2
 801212e:	005b      	lsls	r3, r3, #1
 8012130:	4413      	add	r3, r2
 8012132:	00db      	lsls	r3, r3, #3
 8012134:	440b      	add	r3, r1
 8012136:	3314      	adds	r3, #20
 8012138:	2200      	movs	r2, #0
 801213a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801213c:	bf00      	nop
 801213e:	3708      	adds	r7, #8
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}
 8012144:	20040b04 	.word	0x20040b04

08012148 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b082      	sub	sp, #8
 801214c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801214e:	2300      	movs	r3, #0
 8012150:	607b      	str	r3, [r7, #4]
 8012152:	e096      	b.n	8012282 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012154:	494f      	ldr	r1, [pc, #316]	; (8012294 <etharp_tmr+0x14c>)
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	4613      	mov	r3, r2
 801215a:	005b      	lsls	r3, r3, #1
 801215c:	4413      	add	r3, r2
 801215e:	00db      	lsls	r3, r3, #3
 8012160:	440b      	add	r3, r1
 8012162:	3314      	adds	r3, #20
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012168:	78fb      	ldrb	r3, [r7, #3]
 801216a:	2b00      	cmp	r3, #0
 801216c:	f000 8086 	beq.w	801227c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012170:	4948      	ldr	r1, [pc, #288]	; (8012294 <etharp_tmr+0x14c>)
 8012172:	687a      	ldr	r2, [r7, #4]
 8012174:	4613      	mov	r3, r2
 8012176:	005b      	lsls	r3, r3, #1
 8012178:	4413      	add	r3, r2
 801217a:	00db      	lsls	r3, r3, #3
 801217c:	440b      	add	r3, r1
 801217e:	3312      	adds	r3, #18
 8012180:	881b      	ldrh	r3, [r3, #0]
 8012182:	3301      	adds	r3, #1
 8012184:	b298      	uxth	r0, r3
 8012186:	4943      	ldr	r1, [pc, #268]	; (8012294 <etharp_tmr+0x14c>)
 8012188:	687a      	ldr	r2, [r7, #4]
 801218a:	4613      	mov	r3, r2
 801218c:	005b      	lsls	r3, r3, #1
 801218e:	4413      	add	r3, r2
 8012190:	00db      	lsls	r3, r3, #3
 8012192:	440b      	add	r3, r1
 8012194:	3312      	adds	r3, #18
 8012196:	4602      	mov	r2, r0
 8012198:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801219a:	493e      	ldr	r1, [pc, #248]	; (8012294 <etharp_tmr+0x14c>)
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	4613      	mov	r3, r2
 80121a0:	005b      	lsls	r3, r3, #1
 80121a2:	4413      	add	r3, r2
 80121a4:	00db      	lsls	r3, r3, #3
 80121a6:	440b      	add	r3, r1
 80121a8:	3312      	adds	r3, #18
 80121aa:	881b      	ldrh	r3, [r3, #0]
 80121ac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80121b0:	d215      	bcs.n	80121de <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80121b2:	4938      	ldr	r1, [pc, #224]	; (8012294 <etharp_tmr+0x14c>)
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	4613      	mov	r3, r2
 80121b8:	005b      	lsls	r3, r3, #1
 80121ba:	4413      	add	r3, r2
 80121bc:	00db      	lsls	r3, r3, #3
 80121be:	440b      	add	r3, r1
 80121c0:	3314      	adds	r3, #20
 80121c2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d10e      	bne.n	80121e6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80121c8:	4932      	ldr	r1, [pc, #200]	; (8012294 <etharp_tmr+0x14c>)
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	4613      	mov	r3, r2
 80121ce:	005b      	lsls	r3, r3, #1
 80121d0:	4413      	add	r3, r2
 80121d2:	00db      	lsls	r3, r3, #3
 80121d4:	440b      	add	r3, r1
 80121d6:	3312      	adds	r3, #18
 80121d8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80121da:	2b04      	cmp	r3, #4
 80121dc:	d903      	bls.n	80121e6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f7ff ff80 	bl	80120e4 <etharp_free_entry>
 80121e4:	e04a      	b.n	801227c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80121e6:	492b      	ldr	r1, [pc, #172]	; (8012294 <etharp_tmr+0x14c>)
 80121e8:	687a      	ldr	r2, [r7, #4]
 80121ea:	4613      	mov	r3, r2
 80121ec:	005b      	lsls	r3, r3, #1
 80121ee:	4413      	add	r3, r2
 80121f0:	00db      	lsls	r3, r3, #3
 80121f2:	440b      	add	r3, r1
 80121f4:	3314      	adds	r3, #20
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	2b03      	cmp	r3, #3
 80121fa:	d10a      	bne.n	8012212 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80121fc:	4925      	ldr	r1, [pc, #148]	; (8012294 <etharp_tmr+0x14c>)
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	4613      	mov	r3, r2
 8012202:	005b      	lsls	r3, r3, #1
 8012204:	4413      	add	r3, r2
 8012206:	00db      	lsls	r3, r3, #3
 8012208:	440b      	add	r3, r1
 801220a:	3314      	adds	r3, #20
 801220c:	2204      	movs	r2, #4
 801220e:	701a      	strb	r2, [r3, #0]
 8012210:	e034      	b.n	801227c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012212:	4920      	ldr	r1, [pc, #128]	; (8012294 <etharp_tmr+0x14c>)
 8012214:	687a      	ldr	r2, [r7, #4]
 8012216:	4613      	mov	r3, r2
 8012218:	005b      	lsls	r3, r3, #1
 801221a:	4413      	add	r3, r2
 801221c:	00db      	lsls	r3, r3, #3
 801221e:	440b      	add	r3, r1
 8012220:	3314      	adds	r3, #20
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	2b04      	cmp	r3, #4
 8012226:	d10a      	bne.n	801223e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012228:	491a      	ldr	r1, [pc, #104]	; (8012294 <etharp_tmr+0x14c>)
 801222a:	687a      	ldr	r2, [r7, #4]
 801222c:	4613      	mov	r3, r2
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	4413      	add	r3, r2
 8012232:	00db      	lsls	r3, r3, #3
 8012234:	440b      	add	r3, r1
 8012236:	3314      	adds	r3, #20
 8012238:	2202      	movs	r2, #2
 801223a:	701a      	strb	r2, [r3, #0]
 801223c:	e01e      	b.n	801227c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801223e:	4915      	ldr	r1, [pc, #84]	; (8012294 <etharp_tmr+0x14c>)
 8012240:	687a      	ldr	r2, [r7, #4]
 8012242:	4613      	mov	r3, r2
 8012244:	005b      	lsls	r3, r3, #1
 8012246:	4413      	add	r3, r2
 8012248:	00db      	lsls	r3, r3, #3
 801224a:	440b      	add	r3, r1
 801224c:	3314      	adds	r3, #20
 801224e:	781b      	ldrb	r3, [r3, #0]
 8012250:	2b01      	cmp	r3, #1
 8012252:	d113      	bne.n	801227c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012254:	490f      	ldr	r1, [pc, #60]	; (8012294 <etharp_tmr+0x14c>)
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	4613      	mov	r3, r2
 801225a:	005b      	lsls	r3, r3, #1
 801225c:	4413      	add	r3, r2
 801225e:	00db      	lsls	r3, r3, #3
 8012260:	440b      	add	r3, r1
 8012262:	3308      	adds	r3, #8
 8012264:	6818      	ldr	r0, [r3, #0]
 8012266:	687a      	ldr	r2, [r7, #4]
 8012268:	4613      	mov	r3, r2
 801226a:	005b      	lsls	r3, r3, #1
 801226c:	4413      	add	r3, r2
 801226e:	00db      	lsls	r3, r3, #3
 8012270:	4a08      	ldr	r2, [pc, #32]	; (8012294 <etharp_tmr+0x14c>)
 8012272:	4413      	add	r3, r2
 8012274:	3304      	adds	r3, #4
 8012276:	4619      	mov	r1, r3
 8012278:	f000 fe6e 	bl	8012f58 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	3301      	adds	r3, #1
 8012280:	607b      	str	r3, [r7, #4]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b09      	cmp	r3, #9
 8012286:	f77f af65 	ble.w	8012154 <etharp_tmr+0xc>
      }
    }
  }
}
 801228a:	bf00      	nop
 801228c:	bf00      	nop
 801228e:	3708      	adds	r7, #8
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}
 8012294:	20040b04 	.word	0x20040b04

08012298 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b08a      	sub	sp, #40	; 0x28
 801229c:	af00      	add	r7, sp, #0
 801229e:	60f8      	str	r0, [r7, #12]
 80122a0:	460b      	mov	r3, r1
 80122a2:	607a      	str	r2, [r7, #4]
 80122a4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80122a6:	230a      	movs	r3, #10
 80122a8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80122aa:	230a      	movs	r3, #10
 80122ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80122ae:	230a      	movs	r3, #10
 80122b0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80122b2:	2300      	movs	r3, #0
 80122b4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80122b6:	230a      	movs	r3, #10
 80122b8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80122ba:	2300      	movs	r3, #0
 80122bc:	83bb      	strh	r3, [r7, #28]
 80122be:	2300      	movs	r3, #0
 80122c0:	837b      	strh	r3, [r7, #26]
 80122c2:	2300      	movs	r3, #0
 80122c4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80122c6:	2300      	movs	r3, #0
 80122c8:	843b      	strh	r3, [r7, #32]
 80122ca:	e0ae      	b.n	801242a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80122cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80122d0:	49a6      	ldr	r1, [pc, #664]	; (801256c <etharp_find_entry+0x2d4>)
 80122d2:	4613      	mov	r3, r2
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	4413      	add	r3, r2
 80122d8:	00db      	lsls	r3, r3, #3
 80122da:	440b      	add	r3, r1
 80122dc:	3314      	adds	r3, #20
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80122e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80122e6:	2b0a      	cmp	r3, #10
 80122e8:	d105      	bne.n	80122f6 <etharp_find_entry+0x5e>
 80122ea:	7dfb      	ldrb	r3, [r7, #23]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d102      	bne.n	80122f6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80122f0:	8c3b      	ldrh	r3, [r7, #32]
 80122f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80122f4:	e095      	b.n	8012422 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80122f6:	7dfb      	ldrb	r3, [r7, #23]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	f000 8092 	beq.w	8012422 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80122fe:	7dfb      	ldrb	r3, [r7, #23]
 8012300:	2b01      	cmp	r3, #1
 8012302:	d009      	beq.n	8012318 <etharp_find_entry+0x80>
 8012304:	7dfb      	ldrb	r3, [r7, #23]
 8012306:	2b01      	cmp	r3, #1
 8012308:	d806      	bhi.n	8012318 <etharp_find_entry+0x80>
 801230a:	4b99      	ldr	r3, [pc, #612]	; (8012570 <etharp_find_entry+0x2d8>)
 801230c:	f240 1223 	movw	r2, #291	; 0x123
 8012310:	4998      	ldr	r1, [pc, #608]	; (8012574 <etharp_find_entry+0x2dc>)
 8012312:	4899      	ldr	r0, [pc, #612]	; (8012578 <etharp_find_entry+0x2e0>)
 8012314:	f003 f884 	bl	8015420 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d020      	beq.n	8012360 <etharp_find_entry+0xc8>
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	6819      	ldr	r1, [r3, #0]
 8012322:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012326:	4891      	ldr	r0, [pc, #580]	; (801256c <etharp_find_entry+0x2d4>)
 8012328:	4613      	mov	r3, r2
 801232a:	005b      	lsls	r3, r3, #1
 801232c:	4413      	add	r3, r2
 801232e:	00db      	lsls	r3, r3, #3
 8012330:	4403      	add	r3, r0
 8012332:	3304      	adds	r3, #4
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	4299      	cmp	r1, r3
 8012338:	d112      	bne.n	8012360 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00c      	beq.n	801235a <etharp_find_entry+0xc2>
 8012340:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012344:	4989      	ldr	r1, [pc, #548]	; (801256c <etharp_find_entry+0x2d4>)
 8012346:	4613      	mov	r3, r2
 8012348:	005b      	lsls	r3, r3, #1
 801234a:	4413      	add	r3, r2
 801234c:	00db      	lsls	r3, r3, #3
 801234e:	440b      	add	r3, r1
 8012350:	3308      	adds	r3, #8
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	429a      	cmp	r2, r3
 8012358:	d102      	bne.n	8012360 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801235a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801235e:	e100      	b.n	8012562 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012360:	7dfb      	ldrb	r3, [r7, #23]
 8012362:	2b01      	cmp	r3, #1
 8012364:	d140      	bne.n	80123e8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012366:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801236a:	4980      	ldr	r1, [pc, #512]	; (801256c <etharp_find_entry+0x2d4>)
 801236c:	4613      	mov	r3, r2
 801236e:	005b      	lsls	r3, r3, #1
 8012370:	4413      	add	r3, r2
 8012372:	00db      	lsls	r3, r3, #3
 8012374:	440b      	add	r3, r1
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d01a      	beq.n	80123b2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801237c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012380:	497a      	ldr	r1, [pc, #488]	; (801256c <etharp_find_entry+0x2d4>)
 8012382:	4613      	mov	r3, r2
 8012384:	005b      	lsls	r3, r3, #1
 8012386:	4413      	add	r3, r2
 8012388:	00db      	lsls	r3, r3, #3
 801238a:	440b      	add	r3, r1
 801238c:	3312      	adds	r3, #18
 801238e:	881b      	ldrh	r3, [r3, #0]
 8012390:	8bba      	ldrh	r2, [r7, #28]
 8012392:	429a      	cmp	r2, r3
 8012394:	d845      	bhi.n	8012422 <etharp_find_entry+0x18a>
            old_queue = i;
 8012396:	8c3b      	ldrh	r3, [r7, #32]
 8012398:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801239a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801239e:	4973      	ldr	r1, [pc, #460]	; (801256c <etharp_find_entry+0x2d4>)
 80123a0:	4613      	mov	r3, r2
 80123a2:	005b      	lsls	r3, r3, #1
 80123a4:	4413      	add	r3, r2
 80123a6:	00db      	lsls	r3, r3, #3
 80123a8:	440b      	add	r3, r1
 80123aa:	3312      	adds	r3, #18
 80123ac:	881b      	ldrh	r3, [r3, #0]
 80123ae:	83bb      	strh	r3, [r7, #28]
 80123b0:	e037      	b.n	8012422 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80123b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123b6:	496d      	ldr	r1, [pc, #436]	; (801256c <etharp_find_entry+0x2d4>)
 80123b8:	4613      	mov	r3, r2
 80123ba:	005b      	lsls	r3, r3, #1
 80123bc:	4413      	add	r3, r2
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	440b      	add	r3, r1
 80123c2:	3312      	adds	r3, #18
 80123c4:	881b      	ldrh	r3, [r3, #0]
 80123c6:	8b7a      	ldrh	r2, [r7, #26]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d82a      	bhi.n	8012422 <etharp_find_entry+0x18a>
            old_pending = i;
 80123cc:	8c3b      	ldrh	r3, [r7, #32]
 80123ce:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80123d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123d4:	4965      	ldr	r1, [pc, #404]	; (801256c <etharp_find_entry+0x2d4>)
 80123d6:	4613      	mov	r3, r2
 80123d8:	005b      	lsls	r3, r3, #1
 80123da:	4413      	add	r3, r2
 80123dc:	00db      	lsls	r3, r3, #3
 80123de:	440b      	add	r3, r1
 80123e0:	3312      	adds	r3, #18
 80123e2:	881b      	ldrh	r3, [r3, #0]
 80123e4:	837b      	strh	r3, [r7, #26]
 80123e6:	e01c      	b.n	8012422 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80123e8:	7dfb      	ldrb	r3, [r7, #23]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d919      	bls.n	8012422 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80123ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80123f2:	495e      	ldr	r1, [pc, #376]	; (801256c <etharp_find_entry+0x2d4>)
 80123f4:	4613      	mov	r3, r2
 80123f6:	005b      	lsls	r3, r3, #1
 80123f8:	4413      	add	r3, r2
 80123fa:	00db      	lsls	r3, r3, #3
 80123fc:	440b      	add	r3, r1
 80123fe:	3312      	adds	r3, #18
 8012400:	881b      	ldrh	r3, [r3, #0]
 8012402:	8b3a      	ldrh	r2, [r7, #24]
 8012404:	429a      	cmp	r2, r3
 8012406:	d80c      	bhi.n	8012422 <etharp_find_entry+0x18a>
            old_stable = i;
 8012408:	8c3b      	ldrh	r3, [r7, #32]
 801240a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801240c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012410:	4956      	ldr	r1, [pc, #344]	; (801256c <etharp_find_entry+0x2d4>)
 8012412:	4613      	mov	r3, r2
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	4413      	add	r3, r2
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	440b      	add	r3, r1
 801241c:	3312      	adds	r3, #18
 801241e:	881b      	ldrh	r3, [r3, #0]
 8012420:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012422:	8c3b      	ldrh	r3, [r7, #32]
 8012424:	3301      	adds	r3, #1
 8012426:	b29b      	uxth	r3, r3
 8012428:	843b      	strh	r3, [r7, #32]
 801242a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801242e:	2b09      	cmp	r3, #9
 8012430:	f77f af4c 	ble.w	80122cc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012434:	7afb      	ldrb	r3, [r7, #11]
 8012436:	f003 0302 	and.w	r3, r3, #2
 801243a:	2b00      	cmp	r3, #0
 801243c:	d108      	bne.n	8012450 <etharp_find_entry+0x1b8>
 801243e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012442:	2b0a      	cmp	r3, #10
 8012444:	d107      	bne.n	8012456 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012446:	7afb      	ldrb	r3, [r7, #11]
 8012448:	f003 0301 	and.w	r3, r3, #1
 801244c:	2b00      	cmp	r3, #0
 801244e:	d102      	bne.n	8012456 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012450:	f04f 33ff 	mov.w	r3, #4294967295
 8012454:	e085      	b.n	8012562 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012456:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801245a:	2b09      	cmp	r3, #9
 801245c:	dc02      	bgt.n	8012464 <etharp_find_entry+0x1cc>
    i = empty;
 801245e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012460:	843b      	strh	r3, [r7, #32]
 8012462:	e039      	b.n	80124d8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012464:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012468:	2b09      	cmp	r3, #9
 801246a:	dc14      	bgt.n	8012496 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801246c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801246e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012470:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012474:	493d      	ldr	r1, [pc, #244]	; (801256c <etharp_find_entry+0x2d4>)
 8012476:	4613      	mov	r3, r2
 8012478:	005b      	lsls	r3, r3, #1
 801247a:	4413      	add	r3, r2
 801247c:	00db      	lsls	r3, r3, #3
 801247e:	440b      	add	r3, r1
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d018      	beq.n	80124b8 <etharp_find_entry+0x220>
 8012486:	4b3a      	ldr	r3, [pc, #232]	; (8012570 <etharp_find_entry+0x2d8>)
 8012488:	f240 126d 	movw	r2, #365	; 0x16d
 801248c:	493b      	ldr	r1, [pc, #236]	; (801257c <etharp_find_entry+0x2e4>)
 801248e:	483a      	ldr	r0, [pc, #232]	; (8012578 <etharp_find_entry+0x2e0>)
 8012490:	f002 ffc6 	bl	8015420 <iprintf>
 8012494:	e010      	b.n	80124b8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012496:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801249a:	2b09      	cmp	r3, #9
 801249c:	dc02      	bgt.n	80124a4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801249e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80124a0:	843b      	strh	r3, [r7, #32]
 80124a2:	e009      	b.n	80124b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80124a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80124a8:	2b09      	cmp	r3, #9
 80124aa:	dc02      	bgt.n	80124b2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80124ac:	8bfb      	ldrh	r3, [r7, #30]
 80124ae:	843b      	strh	r3, [r7, #32]
 80124b0:	e002      	b.n	80124b8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80124b2:	f04f 33ff 	mov.w	r3, #4294967295
 80124b6:	e054      	b.n	8012562 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80124b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80124bc:	2b09      	cmp	r3, #9
 80124be:	dd06      	ble.n	80124ce <etharp_find_entry+0x236>
 80124c0:	4b2b      	ldr	r3, [pc, #172]	; (8012570 <etharp_find_entry+0x2d8>)
 80124c2:	f240 127f 	movw	r2, #383	; 0x17f
 80124c6:	492e      	ldr	r1, [pc, #184]	; (8012580 <etharp_find_entry+0x2e8>)
 80124c8:	482b      	ldr	r0, [pc, #172]	; (8012578 <etharp_find_entry+0x2e0>)
 80124ca:	f002 ffa9 	bl	8015420 <iprintf>
    etharp_free_entry(i);
 80124ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7ff fe06 	bl	80120e4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80124d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80124dc:	2b09      	cmp	r3, #9
 80124de:	dd06      	ble.n	80124ee <etharp_find_entry+0x256>
 80124e0:	4b23      	ldr	r3, [pc, #140]	; (8012570 <etharp_find_entry+0x2d8>)
 80124e2:	f240 1283 	movw	r2, #387	; 0x183
 80124e6:	4926      	ldr	r1, [pc, #152]	; (8012580 <etharp_find_entry+0x2e8>)
 80124e8:	4823      	ldr	r0, [pc, #140]	; (8012578 <etharp_find_entry+0x2e0>)
 80124ea:	f002 ff99 	bl	8015420 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80124ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80124f2:	491e      	ldr	r1, [pc, #120]	; (801256c <etharp_find_entry+0x2d4>)
 80124f4:	4613      	mov	r3, r2
 80124f6:	005b      	lsls	r3, r3, #1
 80124f8:	4413      	add	r3, r2
 80124fa:	00db      	lsls	r3, r3, #3
 80124fc:	440b      	add	r3, r1
 80124fe:	3314      	adds	r3, #20
 8012500:	781b      	ldrb	r3, [r3, #0]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d006      	beq.n	8012514 <etharp_find_entry+0x27c>
 8012506:	4b1a      	ldr	r3, [pc, #104]	; (8012570 <etharp_find_entry+0x2d8>)
 8012508:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801250c:	491d      	ldr	r1, [pc, #116]	; (8012584 <etharp_find_entry+0x2ec>)
 801250e:	481a      	ldr	r0, [pc, #104]	; (8012578 <etharp_find_entry+0x2e0>)
 8012510:	f002 ff86 	bl	8015420 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d00b      	beq.n	8012532 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801251a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	6819      	ldr	r1, [r3, #0]
 8012522:	4812      	ldr	r0, [pc, #72]	; (801256c <etharp_find_entry+0x2d4>)
 8012524:	4613      	mov	r3, r2
 8012526:	005b      	lsls	r3, r3, #1
 8012528:	4413      	add	r3, r2
 801252a:	00db      	lsls	r3, r3, #3
 801252c:	4403      	add	r3, r0
 801252e:	3304      	adds	r3, #4
 8012530:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012532:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012536:	490d      	ldr	r1, [pc, #52]	; (801256c <etharp_find_entry+0x2d4>)
 8012538:	4613      	mov	r3, r2
 801253a:	005b      	lsls	r3, r3, #1
 801253c:	4413      	add	r3, r2
 801253e:	00db      	lsls	r3, r3, #3
 8012540:	440b      	add	r3, r1
 8012542:	3312      	adds	r3, #18
 8012544:	2200      	movs	r2, #0
 8012546:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012548:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801254c:	4907      	ldr	r1, [pc, #28]	; (801256c <etharp_find_entry+0x2d4>)
 801254e:	4613      	mov	r3, r2
 8012550:	005b      	lsls	r3, r3, #1
 8012552:	4413      	add	r3, r2
 8012554:	00db      	lsls	r3, r3, #3
 8012556:	440b      	add	r3, r1
 8012558:	3308      	adds	r3, #8
 801255a:	687a      	ldr	r2, [r7, #4]
 801255c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801255e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012562:	4618      	mov	r0, r3
 8012564:	3728      	adds	r7, #40	; 0x28
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	20040b04 	.word	0x20040b04
 8012570:	08018d50 	.word	0x08018d50
 8012574:	08018d88 	.word	0x08018d88
 8012578:	08018dc8 	.word	0x08018dc8
 801257c:	08018df0 	.word	0x08018df0
 8012580:	08018e08 	.word	0x08018e08
 8012584:	08018e1c 	.word	0x08018e1c

08012588 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b088      	sub	sp, #32
 801258c:	af02      	add	r7, sp, #8
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	607a      	str	r2, [r7, #4]
 8012594:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801259c:	2b06      	cmp	r3, #6
 801259e:	d006      	beq.n	80125ae <etharp_update_arp_entry+0x26>
 80125a0:	4b48      	ldr	r3, [pc, #288]	; (80126c4 <etharp_update_arp_entry+0x13c>)
 80125a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80125a6:	4948      	ldr	r1, [pc, #288]	; (80126c8 <etharp_update_arp_entry+0x140>)
 80125a8:	4848      	ldr	r0, [pc, #288]	; (80126cc <etharp_update_arp_entry+0x144>)
 80125aa:	f002 ff39 	bl	8015420 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d012      	beq.n	80125da <etharp_update_arp_entry+0x52>
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d00e      	beq.n	80125da <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	68f9      	ldr	r1, [r7, #12]
 80125c2:	4618      	mov	r0, r3
 80125c4:	f001 f8fe 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 80125c8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d105      	bne.n	80125da <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80125d6:	2be0      	cmp	r3, #224	; 0xe0
 80125d8:	d102      	bne.n	80125e0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80125da:	f06f 030f 	mvn.w	r3, #15
 80125de:	e06c      	b.n	80126ba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80125e0:	78fb      	ldrb	r3, [r7, #3]
 80125e2:	68fa      	ldr	r2, [r7, #12]
 80125e4:	4619      	mov	r1, r3
 80125e6:	68b8      	ldr	r0, [r7, #8]
 80125e8:	f7ff fe56 	bl	8012298 <etharp_find_entry>
 80125ec:	4603      	mov	r3, r0
 80125ee:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80125f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	da02      	bge.n	80125fe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80125f8:	8afb      	ldrh	r3, [r7, #22]
 80125fa:	b25b      	sxtb	r3, r3
 80125fc:	e05d      	b.n	80126ba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80125fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012602:	4933      	ldr	r1, [pc, #204]	; (80126d0 <etharp_update_arp_entry+0x148>)
 8012604:	4613      	mov	r3, r2
 8012606:	005b      	lsls	r3, r3, #1
 8012608:	4413      	add	r3, r2
 801260a:	00db      	lsls	r3, r3, #3
 801260c:	440b      	add	r3, r1
 801260e:	3314      	adds	r3, #20
 8012610:	2202      	movs	r2, #2
 8012612:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012614:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012618:	492d      	ldr	r1, [pc, #180]	; (80126d0 <etharp_update_arp_entry+0x148>)
 801261a:	4613      	mov	r3, r2
 801261c:	005b      	lsls	r3, r3, #1
 801261e:	4413      	add	r3, r2
 8012620:	00db      	lsls	r3, r3, #3
 8012622:	440b      	add	r3, r1
 8012624:	3308      	adds	r3, #8
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801262a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801262e:	4613      	mov	r3, r2
 8012630:	005b      	lsls	r3, r3, #1
 8012632:	4413      	add	r3, r2
 8012634:	00db      	lsls	r3, r3, #3
 8012636:	3308      	adds	r3, #8
 8012638:	4a25      	ldr	r2, [pc, #148]	; (80126d0 <etharp_update_arp_entry+0x148>)
 801263a:	4413      	add	r3, r2
 801263c:	3304      	adds	r3, #4
 801263e:	2206      	movs	r2, #6
 8012640:	6879      	ldr	r1, [r7, #4]
 8012642:	4618      	mov	r0, r3
 8012644:	f002 fe27 	bl	8015296 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012648:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801264c:	4920      	ldr	r1, [pc, #128]	; (80126d0 <etharp_update_arp_entry+0x148>)
 801264e:	4613      	mov	r3, r2
 8012650:	005b      	lsls	r3, r3, #1
 8012652:	4413      	add	r3, r2
 8012654:	00db      	lsls	r3, r3, #3
 8012656:	440b      	add	r3, r1
 8012658:	3312      	adds	r3, #18
 801265a:	2200      	movs	r2, #0
 801265c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801265e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012662:	491b      	ldr	r1, [pc, #108]	; (80126d0 <etharp_update_arp_entry+0x148>)
 8012664:	4613      	mov	r3, r2
 8012666:	005b      	lsls	r3, r3, #1
 8012668:	4413      	add	r3, r2
 801266a:	00db      	lsls	r3, r3, #3
 801266c:	440b      	add	r3, r1
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d021      	beq.n	80126b8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012678:	4915      	ldr	r1, [pc, #84]	; (80126d0 <etharp_update_arp_entry+0x148>)
 801267a:	4613      	mov	r3, r2
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	4413      	add	r3, r2
 8012680:	00db      	lsls	r3, r3, #3
 8012682:	440b      	add	r3, r1
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801268c:	4910      	ldr	r1, [pc, #64]	; (80126d0 <etharp_update_arp_entry+0x148>)
 801268e:	4613      	mov	r3, r2
 8012690:	005b      	lsls	r3, r3, #1
 8012692:	4413      	add	r3, r2
 8012694:	00db      	lsls	r3, r3, #3
 8012696:	440b      	add	r3, r1
 8012698:	2200      	movs	r2, #0
 801269a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80126a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6939      	ldr	r1, [r7, #16]
 80126ac:	68f8      	ldr	r0, [r7, #12]
 80126ae:	f001 ff97 	bl	80145e0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80126b2:	6938      	ldr	r0, [r7, #16]
 80126b4:	f7f9 f9b8 	bl	800ba28 <pbuf_free>
  }
  return ERR_OK;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3718      	adds	r7, #24
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	08018d50 	.word	0x08018d50
 80126c8:	08018e48 	.word	0x08018e48
 80126cc:	08018dc8 	.word	0x08018dc8
 80126d0:	20040b04 	.word	0x20040b04

080126d4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b084      	sub	sp, #16
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80126dc:	2300      	movs	r3, #0
 80126de:	60fb      	str	r3, [r7, #12]
 80126e0:	e01e      	b.n	8012720 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80126e2:	4913      	ldr	r1, [pc, #76]	; (8012730 <etharp_cleanup_netif+0x5c>)
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	4613      	mov	r3, r2
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	4413      	add	r3, r2
 80126ec:	00db      	lsls	r3, r3, #3
 80126ee:	440b      	add	r3, r1
 80126f0:	3314      	adds	r3, #20
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80126f6:	7afb      	ldrb	r3, [r7, #11]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d00e      	beq.n	801271a <etharp_cleanup_netif+0x46>
 80126fc:	490c      	ldr	r1, [pc, #48]	; (8012730 <etharp_cleanup_netif+0x5c>)
 80126fe:	68fa      	ldr	r2, [r7, #12]
 8012700:	4613      	mov	r3, r2
 8012702:	005b      	lsls	r3, r3, #1
 8012704:	4413      	add	r3, r2
 8012706:	00db      	lsls	r3, r3, #3
 8012708:	440b      	add	r3, r1
 801270a:	3308      	adds	r3, #8
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	429a      	cmp	r2, r3
 8012712:	d102      	bne.n	801271a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f7ff fce5 	bl	80120e4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	3301      	adds	r3, #1
 801271e:	60fb      	str	r3, [r7, #12]
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	2b09      	cmp	r3, #9
 8012724:	dddd      	ble.n	80126e2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012726:	bf00      	nop
 8012728:	bf00      	nop
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	20040b04 	.word	0x20040b04

08012734 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012734:	b5b0      	push	{r4, r5, r7, lr}
 8012736:	b08a      	sub	sp, #40	; 0x28
 8012738:	af04      	add	r7, sp, #16
 801273a:	6078      	str	r0, [r7, #4]
 801273c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d107      	bne.n	8012754 <etharp_input+0x20>
 8012744:	4b3d      	ldr	r3, [pc, #244]	; (801283c <etharp_input+0x108>)
 8012746:	f240 228a 	movw	r2, #650	; 0x28a
 801274a:	493d      	ldr	r1, [pc, #244]	; (8012840 <etharp_input+0x10c>)
 801274c:	483d      	ldr	r0, [pc, #244]	; (8012844 <etharp_input+0x110>)
 801274e:	f002 fe67 	bl	8015420 <iprintf>
 8012752:	e06f      	b.n	8012834 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	685b      	ldr	r3, [r3, #4]
 8012758:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	b29b      	uxth	r3, r3
 8012760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012764:	d10c      	bne.n	8012780 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801276a:	2b06      	cmp	r3, #6
 801276c:	d108      	bne.n	8012780 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012772:	2b04      	cmp	r3, #4
 8012774:	d104      	bne.n	8012780 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	885b      	ldrh	r3, [r3, #2]
 801277a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801277c:	2b08      	cmp	r3, #8
 801277e:	d003      	beq.n	8012788 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f7f9 f951 	bl	800ba28 <pbuf_free>
    return;
 8012786:	e055      	b.n	8012834 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	330e      	adds	r3, #14
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	3318      	adds	r3, #24
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	3304      	adds	r3, #4
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d102      	bne.n	80127a8 <etharp_input+0x74>
    for_us = 0;
 80127a2:	2300      	movs	r3, #0
 80127a4:	75fb      	strb	r3, [r7, #23]
 80127a6:	e009      	b.n	80127bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80127a8:	68ba      	ldr	r2, [r7, #8]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	3304      	adds	r3, #4
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	429a      	cmp	r2, r3
 80127b2:	bf0c      	ite	eq
 80127b4:	2301      	moveq	r3, #1
 80127b6:	2300      	movne	r3, #0
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	f103 0208 	add.w	r2, r3, #8
 80127c2:	7dfb      	ldrb	r3, [r7, #23]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <etharp_input+0x98>
 80127c8:	2301      	movs	r3, #1
 80127ca:	e000      	b.n	80127ce <etharp_input+0x9a>
 80127cc:	2302      	movs	r3, #2
 80127ce:	f107 010c 	add.w	r1, r7, #12
 80127d2:	6838      	ldr	r0, [r7, #0]
 80127d4:	f7ff fed8 	bl	8012588 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	88db      	ldrh	r3, [r3, #6]
 80127dc:	b29b      	uxth	r3, r3
 80127de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80127e2:	d003      	beq.n	80127ec <etharp_input+0xb8>
 80127e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80127e8:	d01e      	beq.n	8012828 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80127ea:	e020      	b.n	801282e <etharp_input+0xfa>
      if (for_us) {
 80127ec:	7dfb      	ldrb	r3, [r7, #23]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d01c      	beq.n	801282c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012808:	693a      	ldr	r2, [r7, #16]
 801280a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801280c:	2102      	movs	r1, #2
 801280e:	9103      	str	r1, [sp, #12]
 8012810:	f107 010c 	add.w	r1, r7, #12
 8012814:	9102      	str	r1, [sp, #8]
 8012816:	9201      	str	r2, [sp, #4]
 8012818:	9300      	str	r3, [sp, #0]
 801281a:	462b      	mov	r3, r5
 801281c:	4622      	mov	r2, r4
 801281e:	4601      	mov	r1, r0
 8012820:	6838      	ldr	r0, [r7, #0]
 8012822:	f000 faeb 	bl	8012dfc <etharp_raw>
      break;
 8012826:	e001      	b.n	801282c <etharp_input+0xf8>
      break;
 8012828:	bf00      	nop
 801282a:	e000      	b.n	801282e <etharp_input+0xfa>
      break;
 801282c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f7f9 f8fa 	bl	800ba28 <pbuf_free>
}
 8012834:	3718      	adds	r7, #24
 8012836:	46bd      	mov	sp, r7
 8012838:	bdb0      	pop	{r4, r5, r7, pc}
 801283a:	bf00      	nop
 801283c:	08018d50 	.word	0x08018d50
 8012840:	08018ea0 	.word	0x08018ea0
 8012844:	08018dc8 	.word	0x08018dc8

08012848 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b086      	sub	sp, #24
 801284c:	af02      	add	r7, sp, #8
 801284e:	60f8      	str	r0, [r7, #12]
 8012850:	60b9      	str	r1, [r7, #8]
 8012852:	4613      	mov	r3, r2
 8012854:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012856:	79fa      	ldrb	r2, [r7, #7]
 8012858:	4944      	ldr	r1, [pc, #272]	; (801296c <etharp_output_to_arp_index+0x124>)
 801285a:	4613      	mov	r3, r2
 801285c:	005b      	lsls	r3, r3, #1
 801285e:	4413      	add	r3, r2
 8012860:	00db      	lsls	r3, r3, #3
 8012862:	440b      	add	r3, r1
 8012864:	3314      	adds	r3, #20
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	2b01      	cmp	r3, #1
 801286a:	d806      	bhi.n	801287a <etharp_output_to_arp_index+0x32>
 801286c:	4b40      	ldr	r3, [pc, #256]	; (8012970 <etharp_output_to_arp_index+0x128>)
 801286e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012872:	4940      	ldr	r1, [pc, #256]	; (8012974 <etharp_output_to_arp_index+0x12c>)
 8012874:	4840      	ldr	r0, [pc, #256]	; (8012978 <etharp_output_to_arp_index+0x130>)
 8012876:	f002 fdd3 	bl	8015420 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801287a:	79fa      	ldrb	r2, [r7, #7]
 801287c:	493b      	ldr	r1, [pc, #236]	; (801296c <etharp_output_to_arp_index+0x124>)
 801287e:	4613      	mov	r3, r2
 8012880:	005b      	lsls	r3, r3, #1
 8012882:	4413      	add	r3, r2
 8012884:	00db      	lsls	r3, r3, #3
 8012886:	440b      	add	r3, r1
 8012888:	3314      	adds	r3, #20
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	2b02      	cmp	r3, #2
 801288e:	d153      	bne.n	8012938 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012890:	79fa      	ldrb	r2, [r7, #7]
 8012892:	4936      	ldr	r1, [pc, #216]	; (801296c <etharp_output_to_arp_index+0x124>)
 8012894:	4613      	mov	r3, r2
 8012896:	005b      	lsls	r3, r3, #1
 8012898:	4413      	add	r3, r2
 801289a:	00db      	lsls	r3, r3, #3
 801289c:	440b      	add	r3, r1
 801289e:	3312      	adds	r3, #18
 80128a0:	881b      	ldrh	r3, [r3, #0]
 80128a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80128a6:	d919      	bls.n	80128dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80128a8:	79fa      	ldrb	r2, [r7, #7]
 80128aa:	4613      	mov	r3, r2
 80128ac:	005b      	lsls	r3, r3, #1
 80128ae:	4413      	add	r3, r2
 80128b0:	00db      	lsls	r3, r3, #3
 80128b2:	4a2e      	ldr	r2, [pc, #184]	; (801296c <etharp_output_to_arp_index+0x124>)
 80128b4:	4413      	add	r3, r2
 80128b6:	3304      	adds	r3, #4
 80128b8:	4619      	mov	r1, r3
 80128ba:	68f8      	ldr	r0, [r7, #12]
 80128bc:	f000 fb4c 	bl	8012f58 <etharp_request>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d138      	bne.n	8012938 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80128c6:	79fa      	ldrb	r2, [r7, #7]
 80128c8:	4928      	ldr	r1, [pc, #160]	; (801296c <etharp_output_to_arp_index+0x124>)
 80128ca:	4613      	mov	r3, r2
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	4413      	add	r3, r2
 80128d0:	00db      	lsls	r3, r3, #3
 80128d2:	440b      	add	r3, r1
 80128d4:	3314      	adds	r3, #20
 80128d6:	2203      	movs	r2, #3
 80128d8:	701a      	strb	r2, [r3, #0]
 80128da:	e02d      	b.n	8012938 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80128dc:	79fa      	ldrb	r2, [r7, #7]
 80128de:	4923      	ldr	r1, [pc, #140]	; (801296c <etharp_output_to_arp_index+0x124>)
 80128e0:	4613      	mov	r3, r2
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	4413      	add	r3, r2
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	440b      	add	r3, r1
 80128ea:	3312      	adds	r3, #18
 80128ec:	881b      	ldrh	r3, [r3, #0]
 80128ee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80128f2:	d321      	bcc.n	8012938 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80128f4:	79fa      	ldrb	r2, [r7, #7]
 80128f6:	4613      	mov	r3, r2
 80128f8:	005b      	lsls	r3, r3, #1
 80128fa:	4413      	add	r3, r2
 80128fc:	00db      	lsls	r3, r3, #3
 80128fe:	4a1b      	ldr	r2, [pc, #108]	; (801296c <etharp_output_to_arp_index+0x124>)
 8012900:	4413      	add	r3, r2
 8012902:	1d19      	adds	r1, r3, #4
 8012904:	79fa      	ldrb	r2, [r7, #7]
 8012906:	4613      	mov	r3, r2
 8012908:	005b      	lsls	r3, r3, #1
 801290a:	4413      	add	r3, r2
 801290c:	00db      	lsls	r3, r3, #3
 801290e:	3308      	adds	r3, #8
 8012910:	4a16      	ldr	r2, [pc, #88]	; (801296c <etharp_output_to_arp_index+0x124>)
 8012912:	4413      	add	r3, r2
 8012914:	3304      	adds	r3, #4
 8012916:	461a      	mov	r2, r3
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f000 fafb 	bl	8012f14 <etharp_request_dst>
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	d109      	bne.n	8012938 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012924:	79fa      	ldrb	r2, [r7, #7]
 8012926:	4911      	ldr	r1, [pc, #68]	; (801296c <etharp_output_to_arp_index+0x124>)
 8012928:	4613      	mov	r3, r2
 801292a:	005b      	lsls	r3, r3, #1
 801292c:	4413      	add	r3, r2
 801292e:	00db      	lsls	r3, r3, #3
 8012930:	440b      	add	r3, r1
 8012932:	3314      	adds	r3, #20
 8012934:	2203      	movs	r2, #3
 8012936:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801293e:	79fa      	ldrb	r2, [r7, #7]
 8012940:	4613      	mov	r3, r2
 8012942:	005b      	lsls	r3, r3, #1
 8012944:	4413      	add	r3, r2
 8012946:	00db      	lsls	r3, r3, #3
 8012948:	3308      	adds	r3, #8
 801294a:	4a08      	ldr	r2, [pc, #32]	; (801296c <etharp_output_to_arp_index+0x124>)
 801294c:	4413      	add	r3, r2
 801294e:	3304      	adds	r3, #4
 8012950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012954:	9200      	str	r2, [sp, #0]
 8012956:	460a      	mov	r2, r1
 8012958:	68b9      	ldr	r1, [r7, #8]
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f001 fe40 	bl	80145e0 <ethernet_output>
 8012960:	4603      	mov	r3, r0
}
 8012962:	4618      	mov	r0, r3
 8012964:	3710      	adds	r7, #16
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	20040b04 	.word	0x20040b04
 8012970:	08018d50 	.word	0x08018d50
 8012974:	08018ec0 	.word	0x08018ec0
 8012978:	08018dc8 	.word	0x08018dc8

0801297c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b08a      	sub	sp, #40	; 0x28
 8012980:	af02      	add	r7, sp, #8
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d106      	bne.n	80129a0 <etharp_output+0x24>
 8012992:	4b73      	ldr	r3, [pc, #460]	; (8012b60 <etharp_output+0x1e4>)
 8012994:	f240 321e 	movw	r2, #798	; 0x31e
 8012998:	4972      	ldr	r1, [pc, #456]	; (8012b64 <etharp_output+0x1e8>)
 801299a:	4873      	ldr	r0, [pc, #460]	; (8012b68 <etharp_output+0x1ec>)
 801299c:	f002 fd40 	bl	8015420 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d106      	bne.n	80129b4 <etharp_output+0x38>
 80129a6:	4b6e      	ldr	r3, [pc, #440]	; (8012b60 <etharp_output+0x1e4>)
 80129a8:	f240 321f 	movw	r2, #799	; 0x31f
 80129ac:	496f      	ldr	r1, [pc, #444]	; (8012b6c <etharp_output+0x1f0>)
 80129ae:	486e      	ldr	r0, [pc, #440]	; (8012b68 <etharp_output+0x1ec>)
 80129b0:	f002 fd36 	bl	8015420 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d106      	bne.n	80129c8 <etharp_output+0x4c>
 80129ba:	4b69      	ldr	r3, [pc, #420]	; (8012b60 <etharp_output+0x1e4>)
 80129bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80129c0:	496b      	ldr	r1, [pc, #428]	; (8012b70 <etharp_output+0x1f4>)
 80129c2:	4869      	ldr	r0, [pc, #420]	; (8012b68 <etharp_output+0x1ec>)
 80129c4:	f002 fd2c 	bl	8015420 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	68f9      	ldr	r1, [r7, #12]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f000 fef8 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 80129d4:	4603      	mov	r3, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d002      	beq.n	80129e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80129da:	4b66      	ldr	r3, [pc, #408]	; (8012b74 <etharp_output+0x1f8>)
 80129dc:	61fb      	str	r3, [r7, #28]
 80129de:	e0af      	b.n	8012b40 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80129e8:	2be0      	cmp	r3, #224	; 0xe0
 80129ea:	d118      	bne.n	8012a1e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80129ec:	2301      	movs	r3, #1
 80129ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80129f0:	2300      	movs	r3, #0
 80129f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80129f4:	235e      	movs	r3, #94	; 0x5e
 80129f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	3301      	adds	r3, #1
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	3302      	adds	r3, #2
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	3303      	adds	r3, #3
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012a16:	f107 0310 	add.w	r3, r7, #16
 8012a1a:	61fb      	str	r3, [r7, #28]
 8012a1c:	e090      	b.n	8012b40 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681a      	ldr	r2, [r3, #0]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	3304      	adds	r3, #4
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	405a      	eors	r2, r3
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	3308      	adds	r3, #8
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4013      	ands	r3, r2
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d012      	beq.n	8012a5c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012a3c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012a40:	4293      	cmp	r3, r2
 8012a42:	d00b      	beq.n	8012a5c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	330c      	adds	r3, #12
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d003      	beq.n	8012a56 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	330c      	adds	r3, #12
 8012a52:	61bb      	str	r3, [r7, #24]
 8012a54:	e002      	b.n	8012a5c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012a56:	f06f 0303 	mvn.w	r3, #3
 8012a5a:	e07d      	b.n	8012b58 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a5c:	4b46      	ldr	r3, [pc, #280]	; (8012b78 <etharp_output+0x1fc>)
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	4619      	mov	r1, r3
 8012a62:	4a46      	ldr	r2, [pc, #280]	; (8012b7c <etharp_output+0x200>)
 8012a64:	460b      	mov	r3, r1
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	440b      	add	r3, r1
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	4413      	add	r3, r2
 8012a6e:	3314      	adds	r3, #20
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d925      	bls.n	8012ac2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012a76:	4b40      	ldr	r3, [pc, #256]	; (8012b78 <etharp_output+0x1fc>)
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	4619      	mov	r1, r3
 8012a7c:	4a3f      	ldr	r2, [pc, #252]	; (8012b7c <etharp_output+0x200>)
 8012a7e:	460b      	mov	r3, r1
 8012a80:	005b      	lsls	r3, r3, #1
 8012a82:	440b      	add	r3, r1
 8012a84:	00db      	lsls	r3, r3, #3
 8012a86:	4413      	add	r3, r2
 8012a88:	3308      	adds	r3, #8
 8012a8a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012a8c:	68fa      	ldr	r2, [r7, #12]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d117      	bne.n	8012ac2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	4b38      	ldr	r3, [pc, #224]	; (8012b78 <etharp_output+0x1fc>)
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	4937      	ldr	r1, [pc, #220]	; (8012b7c <etharp_output+0x200>)
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	005b      	lsls	r3, r3, #1
 8012aa2:	4403      	add	r3, r0
 8012aa4:	00db      	lsls	r3, r3, #3
 8012aa6:	440b      	add	r3, r1
 8012aa8:	3304      	adds	r3, #4
 8012aaa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012aac:	429a      	cmp	r2, r3
 8012aae:	d108      	bne.n	8012ac2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012ab0:	4b31      	ldr	r3, [pc, #196]	; (8012b78 <etharp_output+0x1fc>)
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	68b9      	ldr	r1, [r7, #8]
 8012ab8:	68f8      	ldr	r0, [r7, #12]
 8012aba:	f7ff fec5 	bl	8012848 <etharp_output_to_arp_index>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	e04a      	b.n	8012b58 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	75fb      	strb	r3, [r7, #23]
 8012ac6:	e031      	b.n	8012b2c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012ac8:	7dfa      	ldrb	r2, [r7, #23]
 8012aca:	492c      	ldr	r1, [pc, #176]	; (8012b7c <etharp_output+0x200>)
 8012acc:	4613      	mov	r3, r2
 8012ace:	005b      	lsls	r3, r3, #1
 8012ad0:	4413      	add	r3, r2
 8012ad2:	00db      	lsls	r3, r3, #3
 8012ad4:	440b      	add	r3, r1
 8012ad6:	3314      	adds	r3, #20
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	2b01      	cmp	r3, #1
 8012adc:	d923      	bls.n	8012b26 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012ade:	7dfa      	ldrb	r2, [r7, #23]
 8012ae0:	4926      	ldr	r1, [pc, #152]	; (8012b7c <etharp_output+0x200>)
 8012ae2:	4613      	mov	r3, r2
 8012ae4:	005b      	lsls	r3, r3, #1
 8012ae6:	4413      	add	r3, r2
 8012ae8:	00db      	lsls	r3, r3, #3
 8012aea:	440b      	add	r3, r1
 8012aec:	3308      	adds	r3, #8
 8012aee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012af0:	68fa      	ldr	r2, [r7, #12]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d117      	bne.n	8012b26 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	6819      	ldr	r1, [r3, #0]
 8012afa:	7dfa      	ldrb	r2, [r7, #23]
 8012afc:	481f      	ldr	r0, [pc, #124]	; (8012b7c <etharp_output+0x200>)
 8012afe:	4613      	mov	r3, r2
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	4413      	add	r3, r2
 8012b04:	00db      	lsls	r3, r3, #3
 8012b06:	4403      	add	r3, r0
 8012b08:	3304      	adds	r3, #4
 8012b0a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012b0c:	4299      	cmp	r1, r3
 8012b0e:	d10a      	bne.n	8012b26 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012b10:	4a19      	ldr	r2, [pc, #100]	; (8012b78 <etharp_output+0x1fc>)
 8012b12:	7dfb      	ldrb	r3, [r7, #23]
 8012b14:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012b16:	7dfb      	ldrb	r3, [r7, #23]
 8012b18:	461a      	mov	r2, r3
 8012b1a:	68b9      	ldr	r1, [r7, #8]
 8012b1c:	68f8      	ldr	r0, [r7, #12]
 8012b1e:	f7ff fe93 	bl	8012848 <etharp_output_to_arp_index>
 8012b22:	4603      	mov	r3, r0
 8012b24:	e018      	b.n	8012b58 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012b26:	7dfb      	ldrb	r3, [r7, #23]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	75fb      	strb	r3, [r7, #23]
 8012b2c:	7dfb      	ldrb	r3, [r7, #23]
 8012b2e:	2b09      	cmp	r3, #9
 8012b30:	d9ca      	bls.n	8012ac8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012b32:	68ba      	ldr	r2, [r7, #8]
 8012b34:	69b9      	ldr	r1, [r7, #24]
 8012b36:	68f8      	ldr	r0, [r7, #12]
 8012b38:	f000 f822 	bl	8012b80 <etharp_query>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	e00b      	b.n	8012b58 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012b46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012b4a:	9300      	str	r3, [sp, #0]
 8012b4c:	69fb      	ldr	r3, [r7, #28]
 8012b4e:	68b9      	ldr	r1, [r7, #8]
 8012b50:	68f8      	ldr	r0, [r7, #12]
 8012b52:	f001 fd45 	bl	80145e0 <ethernet_output>
 8012b56:	4603      	mov	r3, r0
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3720      	adds	r7, #32
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	08018d50 	.word	0x08018d50
 8012b64:	08018ea0 	.word	0x08018ea0
 8012b68:	08018dc8 	.word	0x08018dc8
 8012b6c:	08018ef0 	.word	0x08018ef0
 8012b70:	08018e90 	.word	0x08018e90
 8012b74:	08019688 	.word	0x08019688
 8012b78:	20040bf4 	.word	0x20040bf4
 8012b7c:	20040b04 	.word	0x20040b04

08012b80 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b08c      	sub	sp, #48	; 0x30
 8012b84:	af02      	add	r7, sp, #8
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	60b9      	str	r1, [r7, #8]
 8012b8a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	3326      	adds	r3, #38	; 0x26
 8012b90:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012b92:	23ff      	movs	r3, #255	; 0xff
 8012b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012b98:	2300      	movs	r3, #0
 8012b9a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	68f9      	ldr	r1, [r7, #12]
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f000 fe0e 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d10c      	bne.n	8012bc8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012bb6:	2be0      	cmp	r3, #224	; 0xe0
 8012bb8:	d006      	beq.n	8012bc8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d003      	beq.n	8012bc8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	681b      	ldr	r3, [r3, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d102      	bne.n	8012bce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012bc8:	f06f 030f 	mvn.w	r3, #15
 8012bcc:	e101      	b.n	8012dd2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012bce:	68fa      	ldr	r2, [r7, #12]
 8012bd0:	2101      	movs	r1, #1
 8012bd2:	68b8      	ldr	r0, [r7, #8]
 8012bd4:	f7ff fb60 	bl	8012298 <etharp_find_entry>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012bdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	da02      	bge.n	8012bea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012be4:	8a7b      	ldrh	r3, [r7, #18]
 8012be6:	b25b      	sxtb	r3, r3
 8012be8:	e0f3      	b.n	8012dd2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012bea:	8a7b      	ldrh	r3, [r7, #18]
 8012bec:	2b7e      	cmp	r3, #126	; 0x7e
 8012bee:	d906      	bls.n	8012bfe <etharp_query+0x7e>
 8012bf0:	4b7a      	ldr	r3, [pc, #488]	; (8012ddc <etharp_query+0x25c>)
 8012bf2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012bf6:	497a      	ldr	r1, [pc, #488]	; (8012de0 <etharp_query+0x260>)
 8012bf8:	487a      	ldr	r0, [pc, #488]	; (8012de4 <etharp_query+0x264>)
 8012bfa:	f002 fc11 	bl	8015420 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012bfe:	8a7b      	ldrh	r3, [r7, #18]
 8012c00:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012c02:	7c7a      	ldrb	r2, [r7, #17]
 8012c04:	4978      	ldr	r1, [pc, #480]	; (8012de8 <etharp_query+0x268>)
 8012c06:	4613      	mov	r3, r2
 8012c08:	005b      	lsls	r3, r3, #1
 8012c0a:	4413      	add	r3, r2
 8012c0c:	00db      	lsls	r3, r3, #3
 8012c0e:	440b      	add	r3, r1
 8012c10:	3314      	adds	r3, #20
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d115      	bne.n	8012c44 <etharp_query+0xc4>
    is_new_entry = 1;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012c1c:	7c7a      	ldrb	r2, [r7, #17]
 8012c1e:	4972      	ldr	r1, [pc, #456]	; (8012de8 <etharp_query+0x268>)
 8012c20:	4613      	mov	r3, r2
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	4413      	add	r3, r2
 8012c26:	00db      	lsls	r3, r3, #3
 8012c28:	440b      	add	r3, r1
 8012c2a:	3314      	adds	r3, #20
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012c30:	7c7a      	ldrb	r2, [r7, #17]
 8012c32:	496d      	ldr	r1, [pc, #436]	; (8012de8 <etharp_query+0x268>)
 8012c34:	4613      	mov	r3, r2
 8012c36:	005b      	lsls	r3, r3, #1
 8012c38:	4413      	add	r3, r2
 8012c3a:	00db      	lsls	r3, r3, #3
 8012c3c:	440b      	add	r3, r1
 8012c3e:	3308      	adds	r3, #8
 8012c40:	68fa      	ldr	r2, [r7, #12]
 8012c42:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012c44:	7c7a      	ldrb	r2, [r7, #17]
 8012c46:	4968      	ldr	r1, [pc, #416]	; (8012de8 <etharp_query+0x268>)
 8012c48:	4613      	mov	r3, r2
 8012c4a:	005b      	lsls	r3, r3, #1
 8012c4c:	4413      	add	r3, r2
 8012c4e:	00db      	lsls	r3, r3, #3
 8012c50:	440b      	add	r3, r1
 8012c52:	3314      	adds	r3, #20
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	2b01      	cmp	r3, #1
 8012c58:	d011      	beq.n	8012c7e <etharp_query+0xfe>
 8012c5a:	7c7a      	ldrb	r2, [r7, #17]
 8012c5c:	4962      	ldr	r1, [pc, #392]	; (8012de8 <etharp_query+0x268>)
 8012c5e:	4613      	mov	r3, r2
 8012c60:	005b      	lsls	r3, r3, #1
 8012c62:	4413      	add	r3, r2
 8012c64:	00db      	lsls	r3, r3, #3
 8012c66:	440b      	add	r3, r1
 8012c68:	3314      	adds	r3, #20
 8012c6a:	781b      	ldrb	r3, [r3, #0]
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	d806      	bhi.n	8012c7e <etharp_query+0xfe>
 8012c70:	4b5a      	ldr	r3, [pc, #360]	; (8012ddc <etharp_query+0x25c>)
 8012c72:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012c76:	495d      	ldr	r1, [pc, #372]	; (8012dec <etharp_query+0x26c>)
 8012c78:	485a      	ldr	r0, [pc, #360]	; (8012de4 <etharp_query+0x264>)
 8012c7a:	f002 fbd1 	bl	8015420 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012c7e:	6a3b      	ldr	r3, [r7, #32]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d102      	bne.n	8012c8a <etharp_query+0x10a>
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d10c      	bne.n	8012ca4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012c8a:	68b9      	ldr	r1, [r7, #8]
 8012c8c:	68f8      	ldr	r0, [r7, #12]
 8012c8e:	f000 f963 	bl	8012f58 <etharp_request>
 8012c92:	4603      	mov	r3, r0
 8012c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d102      	bne.n	8012ca4 <etharp_query+0x124>
      return result;
 8012c9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ca2:	e096      	b.n	8012dd2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d106      	bne.n	8012cb8 <etharp_query+0x138>
 8012caa:	4b4c      	ldr	r3, [pc, #304]	; (8012ddc <etharp_query+0x25c>)
 8012cac:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012cb0:	494f      	ldr	r1, [pc, #316]	; (8012df0 <etharp_query+0x270>)
 8012cb2:	484c      	ldr	r0, [pc, #304]	; (8012de4 <etharp_query+0x264>)
 8012cb4:	f002 fbb4 	bl	8015420 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012cb8:	7c7a      	ldrb	r2, [r7, #17]
 8012cba:	494b      	ldr	r1, [pc, #300]	; (8012de8 <etharp_query+0x268>)
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	005b      	lsls	r3, r3, #1
 8012cc0:	4413      	add	r3, r2
 8012cc2:	00db      	lsls	r3, r3, #3
 8012cc4:	440b      	add	r3, r1
 8012cc6:	3314      	adds	r3, #20
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d917      	bls.n	8012cfe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012cce:	4a49      	ldr	r2, [pc, #292]	; (8012df4 <etharp_query+0x274>)
 8012cd0:	7c7b      	ldrb	r3, [r7, #17]
 8012cd2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012cd4:	7c7a      	ldrb	r2, [r7, #17]
 8012cd6:	4613      	mov	r3, r2
 8012cd8:	005b      	lsls	r3, r3, #1
 8012cda:	4413      	add	r3, r2
 8012cdc:	00db      	lsls	r3, r3, #3
 8012cde:	3308      	adds	r3, #8
 8012ce0:	4a41      	ldr	r2, [pc, #260]	; (8012de8 <etharp_query+0x268>)
 8012ce2:	4413      	add	r3, r2
 8012ce4:	3304      	adds	r3, #4
 8012ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012cea:	9200      	str	r2, [sp, #0]
 8012cec:	697a      	ldr	r2, [r7, #20]
 8012cee:	6879      	ldr	r1, [r7, #4]
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	f001 fc75 	bl	80145e0 <ethernet_output>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cfc:	e067      	b.n	8012dce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012cfe:	7c7a      	ldrb	r2, [r7, #17]
 8012d00:	4939      	ldr	r1, [pc, #228]	; (8012de8 <etharp_query+0x268>)
 8012d02:	4613      	mov	r3, r2
 8012d04:	005b      	lsls	r3, r3, #1
 8012d06:	4413      	add	r3, r2
 8012d08:	00db      	lsls	r3, r3, #3
 8012d0a:	440b      	add	r3, r1
 8012d0c:	3314      	adds	r3, #20
 8012d0e:	781b      	ldrb	r3, [r3, #0]
 8012d10:	2b01      	cmp	r3, #1
 8012d12:	d15c      	bne.n	8012dce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012d14:	2300      	movs	r3, #0
 8012d16:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012d1c:	e01c      	b.n	8012d58 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012d1e:	69fb      	ldr	r3, [r7, #28]
 8012d20:	895a      	ldrh	r2, [r3, #10]
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	891b      	ldrh	r3, [r3, #8]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d10a      	bne.n	8012d40 <etharp_query+0x1c0>
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d006      	beq.n	8012d40 <etharp_query+0x1c0>
 8012d32:	4b2a      	ldr	r3, [pc, #168]	; (8012ddc <etharp_query+0x25c>)
 8012d34:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012d38:	492f      	ldr	r1, [pc, #188]	; (8012df8 <etharp_query+0x278>)
 8012d3a:	482a      	ldr	r0, [pc, #168]	; (8012de4 <etharp_query+0x264>)
 8012d3c:	f002 fb70 	bl	8015420 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	7b1b      	ldrb	r3, [r3, #12]
 8012d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <etharp_query+0x1d2>
        copy_needed = 1;
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	61bb      	str	r3, [r7, #24]
        break;
 8012d50:	e005      	b.n	8012d5e <etharp_query+0x1de>
      }
      p = p->next;
 8012d52:	69fb      	ldr	r3, [r7, #28]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d1df      	bne.n	8012d1e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d007      	beq.n	8012d74 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012d6a:	200e      	movs	r0, #14
 8012d6c:	f7f9 f8fe 	bl	800bf6c <pbuf_clone>
 8012d70:	61f8      	str	r0, [r7, #28]
 8012d72:	e004      	b.n	8012d7e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012d78:	69f8      	ldr	r0, [r7, #28]
 8012d7a:	f7f8 fefb 	bl	800bb74 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d021      	beq.n	8012dc8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012d84:	7c7a      	ldrb	r2, [r7, #17]
 8012d86:	4918      	ldr	r1, [pc, #96]	; (8012de8 <etharp_query+0x268>)
 8012d88:	4613      	mov	r3, r2
 8012d8a:	005b      	lsls	r3, r3, #1
 8012d8c:	4413      	add	r3, r2
 8012d8e:	00db      	lsls	r3, r3, #3
 8012d90:	440b      	add	r3, r1
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d00a      	beq.n	8012dae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012d98:	7c7a      	ldrb	r2, [r7, #17]
 8012d9a:	4913      	ldr	r1, [pc, #76]	; (8012de8 <etharp_query+0x268>)
 8012d9c:	4613      	mov	r3, r2
 8012d9e:	005b      	lsls	r3, r3, #1
 8012da0:	4413      	add	r3, r2
 8012da2:	00db      	lsls	r3, r3, #3
 8012da4:	440b      	add	r3, r1
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7f8 fe3d 	bl	800ba28 <pbuf_free>
      }
      arp_table[i].q = p;
 8012dae:	7c7a      	ldrb	r2, [r7, #17]
 8012db0:	490d      	ldr	r1, [pc, #52]	; (8012de8 <etharp_query+0x268>)
 8012db2:	4613      	mov	r3, r2
 8012db4:	005b      	lsls	r3, r3, #1
 8012db6:	4413      	add	r3, r2
 8012db8:	00db      	lsls	r3, r3, #3
 8012dba:	440b      	add	r3, r1
 8012dbc:	69fa      	ldr	r2, [r7, #28]
 8012dbe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012dc6:	e002      	b.n	8012dce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012dc8:	23ff      	movs	r3, #255	; 0xff
 8012dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3728      	adds	r7, #40	; 0x28
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	08018d50 	.word	0x08018d50
 8012de0:	08018efc 	.word	0x08018efc
 8012de4:	08018dc8 	.word	0x08018dc8
 8012de8:	20040b04 	.word	0x20040b04
 8012dec:	08018f0c 	.word	0x08018f0c
 8012df0:	08018ef0 	.word	0x08018ef0
 8012df4:	20040bf4 	.word	0x20040bf4
 8012df8:	08018f34 	.word	0x08018f34

08012dfc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b08a      	sub	sp, #40	; 0x28
 8012e00:	af02      	add	r7, sp, #8
 8012e02:	60f8      	str	r0, [r7, #12]
 8012e04:	60b9      	str	r1, [r7, #8]
 8012e06:	607a      	str	r2, [r7, #4]
 8012e08:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d106      	bne.n	8012e22 <etharp_raw+0x26>
 8012e14:	4b3a      	ldr	r3, [pc, #232]	; (8012f00 <etharp_raw+0x104>)
 8012e16:	f240 4257 	movw	r2, #1111	; 0x457
 8012e1a:	493a      	ldr	r1, [pc, #232]	; (8012f04 <etharp_raw+0x108>)
 8012e1c:	483a      	ldr	r0, [pc, #232]	; (8012f08 <etharp_raw+0x10c>)
 8012e1e:	f002 faff 	bl	8015420 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012e22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e26:	211c      	movs	r1, #28
 8012e28:	200e      	movs	r0, #14
 8012e2a:	f7f8 fb1b 	bl	800b464 <pbuf_alloc>
 8012e2e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012e30:	69bb      	ldr	r3, [r7, #24]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d102      	bne.n	8012e3c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012e36:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3a:	e05d      	b.n	8012ef8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012e3c:	69bb      	ldr	r3, [r7, #24]
 8012e3e:	895b      	ldrh	r3, [r3, #10]
 8012e40:	2b1b      	cmp	r3, #27
 8012e42:	d806      	bhi.n	8012e52 <etharp_raw+0x56>
 8012e44:	4b2e      	ldr	r3, [pc, #184]	; (8012f00 <etharp_raw+0x104>)
 8012e46:	f240 4262 	movw	r2, #1122	; 0x462
 8012e4a:	4930      	ldr	r1, [pc, #192]	; (8012f0c <etharp_raw+0x110>)
 8012e4c:	482e      	ldr	r0, [pc, #184]	; (8012f08 <etharp_raw+0x10c>)
 8012e4e:	f002 fae7 	bl	8015420 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012e52:	69bb      	ldr	r3, [r7, #24]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012e58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7f7 fa06 	bl	800a26c <lwip_htons>
 8012e60:	4603      	mov	r3, r0
 8012e62:	461a      	mov	r2, r3
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012e6e:	2b06      	cmp	r3, #6
 8012e70:	d006      	beq.n	8012e80 <etharp_raw+0x84>
 8012e72:	4b23      	ldr	r3, [pc, #140]	; (8012f00 <etharp_raw+0x104>)
 8012e74:	f240 4269 	movw	r2, #1129	; 0x469
 8012e78:	4925      	ldr	r1, [pc, #148]	; (8012f10 <etharp_raw+0x114>)
 8012e7a:	4823      	ldr	r0, [pc, #140]	; (8012f08 <etharp_raw+0x10c>)
 8012e7c:	f002 fad0 	bl	8015420 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	3308      	adds	r3, #8
 8012e84:	2206      	movs	r2, #6
 8012e86:	6839      	ldr	r1, [r7, #0]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f002 fa04 	bl	8015296 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	3312      	adds	r3, #18
 8012e92:	2206      	movs	r2, #6
 8012e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e96:	4618      	mov	r0, r3
 8012e98:	f002 f9fd 	bl	8015296 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	330e      	adds	r3, #14
 8012ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012ea2:	6812      	ldr	r2, [r2, #0]
 8012ea4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012ea6:	697b      	ldr	r3, [r7, #20]
 8012ea8:	3318      	adds	r3, #24
 8012eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012eac:	6812      	ldr	r2, [r2, #0]
 8012eae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	2200      	movs	r2, #0
 8012eb4:	701a      	strb	r2, [r3, #0]
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	f042 0201 	orr.w	r2, r2, #1
 8012ebc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	f042 0208 	orr.w	r2, r2, #8
 8012ec6:	709a      	strb	r2, [r3, #2]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	2206      	movs	r2, #6
 8012ed0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	2204      	movs	r2, #4
 8012ed6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012ed8:	f640 0306 	movw	r3, #2054	; 0x806
 8012edc:	9300      	str	r3, [sp, #0]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	68ba      	ldr	r2, [r7, #8]
 8012ee2:	69b9      	ldr	r1, [r7, #24]
 8012ee4:	68f8      	ldr	r0, [r7, #12]
 8012ee6:	f001 fb7b 	bl	80145e0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012eea:	69b8      	ldr	r0, [r7, #24]
 8012eec:	f7f8 fd9c 	bl	800ba28 <pbuf_free>
  p = NULL;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012ef4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3720      	adds	r7, #32
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	08018d50 	.word	0x08018d50
 8012f04:	08018ea0 	.word	0x08018ea0
 8012f08:	08018dc8 	.word	0x08018dc8
 8012f0c:	08018f50 	.word	0x08018f50
 8012f10:	08018f84 	.word	0x08018f84

08012f14 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b088      	sub	sp, #32
 8012f18:	af04      	add	r7, sp, #16
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012f30:	2201      	movs	r2, #1
 8012f32:	9203      	str	r2, [sp, #12]
 8012f34:	68ba      	ldr	r2, [r7, #8]
 8012f36:	9202      	str	r2, [sp, #8]
 8012f38:	4a06      	ldr	r2, [pc, #24]	; (8012f54 <etharp_request_dst+0x40>)
 8012f3a:	9201      	str	r2, [sp, #4]
 8012f3c:	9300      	str	r3, [sp, #0]
 8012f3e:	4603      	mov	r3, r0
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	68f8      	ldr	r0, [r7, #12]
 8012f44:	f7ff ff5a 	bl	8012dfc <etharp_raw>
 8012f48:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3710      	adds	r7, #16
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	08019690 	.word	0x08019690

08012f58 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012f62:	4a05      	ldr	r2, [pc, #20]	; (8012f78 <etharp_request+0x20>)
 8012f64:	6839      	ldr	r1, [r7, #0]
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f7ff ffd4 	bl	8012f14 <etharp_request_dst>
 8012f6c:	4603      	mov	r3, r0
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	bf00      	nop
 8012f78:	08019688 	.word	0x08019688

08012f7c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b08e      	sub	sp, #56	; 0x38
 8012f80:	af04      	add	r7, sp, #16
 8012f82:	6078      	str	r0, [r7, #4]
 8012f84:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012f86:	4b79      	ldr	r3, [pc, #484]	; (801316c <icmp_input+0x1f0>)
 8012f88:	689b      	ldr	r3, [r3, #8]
 8012f8a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	f003 030f 	and.w	r3, r3, #15
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	b2db      	uxtb	r3, r3
 8012f9a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012f9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f9e:	2b13      	cmp	r3, #19
 8012fa0:	f240 80cd 	bls.w	801313e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	895b      	ldrh	r3, [r3, #10]
 8012fa8:	2b03      	cmp	r3, #3
 8012faa:	f240 80ca 	bls.w	8013142 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	685b      	ldr	r3, [r3, #4]
 8012fb2:	781b      	ldrb	r3, [r3, #0]
 8012fb4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012fb8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	f000 80b7 	beq.w	8013130 <icmp_input+0x1b4>
 8012fc2:	2b08      	cmp	r3, #8
 8012fc4:	f040 80b7 	bne.w	8013136 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012fc8:	4b69      	ldr	r3, [pc, #420]	; (8013170 <icmp_input+0x1f4>)
 8012fca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012fcc:	4b67      	ldr	r3, [pc, #412]	; (801316c <icmp_input+0x1f0>)
 8012fce:	695b      	ldr	r3, [r3, #20]
 8012fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012fd4:	2be0      	cmp	r3, #224	; 0xe0
 8012fd6:	f000 80bb 	beq.w	8013150 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012fda:	4b64      	ldr	r3, [pc, #400]	; (801316c <icmp_input+0x1f0>)
 8012fdc:	695b      	ldr	r3, [r3, #20]
 8012fde:	4a63      	ldr	r2, [pc, #396]	; (801316c <icmp_input+0x1f0>)
 8012fe0:	6812      	ldr	r2, [r2, #0]
 8012fe2:	4611      	mov	r1, r2
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f000 fbed 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	f040 80b1 	bne.w	8013154 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	891b      	ldrh	r3, [r3, #8]
 8012ff6:	2b07      	cmp	r3, #7
 8012ff8:	f240 80a5 	bls.w	8013146 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012ffc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ffe:	330e      	adds	r3, #14
 8013000:	4619      	mov	r1, r3
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f7f8 fc7a 	bl	800b8fc <pbuf_add_header>
 8013008:	4603      	mov	r3, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	d04b      	beq.n	80130a6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	891a      	ldrh	r2, [r3, #8]
 8013012:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013014:	4413      	add	r3, r2
 8013016:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	891b      	ldrh	r3, [r3, #8]
 801301c:	8b7a      	ldrh	r2, [r7, #26]
 801301e:	429a      	cmp	r2, r3
 8013020:	f0c0 809a 	bcc.w	8013158 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013024:	8b7b      	ldrh	r3, [r7, #26]
 8013026:	f44f 7220 	mov.w	r2, #640	; 0x280
 801302a:	4619      	mov	r1, r3
 801302c:	200e      	movs	r0, #14
 801302e:	f7f8 fa19 	bl	800b464 <pbuf_alloc>
 8013032:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 8090 	beq.w	801315c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	895b      	ldrh	r3, [r3, #10]
 8013040:	461a      	mov	r2, r3
 8013042:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013044:	3308      	adds	r3, #8
 8013046:	429a      	cmp	r2, r3
 8013048:	d203      	bcs.n	8013052 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801304a:	6978      	ldr	r0, [r7, #20]
 801304c:	f7f8 fcec 	bl	800ba28 <pbuf_free>
          goto icmperr;
 8013050:	e085      	b.n	801315e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013058:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801305a:	4618      	mov	r0, r3
 801305c:	f002 f91b 	bl	8015296 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013062:	4619      	mov	r1, r3
 8013064:	6978      	ldr	r0, [r7, #20]
 8013066:	f7f8 fc59 	bl	800b91c <pbuf_remove_header>
 801306a:	4603      	mov	r3, r0
 801306c:	2b00      	cmp	r3, #0
 801306e:	d009      	beq.n	8013084 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013070:	4b40      	ldr	r3, [pc, #256]	; (8013174 <icmp_input+0x1f8>)
 8013072:	22b6      	movs	r2, #182	; 0xb6
 8013074:	4940      	ldr	r1, [pc, #256]	; (8013178 <icmp_input+0x1fc>)
 8013076:	4841      	ldr	r0, [pc, #260]	; (801317c <icmp_input+0x200>)
 8013078:	f002 f9d2 	bl	8015420 <iprintf>
          pbuf_free(r);
 801307c:	6978      	ldr	r0, [r7, #20]
 801307e:	f7f8 fcd3 	bl	800ba28 <pbuf_free>
          goto icmperr;
 8013082:	e06c      	b.n	801315e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013084:	6879      	ldr	r1, [r7, #4]
 8013086:	6978      	ldr	r0, [r7, #20]
 8013088:	f7f8 fe02 	bl	800bc90 <pbuf_copy>
 801308c:	4603      	mov	r3, r0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013092:	6978      	ldr	r0, [r7, #20]
 8013094:	f7f8 fcc8 	bl	800ba28 <pbuf_free>
          goto icmperr;
 8013098:	e061      	b.n	801315e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f7f8 fcc4 	bl	800ba28 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	607b      	str	r3, [r7, #4]
 80130a4:	e00f      	b.n	80130c6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80130a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130a8:	330e      	adds	r3, #14
 80130aa:	4619      	mov	r1, r3
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f7f8 fc35 	bl	800b91c <pbuf_remove_header>
 80130b2:	4603      	mov	r3, r0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d006      	beq.n	80130c6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80130b8:	4b2e      	ldr	r3, [pc, #184]	; (8013174 <icmp_input+0x1f8>)
 80130ba:	22c7      	movs	r2, #199	; 0xc7
 80130bc:	4930      	ldr	r1, [pc, #192]	; (8013180 <icmp_input+0x204>)
 80130be:	482f      	ldr	r0, [pc, #188]	; (801317c <icmp_input+0x200>)
 80130c0:	f002 f9ae 	bl	8015420 <iprintf>
          goto icmperr;
 80130c4:	e04b      	b.n	801315e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	685b      	ldr	r3, [r3, #4]
 80130ca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80130cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80130ce:	4619      	mov	r1, r3
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f7f8 fc13 	bl	800b8fc <pbuf_add_header>
 80130d6:	4603      	mov	r3, r0
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d12b      	bne.n	8013134 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80130e2:	69fb      	ldr	r3, [r7, #28]
 80130e4:	681a      	ldr	r2, [r3, #0]
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80130ea:	4b20      	ldr	r3, [pc, #128]	; (801316c <icmp_input+0x1f0>)
 80130ec:	691a      	ldr	r2, [r3, #16]
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	2200      	movs	r2, #0
 80130f6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	2200      	movs	r2, #0
 80130fc:	709a      	strb	r2, [r3, #2]
 80130fe:	2200      	movs	r2, #0
 8013100:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	22ff      	movs	r2, #255	; 0xff
 8013106:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	2200      	movs	r2, #0
 801310c:	729a      	strb	r2, [r3, #10]
 801310e:	2200      	movs	r2, #0
 8013110:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	9302      	str	r3, [sp, #8]
 8013116:	2301      	movs	r3, #1
 8013118:	9301      	str	r3, [sp, #4]
 801311a:	2300      	movs	r3, #0
 801311c:	9300      	str	r3, [sp, #0]
 801311e:	23ff      	movs	r3, #255	; 0xff
 8013120:	2200      	movs	r2, #0
 8013122:	69f9      	ldr	r1, [r7, #28]
 8013124:	6878      	ldr	r0, [r7, #4]
 8013126:	f000 fa75 	bl	8013614 <ip4_output_if>
 801312a:	4603      	mov	r3, r0
 801312c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801312e:	e001      	b.n	8013134 <icmp_input+0x1b8>
      break;
 8013130:	bf00      	nop
 8013132:	e000      	b.n	8013136 <icmp_input+0x1ba>
      break;
 8013134:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f7f8 fc76 	bl	800ba28 <pbuf_free>
  return;
 801313c:	e013      	b.n	8013166 <icmp_input+0x1ea>
    goto lenerr;
 801313e:	bf00      	nop
 8013140:	e002      	b.n	8013148 <icmp_input+0x1cc>
    goto lenerr;
 8013142:	bf00      	nop
 8013144:	e000      	b.n	8013148 <icmp_input+0x1cc>
        goto lenerr;
 8013146:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f7f8 fc6d 	bl	800ba28 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801314e:	e00a      	b.n	8013166 <icmp_input+0x1ea>
        goto icmperr;
 8013150:	bf00      	nop
 8013152:	e004      	b.n	801315e <icmp_input+0x1e2>
        goto icmperr;
 8013154:	bf00      	nop
 8013156:	e002      	b.n	801315e <icmp_input+0x1e2>
          goto icmperr;
 8013158:	bf00      	nop
 801315a:	e000      	b.n	801315e <icmp_input+0x1e2>
          goto icmperr;
 801315c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7f8 fc62 	bl	800ba28 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013164:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013166:	3728      	adds	r7, #40	; 0x28
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	200252e8 	.word	0x200252e8
 8013170:	200252fc 	.word	0x200252fc
 8013174:	08018fc8 	.word	0x08018fc8
 8013178:	08019000 	.word	0x08019000
 801317c:	08019038 	.word	0x08019038
 8013180:	08019060 	.word	0x08019060

08013184 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
 801318c:	460b      	mov	r3, r1
 801318e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013190:	78fb      	ldrb	r3, [r7, #3]
 8013192:	461a      	mov	r2, r3
 8013194:	2103      	movs	r1, #3
 8013196:	6878      	ldr	r0, [r7, #4]
 8013198:	f000 f814 	bl	80131c4 <icmp_send_response>
}
 801319c:	bf00      	nop
 801319e:	3708      	adds	r7, #8
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}

080131a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
 80131ac:	460b      	mov	r3, r1
 80131ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80131b0:	78fb      	ldrb	r3, [r7, #3]
 80131b2:	461a      	mov	r2, r3
 80131b4:	210b      	movs	r1, #11
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f000 f804 	bl	80131c4 <icmp_send_response>
}
 80131bc:	bf00      	nop
 80131be:	3708      	adds	r7, #8
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b08c      	sub	sp, #48	; 0x30
 80131c8:	af04      	add	r7, sp, #16
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	460b      	mov	r3, r1
 80131ce:	70fb      	strb	r3, [r7, #3]
 80131d0:	4613      	mov	r3, r2
 80131d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80131d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80131d8:	2124      	movs	r1, #36	; 0x24
 80131da:	2022      	movs	r0, #34	; 0x22
 80131dc:	f7f8 f942 	bl	800b464 <pbuf_alloc>
 80131e0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80131e2:	69fb      	ldr	r3, [r7, #28]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d04c      	beq.n	8013282 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	895b      	ldrh	r3, [r3, #10]
 80131ec:	2b23      	cmp	r3, #35	; 0x23
 80131ee:	d806      	bhi.n	80131fe <icmp_send_response+0x3a>
 80131f0:	4b26      	ldr	r3, [pc, #152]	; (801328c <icmp_send_response+0xc8>)
 80131f2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80131f6:	4926      	ldr	r1, [pc, #152]	; (8013290 <icmp_send_response+0xcc>)
 80131f8:	4826      	ldr	r0, [pc, #152]	; (8013294 <icmp_send_response+0xd0>)
 80131fa:	f002 f911 	bl	8015420 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	78fa      	ldrb	r2, [r7, #3]
 801320e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	78ba      	ldrb	r2, [r7, #2]
 8013214:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	2200      	movs	r2, #0
 801321a:	711a      	strb	r2, [r3, #4]
 801321c:	2200      	movs	r2, #0
 801321e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	2200      	movs	r2, #0
 8013224:	719a      	strb	r2, [r3, #6]
 8013226:	2200      	movs	r2, #0
 8013228:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	685b      	ldr	r3, [r3, #4]
 801322e:	f103 0008 	add.w	r0, r3, #8
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	685b      	ldr	r3, [r3, #4]
 8013236:	221c      	movs	r2, #28
 8013238:	4619      	mov	r1, r3
 801323a:	f002 f82c 	bl	8015296 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801323e:	69bb      	ldr	r3, [r7, #24]
 8013240:	68db      	ldr	r3, [r3, #12]
 8013242:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013244:	f107 030c 	add.w	r3, r7, #12
 8013248:	4618      	mov	r0, r3
 801324a:	f000 f825 	bl	8013298 <ip4_route>
 801324e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d011      	beq.n	801327a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013256:	697b      	ldr	r3, [r7, #20]
 8013258:	2200      	movs	r2, #0
 801325a:	709a      	strb	r2, [r3, #2]
 801325c:	2200      	movs	r2, #0
 801325e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013260:	f107 020c 	add.w	r2, r7, #12
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	9302      	str	r3, [sp, #8]
 8013268:	2301      	movs	r3, #1
 801326a:	9301      	str	r3, [sp, #4]
 801326c:	2300      	movs	r3, #0
 801326e:	9300      	str	r3, [sp, #0]
 8013270:	23ff      	movs	r3, #255	; 0xff
 8013272:	2100      	movs	r1, #0
 8013274:	69f8      	ldr	r0, [r7, #28]
 8013276:	f000 f9cd 	bl	8013614 <ip4_output_if>
  }
  pbuf_free(q);
 801327a:	69f8      	ldr	r0, [r7, #28]
 801327c:	f7f8 fbd4 	bl	800ba28 <pbuf_free>
 8013280:	e000      	b.n	8013284 <icmp_send_response+0xc0>
    return;
 8013282:	bf00      	nop
}
 8013284:	3720      	adds	r7, #32
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	08018fc8 	.word	0x08018fc8
 8013290:	08019094 	.word	0x08019094
 8013294:	08019038 	.word	0x08019038

08013298 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013298:	b480      	push	{r7}
 801329a:	b085      	sub	sp, #20
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80132a0:	4b33      	ldr	r3, [pc, #204]	; (8013370 <ip4_route+0xd8>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	60fb      	str	r3, [r7, #12]
 80132a6:	e036      	b.n	8013316 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132ae:	f003 0301 	and.w	r3, r3, #1
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d02b      	beq.n	8013310 <ip4_route+0x78>
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132be:	089b      	lsrs	r3, r3, #2
 80132c0:	f003 0301 	and.w	r3, r3, #1
 80132c4:	b2db      	uxtb	r3, r3
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d022      	beq.n	8013310 <ip4_route+0x78>
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	3304      	adds	r3, #4
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d01d      	beq.n	8013310 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681a      	ldr	r2, [r3, #0]
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	3304      	adds	r3, #4
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	405a      	eors	r2, r3
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	3308      	adds	r3, #8
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	4013      	ands	r3, r2
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d101      	bne.n	80132f0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	e038      	b.n	8013362 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80132f6:	f003 0302 	and.w	r3, r3, #2
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d108      	bne.n	8013310 <ip4_route+0x78>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	330c      	adds	r3, #12
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	429a      	cmp	r2, r3
 801330a:	d101      	bne.n	8013310 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	e028      	b.n	8013362 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	60fb      	str	r3, [r7, #12]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d1c5      	bne.n	80132a8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801331c:	4b15      	ldr	r3, [pc, #84]	; (8013374 <ip4_route+0xdc>)
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d01a      	beq.n	801335a <ip4_route+0xc2>
 8013324:	4b13      	ldr	r3, [pc, #76]	; (8013374 <ip4_route+0xdc>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801332c:	f003 0301 	and.w	r3, r3, #1
 8013330:	2b00      	cmp	r3, #0
 8013332:	d012      	beq.n	801335a <ip4_route+0xc2>
 8013334:	4b0f      	ldr	r3, [pc, #60]	; (8013374 <ip4_route+0xdc>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801333c:	f003 0304 	and.w	r3, r3, #4
 8013340:	2b00      	cmp	r3, #0
 8013342:	d00a      	beq.n	801335a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013344:	4b0b      	ldr	r3, [pc, #44]	; (8013374 <ip4_route+0xdc>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	3304      	adds	r3, #4
 801334a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801334c:	2b00      	cmp	r3, #0
 801334e:	d004      	beq.n	801335a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	b2db      	uxtb	r3, r3
 8013356:	2b7f      	cmp	r3, #127	; 0x7f
 8013358:	d101      	bne.n	801335e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801335a:	2300      	movs	r3, #0
 801335c:	e001      	b.n	8013362 <ip4_route+0xca>
  }

  return netif_default;
 801335e:	4b05      	ldr	r3, [pc, #20]	; (8013374 <ip4_route+0xdc>)
 8013360:	681b      	ldr	r3, [r3, #0]
}
 8013362:	4618      	mov	r0, r3
 8013364:	3714      	adds	r7, #20
 8013366:	46bd      	mov	sp, r7
 8013368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336c:	4770      	bx	lr
 801336e:	bf00      	nop
 8013370:	20040a98 	.word	0x20040a98
 8013374:	20040a9c 	.word	0x20040a9c

08013378 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013386:	f003 0301 	and.w	r3, r3, #1
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d016      	beq.n	80133be <ip4_input_accept+0x46>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	3304      	adds	r3, #4
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d011      	beq.n	80133be <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801339a:	4b0b      	ldr	r3, [pc, #44]	; (80133c8 <ip4_input_accept+0x50>)
 801339c:	695a      	ldr	r2, [r3, #20]
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	3304      	adds	r3, #4
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d008      	beq.n	80133ba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80133a8:	4b07      	ldr	r3, [pc, #28]	; (80133c8 <ip4_input_accept+0x50>)
 80133aa:	695b      	ldr	r3, [r3, #20]
 80133ac:	6879      	ldr	r1, [r7, #4]
 80133ae:	4618      	mov	r0, r3
 80133b0:	f000 fa08 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 80133b4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d001      	beq.n	80133be <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80133ba:	2301      	movs	r3, #1
 80133bc:	e000      	b.n	80133c0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80133be:	2300      	movs	r3, #0
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	200252e8 	.word	0x200252e8

080133cc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b086      	sub	sp, #24
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	091b      	lsrs	r3, r3, #4
 80133e2:	b2db      	uxtb	r3, r3
 80133e4:	2b04      	cmp	r3, #4
 80133e6:	d004      	beq.n	80133f2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f7f8 fb1d 	bl	800ba28 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80133ee:	2300      	movs	r3, #0
 80133f0:	e107      	b.n	8013602 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	f003 030f 	and.w	r3, r3, #15
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	b2db      	uxtb	r3, r3
 8013400:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	885b      	ldrh	r3, [r3, #2]
 8013406:	b29b      	uxth	r3, r3
 8013408:	4618      	mov	r0, r3
 801340a:	f7f6 ff2f 	bl	800a26c <lwip_htons>
 801340e:	4603      	mov	r3, r0
 8013410:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	891b      	ldrh	r3, [r3, #8]
 8013416:	89ba      	ldrh	r2, [r7, #12]
 8013418:	429a      	cmp	r2, r3
 801341a:	d204      	bcs.n	8013426 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801341c:	89bb      	ldrh	r3, [r7, #12]
 801341e:	4619      	mov	r1, r3
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f7f8 f97d 	bl	800b720 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	895b      	ldrh	r3, [r3, #10]
 801342a:	89fa      	ldrh	r2, [r7, #14]
 801342c:	429a      	cmp	r2, r3
 801342e:	d807      	bhi.n	8013440 <ip4_input+0x74>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	891b      	ldrh	r3, [r3, #8]
 8013434:	89ba      	ldrh	r2, [r7, #12]
 8013436:	429a      	cmp	r2, r3
 8013438:	d802      	bhi.n	8013440 <ip4_input+0x74>
 801343a:	89fb      	ldrh	r3, [r7, #14]
 801343c:	2b13      	cmp	r3, #19
 801343e:	d804      	bhi.n	801344a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f7f8 faf1 	bl	800ba28 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013446:	2300      	movs	r3, #0
 8013448:	e0db      	b.n	8013602 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801344a:	697b      	ldr	r3, [r7, #20]
 801344c:	691b      	ldr	r3, [r3, #16]
 801344e:	4a6f      	ldr	r2, [pc, #444]	; (801360c <ip4_input+0x240>)
 8013450:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	68db      	ldr	r3, [r3, #12]
 8013456:	4a6d      	ldr	r2, [pc, #436]	; (801360c <ip4_input+0x240>)
 8013458:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801345a:	4b6c      	ldr	r3, [pc, #432]	; (801360c <ip4_input+0x240>)
 801345c:	695b      	ldr	r3, [r3, #20]
 801345e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013462:	2be0      	cmp	r3, #224	; 0xe0
 8013464:	d112      	bne.n	801348c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801346c:	f003 0301 	and.w	r3, r3, #1
 8013470:	b2db      	uxtb	r3, r3
 8013472:	2b00      	cmp	r3, #0
 8013474:	d007      	beq.n	8013486 <ip4_input+0xba>
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	3304      	adds	r3, #4
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d002      	beq.n	8013486 <ip4_input+0xba>
      netif = inp;
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	613b      	str	r3, [r7, #16]
 8013484:	e02a      	b.n	80134dc <ip4_input+0x110>
    } else {
      netif = NULL;
 8013486:	2300      	movs	r3, #0
 8013488:	613b      	str	r3, [r7, #16]
 801348a:	e027      	b.n	80134dc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801348c:	6838      	ldr	r0, [r7, #0]
 801348e:	f7ff ff73 	bl	8013378 <ip4_input_accept>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d002      	beq.n	801349e <ip4_input+0xd2>
      netif = inp;
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	613b      	str	r3, [r7, #16]
 801349c:	e01e      	b.n	80134dc <ip4_input+0x110>
    } else {
      netif = NULL;
 801349e:	2300      	movs	r3, #0
 80134a0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80134a2:	4b5a      	ldr	r3, [pc, #360]	; (801360c <ip4_input+0x240>)
 80134a4:	695b      	ldr	r3, [r3, #20]
 80134a6:	b2db      	uxtb	r3, r3
 80134a8:	2b7f      	cmp	r3, #127	; 0x7f
 80134aa:	d017      	beq.n	80134dc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80134ac:	4b58      	ldr	r3, [pc, #352]	; (8013610 <ip4_input+0x244>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	613b      	str	r3, [r7, #16]
 80134b2:	e00e      	b.n	80134d2 <ip4_input+0x106>
          if (netif == inp) {
 80134b4:	693a      	ldr	r2, [r7, #16]
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d006      	beq.n	80134ca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80134bc:	6938      	ldr	r0, [r7, #16]
 80134be:	f7ff ff5b 	bl	8013378 <ip4_input_accept>
 80134c2:	4603      	mov	r3, r0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d108      	bne.n	80134da <ip4_input+0x10e>
 80134c8:	e000      	b.n	80134cc <ip4_input+0x100>
            continue;
 80134ca:	bf00      	nop
        NETIF_FOREACH(netif) {
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	613b      	str	r3, [r7, #16]
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d1ed      	bne.n	80134b4 <ip4_input+0xe8>
 80134d8:	e000      	b.n	80134dc <ip4_input+0x110>
            break;
 80134da:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134dc:	4b4b      	ldr	r3, [pc, #300]	; (801360c <ip4_input+0x240>)
 80134de:	691b      	ldr	r3, [r3, #16]
 80134e0:	6839      	ldr	r1, [r7, #0]
 80134e2:	4618      	mov	r0, r3
 80134e4:	f000 f96e 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d105      	bne.n	80134fa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80134ee:	4b47      	ldr	r3, [pc, #284]	; (801360c <ip4_input+0x240>)
 80134f0:	691b      	ldr	r3, [r3, #16]
 80134f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80134f6:	2be0      	cmp	r3, #224	; 0xe0
 80134f8:	d104      	bne.n	8013504 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80134fa:	6878      	ldr	r0, [r7, #4]
 80134fc:	f7f8 fa94 	bl	800ba28 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013500:	2300      	movs	r3, #0
 8013502:	e07e      	b.n	8013602 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d104      	bne.n	8013514 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f7f8 fa8c 	bl	800ba28 <pbuf_free>
    return ERR_OK;
 8013510:	2300      	movs	r3, #0
 8013512:	e076      	b.n	8013602 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	88db      	ldrh	r3, [r3, #6]
 8013518:	b29b      	uxth	r3, r3
 801351a:	461a      	mov	r2, r3
 801351c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013520:	4013      	ands	r3, r2
 8013522:	2b00      	cmp	r3, #0
 8013524:	d00b      	beq.n	801353e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f000 fc92 	bl	8013e50 <ip4_reass>
 801352c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d101      	bne.n	8013538 <ip4_input+0x16c>
      return ERR_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	e064      	b.n	8013602 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	685b      	ldr	r3, [r3, #4]
 801353c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801353e:	4a33      	ldr	r2, [pc, #204]	; (801360c <ip4_input+0x240>)
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013544:	4a31      	ldr	r2, [pc, #196]	; (801360c <ip4_input+0x240>)
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801354a:	4a30      	ldr	r2, [pc, #192]	; (801360c <ip4_input+0x240>)
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	f003 030f 	and.w	r3, r3, #15
 8013558:	b2db      	uxtb	r3, r3
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	b2db      	uxtb	r3, r3
 801355e:	b29a      	uxth	r2, r3
 8013560:	4b2a      	ldr	r3, [pc, #168]	; (801360c <ip4_input+0x240>)
 8013562:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013564:	89fb      	ldrh	r3, [r7, #14]
 8013566:	4619      	mov	r1, r3
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f7f8 f9d7 	bl	800b91c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	7a5b      	ldrb	r3, [r3, #9]
 8013572:	2b11      	cmp	r3, #17
 8013574:	d006      	beq.n	8013584 <ip4_input+0x1b8>
 8013576:	2b11      	cmp	r3, #17
 8013578:	dc13      	bgt.n	80135a2 <ip4_input+0x1d6>
 801357a:	2b01      	cmp	r3, #1
 801357c:	d00c      	beq.n	8013598 <ip4_input+0x1cc>
 801357e:	2b06      	cmp	r3, #6
 8013580:	d005      	beq.n	801358e <ip4_input+0x1c2>
 8013582:	e00e      	b.n	80135a2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013584:	6839      	ldr	r1, [r7, #0]
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f7fe f9a4 	bl	80118d4 <udp_input>
        break;
 801358c:	e026      	b.n	80135dc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801358e:	6839      	ldr	r1, [r7, #0]
 8013590:	6878      	ldr	r0, [r7, #4]
 8013592:	f7fa f97b 	bl	800d88c <tcp_input>
        break;
 8013596:	e021      	b.n	80135dc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013598:	6839      	ldr	r1, [r7, #0]
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f7ff fcee 	bl	8012f7c <icmp_input>
        break;
 80135a0:	e01c      	b.n	80135dc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80135a2:	4b1a      	ldr	r3, [pc, #104]	; (801360c <ip4_input+0x240>)
 80135a4:	695b      	ldr	r3, [r3, #20]
 80135a6:	6939      	ldr	r1, [r7, #16]
 80135a8:	4618      	mov	r0, r3
 80135aa:	f000 f90b 	bl	80137c4 <ip4_addr_isbroadcast_u32>
 80135ae:	4603      	mov	r3, r0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d10f      	bne.n	80135d4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80135b4:	4b15      	ldr	r3, [pc, #84]	; (801360c <ip4_input+0x240>)
 80135b6:	695b      	ldr	r3, [r3, #20]
 80135b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80135bc:	2be0      	cmp	r3, #224	; 0xe0
 80135be:	d009      	beq.n	80135d4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80135c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80135c4:	4619      	mov	r1, r3
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f7f8 fa1b 	bl	800ba02 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80135cc:	2102      	movs	r1, #2
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f7ff fdd8 	bl	8013184 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f7f8 fa27 	bl	800ba28 <pbuf_free>
        break;
 80135da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80135dc:	4b0b      	ldr	r3, [pc, #44]	; (801360c <ip4_input+0x240>)
 80135de:	2200      	movs	r2, #0
 80135e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80135e2:	4b0a      	ldr	r3, [pc, #40]	; (801360c <ip4_input+0x240>)
 80135e4:	2200      	movs	r2, #0
 80135e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80135e8:	4b08      	ldr	r3, [pc, #32]	; (801360c <ip4_input+0x240>)
 80135ea:	2200      	movs	r2, #0
 80135ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80135ee:	4b07      	ldr	r3, [pc, #28]	; (801360c <ip4_input+0x240>)
 80135f0:	2200      	movs	r2, #0
 80135f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80135f4:	4b05      	ldr	r3, [pc, #20]	; (801360c <ip4_input+0x240>)
 80135f6:	2200      	movs	r2, #0
 80135f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80135fa:	4b04      	ldr	r3, [pc, #16]	; (801360c <ip4_input+0x240>)
 80135fc:	2200      	movs	r2, #0
 80135fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013600:	2300      	movs	r3, #0
}
 8013602:	4618      	mov	r0, r3
 8013604:	3718      	adds	r7, #24
 8013606:	46bd      	mov	sp, r7
 8013608:	bd80      	pop	{r7, pc}
 801360a:	bf00      	nop
 801360c:	200252e8 	.word	0x200252e8
 8013610:	20040a98 	.word	0x20040a98

08013614 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b08a      	sub	sp, #40	; 0x28
 8013618:	af04      	add	r7, sp, #16
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	60b9      	str	r1, [r7, #8]
 801361e:	607a      	str	r2, [r7, #4]
 8013620:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d009      	beq.n	8013640 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d003      	beq.n	801363a <ip4_output_if+0x26>
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d102      	bne.n	8013640 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363c:	3304      	adds	r3, #4
 801363e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013640:	78fa      	ldrb	r2, [r7, #3]
 8013642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013644:	9302      	str	r3, [sp, #8]
 8013646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801364a:	9301      	str	r3, [sp, #4]
 801364c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	4613      	mov	r3, r2
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	6979      	ldr	r1, [r7, #20]
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	f000 f805 	bl	8013668 <ip4_output_if_src>
 801365e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013660:	4618      	mov	r0, r3
 8013662:	3718      	adds	r7, #24
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b088      	sub	sp, #32
 801366c:	af00      	add	r7, sp, #0
 801366e:	60f8      	str	r0, [r7, #12]
 8013670:	60b9      	str	r1, [r7, #8]
 8013672:	607a      	str	r2, [r7, #4]
 8013674:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	7b9b      	ldrb	r3, [r3, #14]
 801367a:	2b01      	cmp	r3, #1
 801367c:	d006      	beq.n	801368c <ip4_output_if_src+0x24>
 801367e:	4b4b      	ldr	r3, [pc, #300]	; (80137ac <ip4_output_if_src+0x144>)
 8013680:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013684:	494a      	ldr	r1, [pc, #296]	; (80137b0 <ip4_output_if_src+0x148>)
 8013686:	484b      	ldr	r0, [pc, #300]	; (80137b4 <ip4_output_if_src+0x14c>)
 8013688:	f001 feca 	bl	8015420 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d060      	beq.n	8013754 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013692:	2314      	movs	r3, #20
 8013694:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013696:	2114      	movs	r1, #20
 8013698:	68f8      	ldr	r0, [r7, #12]
 801369a:	f7f8 f92f 	bl	800b8fc <pbuf_add_header>
 801369e:	4603      	mov	r3, r0
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d002      	beq.n	80136aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80136a4:	f06f 0301 	mvn.w	r3, #1
 80136a8:	e07c      	b.n	80137a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	895b      	ldrh	r3, [r3, #10]
 80136b4:	2b13      	cmp	r3, #19
 80136b6:	d806      	bhi.n	80136c6 <ip4_output_if_src+0x5e>
 80136b8:	4b3c      	ldr	r3, [pc, #240]	; (80137ac <ip4_output_if_src+0x144>)
 80136ba:	f44f 7262 	mov.w	r2, #904	; 0x388
 80136be:	493e      	ldr	r1, [pc, #248]	; (80137b8 <ip4_output_if_src+0x150>)
 80136c0:	483c      	ldr	r0, [pc, #240]	; (80137b4 <ip4_output_if_src+0x14c>)
 80136c2:	f001 fead 	bl	8015420 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	78fa      	ldrb	r2, [r7, #3]
 80136ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80136d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681a      	ldr	r2, [r3, #0]
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80136dc:	8b7b      	ldrh	r3, [r7, #26]
 80136de:	089b      	lsrs	r3, r3, #2
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136e8:	b2da      	uxtb	r2, r3
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80136ee:	69fb      	ldr	r3, [r7, #28]
 80136f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80136f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	891b      	ldrh	r3, [r3, #8]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7f6 fdb6 	bl	800a26c <lwip_htons>
 8013700:	4603      	mov	r3, r0
 8013702:	461a      	mov	r2, r3
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013708:	69fb      	ldr	r3, [r7, #28]
 801370a:	2200      	movs	r2, #0
 801370c:	719a      	strb	r2, [r3, #6]
 801370e:	2200      	movs	r2, #0
 8013710:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013712:	4b2a      	ldr	r3, [pc, #168]	; (80137bc <ip4_output_if_src+0x154>)
 8013714:	881b      	ldrh	r3, [r3, #0]
 8013716:	4618      	mov	r0, r3
 8013718:	f7f6 fda8 	bl	800a26c <lwip_htons>
 801371c:	4603      	mov	r3, r0
 801371e:	461a      	mov	r2, r3
 8013720:	69fb      	ldr	r3, [r7, #28]
 8013722:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013724:	4b25      	ldr	r3, [pc, #148]	; (80137bc <ip4_output_if_src+0x154>)
 8013726:	881b      	ldrh	r3, [r3, #0]
 8013728:	3301      	adds	r3, #1
 801372a:	b29a      	uxth	r2, r3
 801372c:	4b23      	ldr	r3, [pc, #140]	; (80137bc <ip4_output_if_src+0x154>)
 801372e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d104      	bne.n	8013740 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013736:	4b22      	ldr	r3, [pc, #136]	; (80137c0 <ip4_output_if_src+0x158>)
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	69fb      	ldr	r3, [r7, #28]
 801373c:	60da      	str	r2, [r3, #12]
 801373e:	e003      	b.n	8013748 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013740:	68bb      	ldr	r3, [r7, #8]
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	69fb      	ldr	r3, [r7, #28]
 8013746:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	2200      	movs	r2, #0
 801374c:	729a      	strb	r2, [r3, #10]
 801374e:	2200      	movs	r2, #0
 8013750:	72da      	strb	r2, [r3, #11]
 8013752:	e00f      	b.n	8013774 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	895b      	ldrh	r3, [r3, #10]
 8013758:	2b13      	cmp	r3, #19
 801375a:	d802      	bhi.n	8013762 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801375c:	f06f 0301 	mvn.w	r3, #1
 8013760:	e020      	b.n	80137a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	691b      	ldr	r3, [r3, #16]
 801376c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801376e:	f107 0314 	add.w	r3, r7, #20
 8013772:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013778:	2b00      	cmp	r3, #0
 801377a:	d00c      	beq.n	8013796 <ip4_output_if_src+0x12e>
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	891a      	ldrh	r2, [r3, #8]
 8013780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013784:	429a      	cmp	r2, r3
 8013786:	d906      	bls.n	8013796 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801378c:	68f8      	ldr	r0, [r7, #12]
 801378e:	f000 fd53 	bl	8014238 <ip4_frag>
 8013792:	4603      	mov	r3, r0
 8013794:	e006      	b.n	80137a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	695b      	ldr	r3, [r3, #20]
 801379a:	687a      	ldr	r2, [r7, #4]
 801379c:	68f9      	ldr	r1, [r7, #12]
 801379e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137a0:	4798      	blx	r3
 80137a2:	4603      	mov	r3, r0
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	3720      	adds	r7, #32
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}
 80137ac:	080190c0 	.word	0x080190c0
 80137b0:	080190f4 	.word	0x080190f4
 80137b4:	08019100 	.word	0x08019100
 80137b8:	08019128 	.word	0x08019128
 80137bc:	20040bf6 	.word	0x20040bf6
 80137c0:	08019684 	.word	0x08019684

080137c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80137c4:	b480      	push	{r7}
 80137c6:	b085      	sub	sp, #20
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]
 80137cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137d8:	d002      	beq.n	80137e0 <ip4_addr_isbroadcast_u32+0x1c>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d101      	bne.n	80137e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80137e0:	2301      	movs	r3, #1
 80137e2:	e02a      	b.n	801383a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80137ea:	f003 0302 	and.w	r3, r3, #2
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d101      	bne.n	80137f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80137f2:	2300      	movs	r3, #0
 80137f4:	e021      	b.n	801383a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	3304      	adds	r3, #4
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d101      	bne.n	8013806 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013802:	2300      	movs	r3, #0
 8013804:	e019      	b.n	801383a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013806:	68fa      	ldr	r2, [r7, #12]
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	3304      	adds	r3, #4
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	405a      	eors	r2, r3
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	3308      	adds	r3, #8
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	4013      	ands	r3, r2
 8013818:	2b00      	cmp	r3, #0
 801381a:	d10d      	bne.n	8013838 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	3308      	adds	r3, #8
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	43da      	mvns	r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	3308      	adds	r3, #8
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013830:	429a      	cmp	r2, r3
 8013832:	d101      	bne.n	8013838 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013834:	2301      	movs	r3, #1
 8013836:	e000      	b.n	801383a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013838:	2300      	movs	r3, #0
  }
}
 801383a:	4618      	mov	r0, r3
 801383c:	3714      	adds	r7, #20
 801383e:	46bd      	mov	sp, r7
 8013840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013844:	4770      	bx	lr
	...

08013848 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801384e:	2300      	movs	r3, #0
 8013850:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013852:	4b12      	ldr	r3, [pc, #72]	; (801389c <ip_reass_tmr+0x54>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013858:	e018      	b.n	801388c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	7fdb      	ldrb	r3, [r3, #31]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d00b      	beq.n	801387a <ip_reass_tmr+0x32>
      r->timer--;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	7fdb      	ldrb	r3, [r3, #31]
 8013866:	3b01      	subs	r3, #1
 8013868:	b2da      	uxtb	r2, r3
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	60fb      	str	r3, [r7, #12]
 8013878:	e008      	b.n	801388c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013884:	68b9      	ldr	r1, [r7, #8]
 8013886:	6878      	ldr	r0, [r7, #4]
 8013888:	f000 f80a 	bl	80138a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d1e3      	bne.n	801385a <ip_reass_tmr+0x12>
    }
  }
}
 8013892:	bf00      	nop
 8013894:	bf00      	nop
 8013896:	3710      	adds	r7, #16
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	20040bf8 	.word	0x20040bf8

080138a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b088      	sub	sp, #32
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80138aa:	2300      	movs	r3, #0
 80138ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80138ae:	683a      	ldr	r2, [r7, #0]
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d105      	bne.n	80138c2 <ip_reass_free_complete_datagram+0x22>
 80138b6:	4b45      	ldr	r3, [pc, #276]	; (80139cc <ip_reass_free_complete_datagram+0x12c>)
 80138b8:	22ab      	movs	r2, #171	; 0xab
 80138ba:	4945      	ldr	r1, [pc, #276]	; (80139d0 <ip_reass_free_complete_datagram+0x130>)
 80138bc:	4845      	ldr	r0, [pc, #276]	; (80139d4 <ip_reass_free_complete_datagram+0x134>)
 80138be:	f001 fdaf 	bl	8015420 <iprintf>
  if (prev != NULL) {
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d00a      	beq.n	80138de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	687a      	ldr	r2, [r7, #4]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d005      	beq.n	80138de <ip_reass_free_complete_datagram+0x3e>
 80138d2:	4b3e      	ldr	r3, [pc, #248]	; (80139cc <ip_reass_free_complete_datagram+0x12c>)
 80138d4:	22ad      	movs	r2, #173	; 0xad
 80138d6:	4940      	ldr	r1, [pc, #256]	; (80139d8 <ip_reass_free_complete_datagram+0x138>)
 80138d8:	483e      	ldr	r0, [pc, #248]	; (80139d4 <ip_reass_free_complete_datagram+0x134>)
 80138da:	f001 fda1 	bl	8015420 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	889b      	ldrh	r3, [r3, #4]
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d12a      	bne.n	8013946 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	685b      	ldr	r3, [r3, #4]
 80138f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	681a      	ldr	r2, [r3, #0]
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	6858      	ldr	r0, [r3, #4]
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	3308      	adds	r3, #8
 8013906:	2214      	movs	r2, #20
 8013908:	4619      	mov	r1, r3
 801390a:	f001 fcc4 	bl	8015296 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801390e:	2101      	movs	r1, #1
 8013910:	69b8      	ldr	r0, [r7, #24]
 8013912:	f7ff fc47 	bl	80131a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013916:	69b8      	ldr	r0, [r7, #24]
 8013918:	f7f8 f914 	bl	800bb44 <pbuf_clen>
 801391c:	4603      	mov	r3, r0
 801391e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013920:	8bfa      	ldrh	r2, [r7, #30]
 8013922:	8a7b      	ldrh	r3, [r7, #18]
 8013924:	4413      	add	r3, r2
 8013926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801392a:	db05      	blt.n	8013938 <ip_reass_free_complete_datagram+0x98>
 801392c:	4b27      	ldr	r3, [pc, #156]	; (80139cc <ip_reass_free_complete_datagram+0x12c>)
 801392e:	22bc      	movs	r2, #188	; 0xbc
 8013930:	492a      	ldr	r1, [pc, #168]	; (80139dc <ip_reass_free_complete_datagram+0x13c>)
 8013932:	4828      	ldr	r0, [pc, #160]	; (80139d4 <ip_reass_free_complete_datagram+0x134>)
 8013934:	f001 fd74 	bl	8015420 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013938:	8bfa      	ldrh	r2, [r7, #30]
 801393a:	8a7b      	ldrh	r3, [r7, #18]
 801393c:	4413      	add	r3, r2
 801393e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013940:	69b8      	ldr	r0, [r7, #24]
 8013942:	f7f8 f871 	bl	800ba28 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801394c:	e01f      	b.n	801398e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801394e:	69bb      	ldr	r3, [r7, #24]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801395e:	68f8      	ldr	r0, [r7, #12]
 8013960:	f7f8 f8f0 	bl	800bb44 <pbuf_clen>
 8013964:	4603      	mov	r3, r0
 8013966:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013968:	8bfa      	ldrh	r2, [r7, #30]
 801396a:	8a7b      	ldrh	r3, [r7, #18]
 801396c:	4413      	add	r3, r2
 801396e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013972:	db05      	blt.n	8013980 <ip_reass_free_complete_datagram+0xe0>
 8013974:	4b15      	ldr	r3, [pc, #84]	; (80139cc <ip_reass_free_complete_datagram+0x12c>)
 8013976:	22cc      	movs	r2, #204	; 0xcc
 8013978:	4918      	ldr	r1, [pc, #96]	; (80139dc <ip_reass_free_complete_datagram+0x13c>)
 801397a:	4816      	ldr	r0, [pc, #88]	; (80139d4 <ip_reass_free_complete_datagram+0x134>)
 801397c:	f001 fd50 	bl	8015420 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013980:	8bfa      	ldrh	r2, [r7, #30]
 8013982:	8a7b      	ldrh	r3, [r7, #18]
 8013984:	4413      	add	r3, r2
 8013986:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013988:	68f8      	ldr	r0, [r7, #12]
 801398a:	f7f8 f84d 	bl	800ba28 <pbuf_free>
  while (p != NULL) {
 801398e:	69bb      	ldr	r3, [r7, #24]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d1dc      	bne.n	801394e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013994:	6839      	ldr	r1, [r7, #0]
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 f8c2 	bl	8013b20 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801399c:	4b10      	ldr	r3, [pc, #64]	; (80139e0 <ip_reass_free_complete_datagram+0x140>)
 801399e:	881b      	ldrh	r3, [r3, #0]
 80139a0:	8bfa      	ldrh	r2, [r7, #30]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d905      	bls.n	80139b2 <ip_reass_free_complete_datagram+0x112>
 80139a6:	4b09      	ldr	r3, [pc, #36]	; (80139cc <ip_reass_free_complete_datagram+0x12c>)
 80139a8:	22d2      	movs	r2, #210	; 0xd2
 80139aa:	490e      	ldr	r1, [pc, #56]	; (80139e4 <ip_reass_free_complete_datagram+0x144>)
 80139ac:	4809      	ldr	r0, [pc, #36]	; (80139d4 <ip_reass_free_complete_datagram+0x134>)
 80139ae:	f001 fd37 	bl	8015420 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80139b2:	4b0b      	ldr	r3, [pc, #44]	; (80139e0 <ip_reass_free_complete_datagram+0x140>)
 80139b4:	881a      	ldrh	r2, [r3, #0]
 80139b6:	8bfb      	ldrh	r3, [r7, #30]
 80139b8:	1ad3      	subs	r3, r2, r3
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	4b08      	ldr	r3, [pc, #32]	; (80139e0 <ip_reass_free_complete_datagram+0x140>)
 80139be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80139c0:	8bfb      	ldrh	r3, [r7, #30]
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3720      	adds	r7, #32
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	08019158 	.word	0x08019158
 80139d0:	08019194 	.word	0x08019194
 80139d4:	080191a0 	.word	0x080191a0
 80139d8:	080191c8 	.word	0x080191c8
 80139dc:	080191dc 	.word	0x080191dc
 80139e0:	20040bfc 	.word	0x20040bfc
 80139e4:	080191fc 	.word	0x080191fc

080139e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b08a      	sub	sp, #40	; 0x28
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80139f2:	2300      	movs	r3, #0
 80139f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80139f6:	2300      	movs	r3, #0
 80139f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80139fa:	2300      	movs	r3, #0
 80139fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80139fe:	2300      	movs	r3, #0
 8013a00:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013a06:	4b28      	ldr	r3, [pc, #160]	; (8013aa8 <ip_reass_remove_oldest_datagram+0xc0>)
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013a0c:	e030      	b.n	8013a70 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a10:	695a      	ldr	r2, [r3, #20]
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	68db      	ldr	r3, [r3, #12]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d10c      	bne.n	8013a34 <ip_reass_remove_oldest_datagram+0x4c>
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1c:	699a      	ldr	r2, [r3, #24]
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	691b      	ldr	r3, [r3, #16]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	d106      	bne.n	8013a34 <ip_reass_remove_oldest_datagram+0x4c>
 8013a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a28:	899a      	ldrh	r2, [r3, #12]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	889b      	ldrh	r3, [r3, #4]
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d014      	beq.n	8013a5e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	3301      	adds	r3, #1
 8013a38:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8013a3a:	6a3b      	ldr	r3, [r7, #32]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d104      	bne.n	8013a4a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a42:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	61bb      	str	r3, [r7, #24]
 8013a48:	e009      	b.n	8013a5e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8013a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4c:	7fda      	ldrb	r2, [r3, #31]
 8013a4e:	6a3b      	ldr	r3, [r7, #32]
 8013a50:	7fdb      	ldrb	r3, [r3, #31]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d803      	bhi.n	8013a5e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a58:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d001      	beq.n	8013a6a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a68:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8013a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d1cb      	bne.n	8013a0e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013a76:	6a3b      	ldr	r3, [r7, #32]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d008      	beq.n	8013a8e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8013a7c:	69b9      	ldr	r1, [r7, #24]
 8013a7e:	6a38      	ldr	r0, [r7, #32]
 8013a80:	f7ff ff0e 	bl	80138a0 <ip_reass_free_complete_datagram>
 8013a84:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013a86:	697a      	ldr	r2, [r7, #20]
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	4413      	add	r3, r2
 8013a8c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013a8e:	697a      	ldr	r2, [r7, #20]
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	429a      	cmp	r2, r3
 8013a94:	da02      	bge.n	8013a9c <ip_reass_remove_oldest_datagram+0xb4>
 8013a96:	693b      	ldr	r3, [r7, #16]
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	dcac      	bgt.n	80139f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013a9c:	697b      	ldr	r3, [r7, #20]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3728      	adds	r7, #40	; 0x28
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	20040bf8 	.word	0x20040bf8

08013aac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b084      	sub	sp, #16
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013ab6:	2004      	movs	r0, #4
 8013ab8:	f7f7 f89e 	bl	800abf8 <memp_malloc>
 8013abc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d110      	bne.n	8013ae6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013ac4:	6839      	ldr	r1, [r7, #0]
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f7ff ff8e 	bl	80139e8 <ip_reass_remove_oldest_datagram>
 8013acc:	4602      	mov	r2, r0
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	dc03      	bgt.n	8013adc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013ad4:	2004      	movs	r0, #4
 8013ad6:	f7f7 f88f 	bl	800abf8 <memp_malloc>
 8013ada:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d101      	bne.n	8013ae6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e016      	b.n	8013b14 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013ae6:	2220      	movs	r2, #32
 8013ae8:	2100      	movs	r1, #0
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	f001 fbfb 	bl	80152e6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	220f      	movs	r2, #15
 8013af4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013af6:	4b09      	ldr	r3, [pc, #36]	; (8013b1c <ip_reass_enqueue_new_datagram+0x70>)
 8013af8:	681a      	ldr	r2, [r3, #0]
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013afe:	4a07      	ldr	r2, [pc, #28]	; (8013b1c <ip_reass_enqueue_new_datagram+0x70>)
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	3308      	adds	r3, #8
 8013b08:	2214      	movs	r2, #20
 8013b0a:	6879      	ldr	r1, [r7, #4]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f001 fbc2 	bl	8015296 <memcpy>
  return ipr;
 8013b12:	68fb      	ldr	r3, [r7, #12]
}
 8013b14:	4618      	mov	r0, r3
 8013b16:	3710      	adds	r7, #16
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}
 8013b1c:	20040bf8 	.word	0x20040bf8

08013b20 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b082      	sub	sp, #8
 8013b24:	af00      	add	r7, sp, #0
 8013b26:	6078      	str	r0, [r7, #4]
 8013b28:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013b2a:	4b10      	ldr	r3, [pc, #64]	; (8013b6c <ip_reass_dequeue_datagram+0x4c>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d104      	bne.n	8013b3e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4a0c      	ldr	r2, [pc, #48]	; (8013b6c <ip_reass_dequeue_datagram+0x4c>)
 8013b3a:	6013      	str	r3, [r2, #0]
 8013b3c:	e00d      	b.n	8013b5a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d106      	bne.n	8013b52 <ip_reass_dequeue_datagram+0x32>
 8013b44:	4b0a      	ldr	r3, [pc, #40]	; (8013b70 <ip_reass_dequeue_datagram+0x50>)
 8013b46:	f240 1245 	movw	r2, #325	; 0x145
 8013b4a:	490a      	ldr	r1, [pc, #40]	; (8013b74 <ip_reass_dequeue_datagram+0x54>)
 8013b4c:	480a      	ldr	r0, [pc, #40]	; (8013b78 <ip_reass_dequeue_datagram+0x58>)
 8013b4e:	f001 fc67 	bl	8015420 <iprintf>
    prev->next = ipr->next;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681a      	ldr	r2, [r3, #0]
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013b5a:	6879      	ldr	r1, [r7, #4]
 8013b5c:	2004      	movs	r0, #4
 8013b5e:	f7f7 f8c1 	bl	800ace4 <memp_free>
}
 8013b62:	bf00      	nop
 8013b64:	3708      	adds	r7, #8
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}
 8013b6a:	bf00      	nop
 8013b6c:	20040bf8 	.word	0x20040bf8
 8013b70:	08019158 	.word	0x08019158
 8013b74:	08019220 	.word	0x08019220
 8013b78:	080191a0 	.word	0x080191a0

08013b7c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b08c      	sub	sp, #48	; 0x30
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	685b      	ldr	r3, [r3, #4]
 8013b94:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013b96:	69fb      	ldr	r3, [r7, #28]
 8013b98:	885b      	ldrh	r3, [r3, #2]
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7f6 fb65 	bl	800a26c <lwip_htons>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	781b      	ldrb	r3, [r3, #0]
 8013baa:	f003 030f 	and.w	r3, r3, #15
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013bb4:	7e7b      	ldrb	r3, [r7, #25]
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	8b7a      	ldrh	r2, [r7, #26]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d202      	bcs.n	8013bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8013bc2:	e135      	b.n	8013e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013bc4:	7e7b      	ldrb	r3, [r7, #25]
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	8b7a      	ldrh	r2, [r7, #26]
 8013bca:	1ad3      	subs	r3, r2, r3
 8013bcc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013bce:	69fb      	ldr	r3, [r7, #28]
 8013bd0:	88db      	ldrh	r3, [r3, #6]
 8013bd2:	b29b      	uxth	r3, r3
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7f6 fb49 	bl	800a26c <lwip_htons>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	00db      	lsls	r3, r3, #3
 8013be4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bee:	2200      	movs	r2, #0
 8013bf0:	701a      	strb	r2, [r3, #0]
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	705a      	strb	r2, [r3, #1]
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	709a      	strb	r2, [r3, #2]
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c00:	8afa      	ldrh	r2, [r7, #22]
 8013c02:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013c04:	8afa      	ldrh	r2, [r7, #22]
 8013c06:	8b7b      	ldrh	r3, [r7, #26]
 8013c08:	4413      	add	r3, r2
 8013c0a:	b29a      	uxth	r2, r3
 8013c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c0e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c12:	88db      	ldrh	r3, [r3, #6]
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	8afa      	ldrh	r2, [r7, #22]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d902      	bls.n	8013c22 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c20:	e106      	b.n	8013e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	627b      	str	r3, [r7, #36]	; 0x24
 8013c28:	e068      	b.n	8013cfc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8013c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c32:	889b      	ldrh	r3, [r3, #4]
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	889b      	ldrh	r3, [r3, #4]
 8013c3a:	b29b      	uxth	r3, r3
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d235      	bcs.n	8013cac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c44:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d020      	beq.n	8013c8e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4e:	889b      	ldrh	r3, [r3, #4]
 8013c50:	b29a      	uxth	r2, r3
 8013c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c54:	88db      	ldrh	r3, [r3, #6]
 8013c56:	b29b      	uxth	r3, r3
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d307      	bcc.n	8013c6c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c5e:	88db      	ldrh	r3, [r3, #6]
 8013c60:	b29a      	uxth	r2, r3
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	889b      	ldrh	r3, [r3, #4]
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d902      	bls.n	8013c72 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c70:	e0de      	b.n	8013e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c74:	68ba      	ldr	r2, [r7, #8]
 8013c76:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c7a:	88db      	ldrh	r3, [r3, #6]
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c80:	889b      	ldrh	r3, [r3, #4]
 8013c82:	b29b      	uxth	r3, r3
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d03d      	beq.n	8013d04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013c8c:	e03a      	b.n	8013d04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c90:	88db      	ldrh	r3, [r3, #6]
 8013c92:	b29a      	uxth	r2, r3
 8013c94:	693b      	ldr	r3, [r7, #16]
 8013c96:	889b      	ldrh	r3, [r3, #4]
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d902      	bls.n	8013ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013ca2:	e0c5      	b.n	8013e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	68ba      	ldr	r2, [r7, #8]
 8013ca8:	605a      	str	r2, [r3, #4]
      break;
 8013caa:	e02b      	b.n	8013d04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cae:	889b      	ldrh	r3, [r3, #4]
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	889b      	ldrh	r3, [r3, #4]
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d102      	bne.n	8013cc2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8013cc0:	e0b6      	b.n	8013e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc4:	889b      	ldrh	r3, [r3, #4]
 8013cc6:	b29a      	uxth	r2, r3
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	88db      	ldrh	r3, [r3, #6]
 8013ccc:	b29b      	uxth	r3, r3
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d202      	bcs.n	8013cd8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8013cd6:	e0ab      	b.n	8013e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d009      	beq.n	8013cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce0:	88db      	ldrh	r3, [r3, #6]
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	693b      	ldr	r3, [r7, #16]
 8013ce6:	889b      	ldrh	r3, [r3, #4]
 8013ce8:	b29b      	uxth	r3, r3
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d001      	beq.n	8013cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d193      	bne.n	8013c2a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013d02:	e000      	b.n	8013d06 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013d04:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d12d      	bne.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d01c      	beq.n	8013d4c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d14:	88db      	ldrh	r3, [r3, #6]
 8013d16:	b29a      	uxth	r2, r3
 8013d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1a:	889b      	ldrh	r3, [r3, #4]
 8013d1c:	b29b      	uxth	r3, r3
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d906      	bls.n	8013d30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013d22:	4b45      	ldr	r3, [pc, #276]	; (8013e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d24:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013d28:	4944      	ldr	r1, [pc, #272]	; (8013e3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013d2a:	4845      	ldr	r0, [pc, #276]	; (8013e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d2c:	f001 fb78 	bl	8015420 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d32:	68ba      	ldr	r2, [r7, #8]
 8013d34:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d38:	88db      	ldrh	r3, [r3, #6]
 8013d3a:	b29a      	uxth	r2, r3
 8013d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3e:	889b      	ldrh	r3, [r3, #4]
 8013d40:	b29b      	uxth	r3, r3
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d010      	beq.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013d46:	2300      	movs	r3, #0
 8013d48:	623b      	str	r3, [r7, #32]
 8013d4a:	e00d      	b.n	8013d68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	685b      	ldr	r3, [r3, #4]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d006      	beq.n	8013d62 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013d54:	4b38      	ldr	r3, [pc, #224]	; (8013e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013d56:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8013d5a:	493a      	ldr	r1, [pc, #232]	; (8013e44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013d5c:	4838      	ldr	r0, [pc, #224]	; (8013e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013d5e:	f001 fb5f 	bl	8015420 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	68ba      	ldr	r2, [r7, #8]
 8013d66:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d105      	bne.n	8013d7a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	7f9b      	ldrb	r3, [r3, #30]
 8013d72:	f003 0301 	and.w	r3, r3, #1
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d059      	beq.n	8013e2e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d04f      	beq.n	8013e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d006      	beq.n	8013d96 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	889b      	ldrh	r3, [r3, #4]
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d002      	beq.n	8013d9c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013d96:	2300      	movs	r3, #0
 8013d98:	623b      	str	r3, [r7, #32]
 8013d9a:	e041      	b.n	8013e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013da6:	e012      	b.n	8013dce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013daa:	685b      	ldr	r3, [r3, #4]
 8013dac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db0:	88db      	ldrh	r3, [r3, #6]
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db6:	889b      	ldrh	r3, [r3, #4]
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d002      	beq.n	8013dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	623b      	str	r3, [r7, #32]
            break;
 8013dc2:	e007      	b.n	8013dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dc6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d1e9      	bne.n	8013da8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013dd4:	6a3b      	ldr	r3, [r7, #32]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d022      	beq.n	8013e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d106      	bne.n	8013df0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013de2:	4b15      	ldr	r3, [pc, #84]	; (8013e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013de4:	f240 12df 	movw	r2, #479	; 0x1df
 8013de8:	4917      	ldr	r1, [pc, #92]	; (8013e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013dea:	4815      	ldr	r0, [pc, #84]	; (8013e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013dec:	f001 fb18 	bl	8015420 <iprintf>
          LWIP_ASSERT("sanity check",
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013df8:	429a      	cmp	r2, r3
 8013dfa:	d106      	bne.n	8013e0a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013dfc:	4b0e      	ldr	r3, [pc, #56]	; (8013e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013dfe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013e02:	4911      	ldr	r1, [pc, #68]	; (8013e48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013e04:	480e      	ldr	r0, [pc, #56]	; (8013e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013e06:	f001 fb0b 	bl	8015420 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d006      	beq.n	8013e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013e12:	4b09      	ldr	r3, [pc, #36]	; (8013e38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013e14:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013e18:	490c      	ldr	r1, [pc, #48]	; (8013e4c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013e1a:	4809      	ldr	r0, [pc, #36]	; (8013e40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013e1c:	f001 fb00 	bl	8015420 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013e20:	6a3b      	ldr	r3, [r7, #32]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	bf14      	ite	ne
 8013e26:	2301      	movne	r3, #1
 8013e28:	2300      	moveq	r3, #0
 8013e2a:	b2db      	uxtb	r3, r3
 8013e2c:	e000      	b.n	8013e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013e2e:	2300      	movs	r3, #0
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3730      	adds	r7, #48	; 0x30
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	08019158 	.word	0x08019158
 8013e3c:	0801923c 	.word	0x0801923c
 8013e40:	080191a0 	.word	0x080191a0
 8013e44:	0801925c 	.word	0x0801925c
 8013e48:	08019294 	.word	0x08019294
 8013e4c:	080192a4 	.word	0x080192a4

08013e50 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b08e      	sub	sp, #56	; 0x38
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	685b      	ldr	r3, [r3, #4]
 8013e5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8013e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e60:	781b      	ldrb	r3, [r3, #0]
 8013e62:	f003 030f 	and.w	r3, r3, #15
 8013e66:	b2db      	uxtb	r3, r3
 8013e68:	009b      	lsls	r3, r3, #2
 8013e6a:	b2db      	uxtb	r3, r3
 8013e6c:	2b14      	cmp	r3, #20
 8013e6e:	f040 8171 	bne.w	8014154 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e74:	88db      	ldrh	r3, [r3, #6]
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7f6 f9f7 	bl	800a26c <lwip_htons>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e84:	b29b      	uxth	r3, r3
 8013e86:	00db      	lsls	r3, r3, #3
 8013e88:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e8c:	885b      	ldrh	r3, [r3, #2]
 8013e8e:	b29b      	uxth	r3, r3
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7f6 f9eb 	bl	800a26c <lwip_htons>
 8013e96:	4603      	mov	r3, r0
 8013e98:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	f003 030f 	and.w	r3, r3, #15
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	009b      	lsls	r3, r3, #2
 8013ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	f0c0 8150 	bcc.w	8014158 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013ebc:	b29b      	uxth	r3, r3
 8013ebe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013ec0:	1ad3      	subs	r3, r2, r3
 8013ec2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f7f7 fe3d 	bl	800bb44 <pbuf_clen>
 8013eca:	4603      	mov	r3, r0
 8013ecc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013ece:	4b8c      	ldr	r3, [pc, #560]	; (8014100 <ip4_reass+0x2b0>)
 8013ed0:	881b      	ldrh	r3, [r3, #0]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	8c3b      	ldrh	r3, [r7, #32]
 8013ed6:	4413      	add	r3, r2
 8013ed8:	2b0a      	cmp	r3, #10
 8013eda:	dd10      	ble.n	8013efe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013edc:	8c3b      	ldrh	r3, [r7, #32]
 8013ede:	4619      	mov	r1, r3
 8013ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ee2:	f7ff fd81 	bl	80139e8 <ip_reass_remove_oldest_datagram>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	f000 8137 	beq.w	801415c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013eee:	4b84      	ldr	r3, [pc, #528]	; (8014100 <ip4_reass+0x2b0>)
 8013ef0:	881b      	ldrh	r3, [r3, #0]
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	8c3b      	ldrh	r3, [r7, #32]
 8013ef6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013ef8:	2b0a      	cmp	r3, #10
 8013efa:	f300 812f 	bgt.w	801415c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013efe:	4b81      	ldr	r3, [pc, #516]	; (8014104 <ip4_reass+0x2b4>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	633b      	str	r3, [r7, #48]	; 0x30
 8013f04:	e015      	b.n	8013f32 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f08:	695a      	ldr	r2, [r3, #20]
 8013f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	429a      	cmp	r2, r3
 8013f10:	d10c      	bne.n	8013f2c <ip4_reass+0xdc>
 8013f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f14:	699a      	ldr	r2, [r3, #24]
 8013f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f18:	691b      	ldr	r3, [r3, #16]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d106      	bne.n	8013f2c <ip4_reass+0xdc>
 8013f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f20:	899a      	ldrh	r2, [r3, #12]
 8013f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f24:	889b      	ldrh	r3, [r3, #4]
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d006      	beq.n	8013f3a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	633b      	str	r3, [r7, #48]	; 0x30
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d1e6      	bne.n	8013f06 <ip4_reass+0xb6>
 8013f38:	e000      	b.n	8013f3c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013f3a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d109      	bne.n	8013f56 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013f42:	8c3b      	ldrh	r3, [r7, #32]
 8013f44:	4619      	mov	r1, r3
 8013f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f48:	f7ff fdb0 	bl	8013aac <ip_reass_enqueue_new_datagram>
 8013f4c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d11c      	bne.n	8013f8e <ip4_reass+0x13e>
      goto nullreturn;
 8013f54:	e105      	b.n	8014162 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f58:	88db      	ldrh	r3, [r3, #6]
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7f6 f985 	bl	800a26c <lwip_htons>
 8013f62:	4603      	mov	r3, r0
 8013f64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d110      	bne.n	8013f8e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f6e:	89db      	ldrh	r3, [r3, #14]
 8013f70:	4618      	mov	r0, r3
 8013f72:	f7f6 f97b 	bl	800a26c <lwip_htons>
 8013f76:	4603      	mov	r3, r0
 8013f78:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d006      	beq.n	8013f8e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f82:	3308      	adds	r3, #8
 8013f84:	2214      	movs	r2, #20
 8013f86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f001 f984 	bl	8015296 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f90:	88db      	ldrh	r3, [r3, #6]
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	f003 0320 	and.w	r3, r3, #32
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	bf0c      	ite	eq
 8013f9c:	2301      	moveq	r3, #1
 8013f9e:	2300      	movne	r3, #0
 8013fa0:	b2db      	uxtb	r3, r3
 8013fa2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d00e      	beq.n	8013fc8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013faa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fae:	4413      	add	r3, r2
 8013fb0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013fb2:	8b7a      	ldrh	r2, [r7, #26]
 8013fb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	f0c0 80a0 	bcc.w	80140fc <ip4_reass+0x2ac>
 8013fbc:	8b7b      	ldrh	r3, [r7, #26]
 8013fbe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	f200 809a 	bhi.w	80140fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013fc8:	69fa      	ldr	r2, [r7, #28]
 8013fca:	6879      	ldr	r1, [r7, #4]
 8013fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fce:	f7ff fdd5 	bl	8013b7c <ip_reass_chain_frag_into_datagram_and_validate>
 8013fd2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fda:	f000 809b 	beq.w	8014114 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013fde:	4b48      	ldr	r3, [pc, #288]	; (8014100 <ip4_reass+0x2b0>)
 8013fe0:	881a      	ldrh	r2, [r3, #0]
 8013fe2:	8c3b      	ldrh	r3, [r7, #32]
 8013fe4:	4413      	add	r3, r2
 8013fe6:	b29a      	uxth	r2, r3
 8013fe8:	4b45      	ldr	r3, [pc, #276]	; (8014100 <ip4_reass+0x2b0>)
 8013fea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013fec:	69fb      	ldr	r3, [r7, #28]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d00d      	beq.n	801400e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013ff2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013ff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ff6:	4413      	add	r3, r2
 8013ff8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffc:	8a7a      	ldrh	r2, [r7, #18]
 8013ffe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014002:	7f9b      	ldrb	r3, [r3, #30]
 8014004:	f043 0301 	orr.w	r3, r3, #1
 8014008:	b2da      	uxtb	r2, r3
 801400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801400e:	697b      	ldr	r3, [r7, #20]
 8014010:	2b01      	cmp	r3, #1
 8014012:	d171      	bne.n	80140f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014016:	8b9b      	ldrh	r3, [r3, #28]
 8014018:	3314      	adds	r3, #20
 801401a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801401c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	685b      	ldr	r3, [r3, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	685b      	ldr	r3, [r3, #4]
 801402c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014030:	3308      	adds	r3, #8
 8014032:	2214      	movs	r2, #20
 8014034:	4619      	mov	r1, r3
 8014036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014038:	f001 f92d 	bl	8015296 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801403c:	8a3b      	ldrh	r3, [r7, #16]
 801403e:	4618      	mov	r0, r3
 8014040:	f7f6 f914 	bl	800a26c <lwip_htons>
 8014044:	4603      	mov	r3, r0
 8014046:	461a      	mov	r2, r3
 8014048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801404c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801404e:	2200      	movs	r2, #0
 8014050:	719a      	strb	r2, [r3, #6]
 8014052:	2200      	movs	r2, #0
 8014054:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014058:	2200      	movs	r2, #0
 801405a:	729a      	strb	r2, [r3, #10]
 801405c:	2200      	movs	r2, #0
 801405e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014066:	e00d      	b.n	8014084 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801406e:	2114      	movs	r1, #20
 8014070:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014072:	f7f7 fc53 	bl	800b91c <pbuf_remove_header>
      pbuf_cat(p, r);
 8014076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f7f7 fda3 	bl	800bbc4 <pbuf_cat>
      r = iprh->next_pbuf;
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014086:	2b00      	cmp	r3, #0
 8014088:	d1ee      	bne.n	8014068 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801408a:	4b1e      	ldr	r3, [pc, #120]	; (8014104 <ip4_reass+0x2b4>)
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014090:	429a      	cmp	r2, r3
 8014092:	d102      	bne.n	801409a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014094:	2300      	movs	r3, #0
 8014096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014098:	e010      	b.n	80140bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801409a:	4b1a      	ldr	r3, [pc, #104]	; (8014104 <ip4_reass+0x2b4>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140a0:	e007      	b.n	80140b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80140a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d006      	beq.n	80140ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80140ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d1f4      	bne.n	80140a2 <ip4_reass+0x252>
 80140b8:	e000      	b.n	80140bc <ip4_reass+0x26c>
          break;
 80140ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80140bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80140be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140c0:	f7ff fd2e 	bl	8013b20 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f7f7 fd3d 	bl	800bb44 <pbuf_clen>
 80140ca:	4603      	mov	r3, r0
 80140cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80140ce:	4b0c      	ldr	r3, [pc, #48]	; (8014100 <ip4_reass+0x2b0>)
 80140d0:	881b      	ldrh	r3, [r3, #0]
 80140d2:	8c3a      	ldrh	r2, [r7, #32]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d906      	bls.n	80140e6 <ip4_reass+0x296>
 80140d8:	4b0b      	ldr	r3, [pc, #44]	; (8014108 <ip4_reass+0x2b8>)
 80140da:	f240 229b 	movw	r2, #667	; 0x29b
 80140de:	490b      	ldr	r1, [pc, #44]	; (801410c <ip4_reass+0x2bc>)
 80140e0:	480b      	ldr	r0, [pc, #44]	; (8014110 <ip4_reass+0x2c0>)
 80140e2:	f001 f99d 	bl	8015420 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80140e6:	4b06      	ldr	r3, [pc, #24]	; (8014100 <ip4_reass+0x2b0>)
 80140e8:	881a      	ldrh	r2, [r3, #0]
 80140ea:	8c3b      	ldrh	r3, [r7, #32]
 80140ec:	1ad3      	subs	r3, r2, r3
 80140ee:	b29a      	uxth	r2, r3
 80140f0:	4b03      	ldr	r3, [pc, #12]	; (8014100 <ip4_reass+0x2b0>)
 80140f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	e038      	b.n	801416a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80140f8:	2300      	movs	r3, #0
 80140fa:	e036      	b.n	801416a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80140fc:	bf00      	nop
 80140fe:	e00a      	b.n	8014116 <ip4_reass+0x2c6>
 8014100:	20040bfc 	.word	0x20040bfc
 8014104:	20040bf8 	.word	0x20040bf8
 8014108:	08019158 	.word	0x08019158
 801410c:	080192c8 	.word	0x080192c8
 8014110:	080191a0 	.word	0x080191a0
    goto nullreturn_ipr;
 8014114:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014118:	2b00      	cmp	r3, #0
 801411a:	d106      	bne.n	801412a <ip4_reass+0x2da>
 801411c:	4b15      	ldr	r3, [pc, #84]	; (8014174 <ip4_reass+0x324>)
 801411e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014122:	4915      	ldr	r1, [pc, #84]	; (8014178 <ip4_reass+0x328>)
 8014124:	4815      	ldr	r0, [pc, #84]	; (801417c <ip4_reass+0x32c>)
 8014126:	f001 f97b 	bl	8015420 <iprintf>
  if (ipr->p == NULL) {
 801412a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412c:	685b      	ldr	r3, [r3, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d116      	bne.n	8014160 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014132:	4b13      	ldr	r3, [pc, #76]	; (8014180 <ip4_reass+0x330>)
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014138:	429a      	cmp	r2, r3
 801413a:	d006      	beq.n	801414a <ip4_reass+0x2fa>
 801413c:	4b0d      	ldr	r3, [pc, #52]	; (8014174 <ip4_reass+0x324>)
 801413e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014142:	4910      	ldr	r1, [pc, #64]	; (8014184 <ip4_reass+0x334>)
 8014144:	480d      	ldr	r0, [pc, #52]	; (801417c <ip4_reass+0x32c>)
 8014146:	f001 f96b 	bl	8015420 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801414a:	2100      	movs	r1, #0
 801414c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801414e:	f7ff fce7 	bl	8013b20 <ip_reass_dequeue_datagram>
 8014152:	e006      	b.n	8014162 <ip4_reass+0x312>
    goto nullreturn;
 8014154:	bf00      	nop
 8014156:	e004      	b.n	8014162 <ip4_reass+0x312>
    goto nullreturn;
 8014158:	bf00      	nop
 801415a:	e002      	b.n	8014162 <ip4_reass+0x312>
      goto nullreturn;
 801415c:	bf00      	nop
 801415e:	e000      	b.n	8014162 <ip4_reass+0x312>
  }

nullreturn:
 8014160:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f7f7 fc60 	bl	800ba28 <pbuf_free>
  return NULL;
 8014168:	2300      	movs	r3, #0
}
 801416a:	4618      	mov	r0, r3
 801416c:	3738      	adds	r7, #56	; 0x38
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	08019158 	.word	0x08019158
 8014178:	080192e4 	.word	0x080192e4
 801417c:	080191a0 	.word	0x080191a0
 8014180:	20040bf8 	.word	0x20040bf8
 8014184:	080192f0 	.word	0x080192f0

08014188 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801418c:	2005      	movs	r0, #5
 801418e:	f7f6 fd33 	bl	800abf8 <memp_malloc>
 8014192:	4603      	mov	r3, r0
}
 8014194:	4618      	mov	r0, r3
 8014196:	bd80      	pop	{r7, pc}

08014198 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b082      	sub	sp, #8
 801419c:	af00      	add	r7, sp, #0
 801419e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d106      	bne.n	80141b4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80141a6:	4b07      	ldr	r3, [pc, #28]	; (80141c4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80141a8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80141ac:	4906      	ldr	r1, [pc, #24]	; (80141c8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80141ae:	4807      	ldr	r0, [pc, #28]	; (80141cc <ip_frag_free_pbuf_custom_ref+0x34>)
 80141b0:	f001 f936 	bl	8015420 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80141b4:	6879      	ldr	r1, [r7, #4]
 80141b6:	2005      	movs	r0, #5
 80141b8:	f7f6 fd94 	bl	800ace4 <memp_free>
}
 80141bc:	bf00      	nop
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}
 80141c4:	08019158 	.word	0x08019158
 80141c8:	08019310 	.word	0x08019310
 80141cc:	080191a0 	.word	0x080191a0

080141d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d106      	bne.n	80141f0 <ipfrag_free_pbuf_custom+0x20>
 80141e2:	4b11      	ldr	r3, [pc, #68]	; (8014228 <ipfrag_free_pbuf_custom+0x58>)
 80141e4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80141e8:	4910      	ldr	r1, [pc, #64]	; (801422c <ipfrag_free_pbuf_custom+0x5c>)
 80141ea:	4811      	ldr	r0, [pc, #68]	; (8014230 <ipfrag_free_pbuf_custom+0x60>)
 80141ec:	f001 f918 	bl	8015420 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80141f0:	68fa      	ldr	r2, [r7, #12]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d006      	beq.n	8014206 <ipfrag_free_pbuf_custom+0x36>
 80141f8:	4b0b      	ldr	r3, [pc, #44]	; (8014228 <ipfrag_free_pbuf_custom+0x58>)
 80141fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80141fe:	490d      	ldr	r1, [pc, #52]	; (8014234 <ipfrag_free_pbuf_custom+0x64>)
 8014200:	480b      	ldr	r0, [pc, #44]	; (8014230 <ipfrag_free_pbuf_custom+0x60>)
 8014202:	f001 f90d 	bl	8015420 <iprintf>
  if (pcr->original != NULL) {
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	695b      	ldr	r3, [r3, #20]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d004      	beq.n	8014218 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	695b      	ldr	r3, [r3, #20]
 8014212:	4618      	mov	r0, r3
 8014214:	f7f7 fc08 	bl	800ba28 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014218:	68f8      	ldr	r0, [r7, #12]
 801421a:	f7ff ffbd 	bl	8014198 <ip_frag_free_pbuf_custom_ref>
}
 801421e:	bf00      	nop
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}
 8014226:	bf00      	nop
 8014228:	08019158 	.word	0x08019158
 801422c:	0801931c 	.word	0x0801931c
 8014230:	080191a0 	.word	0x080191a0
 8014234:	08019328 	.word	0x08019328

08014238 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b094      	sub	sp, #80	; 0x50
 801423c:	af02      	add	r7, sp, #8
 801423e:	60f8      	str	r0, [r7, #12]
 8014240:	60b9      	str	r1, [r7, #8]
 8014242:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014244:	2300      	movs	r3, #0
 8014246:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801424a:	68bb      	ldr	r3, [r7, #8]
 801424c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801424e:	3b14      	subs	r3, #20
 8014250:	2b00      	cmp	r3, #0
 8014252:	da00      	bge.n	8014256 <ip4_frag+0x1e>
 8014254:	3307      	adds	r3, #7
 8014256:	10db      	asrs	r3, r3, #3
 8014258:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801425a:	2314      	movs	r3, #20
 801425c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014266:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	f003 030f 	and.w	r3, r3, #15
 8014270:	b2db      	uxtb	r3, r3
 8014272:	009b      	lsls	r3, r3, #2
 8014274:	b2db      	uxtb	r3, r3
 8014276:	2b14      	cmp	r3, #20
 8014278:	d002      	beq.n	8014280 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801427a:	f06f 0305 	mvn.w	r3, #5
 801427e:	e110      	b.n	80144a2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	895b      	ldrh	r3, [r3, #10]
 8014284:	2b13      	cmp	r3, #19
 8014286:	d809      	bhi.n	801429c <ip4_frag+0x64>
 8014288:	4b88      	ldr	r3, [pc, #544]	; (80144ac <ip4_frag+0x274>)
 801428a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801428e:	4988      	ldr	r1, [pc, #544]	; (80144b0 <ip4_frag+0x278>)
 8014290:	4888      	ldr	r0, [pc, #544]	; (80144b4 <ip4_frag+0x27c>)
 8014292:	f001 f8c5 	bl	8015420 <iprintf>
 8014296:	f06f 0305 	mvn.w	r3, #5
 801429a:	e102      	b.n	80144a2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429e:	88db      	ldrh	r3, [r3, #6]
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7f5 ffe2 	bl	800a26c <lwip_htons>
 80142a8:	4603      	mov	r3, r0
 80142aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80142ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80142b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80142b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80142b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80142bc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	891b      	ldrh	r3, [r3, #8]
 80142c2:	3b14      	subs	r3, #20
 80142c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80142c8:	e0e1      	b.n	801448e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80142ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80142cc:	00db      	lsls	r3, r3, #3
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80142d4:	4293      	cmp	r3, r2
 80142d6:	bf28      	it	cs
 80142d8:	4613      	movcs	r3, r2
 80142da:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80142dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80142e0:	2114      	movs	r1, #20
 80142e2:	200e      	movs	r0, #14
 80142e4:	f7f7 f8be 	bl	800b464 <pbuf_alloc>
 80142e8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80142ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	f000 80d5 	beq.w	801449c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80142f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f4:	895b      	ldrh	r3, [r3, #10]
 80142f6:	2b13      	cmp	r3, #19
 80142f8:	d806      	bhi.n	8014308 <ip4_frag+0xd0>
 80142fa:	4b6c      	ldr	r3, [pc, #432]	; (80144ac <ip4_frag+0x274>)
 80142fc:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014300:	496d      	ldr	r1, [pc, #436]	; (80144b8 <ip4_frag+0x280>)
 8014302:	486c      	ldr	r0, [pc, #432]	; (80144b4 <ip4_frag+0x27c>)
 8014304:	f001 f88c 	bl	8015420 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430a:	685b      	ldr	r3, [r3, #4]
 801430c:	2214      	movs	r2, #20
 801430e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014310:	4618      	mov	r0, r3
 8014312:	f000 ffc0 	bl	8015296 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801431c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801431e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014322:	e064      	b.n	80143ee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	895a      	ldrh	r2, [r3, #10]
 8014328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801432a:	1ad3      	subs	r3, r2, r3
 801432c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	895b      	ldrh	r3, [r3, #10]
 8014332:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014334:	429a      	cmp	r2, r3
 8014336:	d906      	bls.n	8014346 <ip4_frag+0x10e>
 8014338:	4b5c      	ldr	r3, [pc, #368]	; (80144ac <ip4_frag+0x274>)
 801433a:	f240 322d 	movw	r2, #813	; 0x32d
 801433e:	495f      	ldr	r1, [pc, #380]	; (80144bc <ip4_frag+0x284>)
 8014340:	485c      	ldr	r0, [pc, #368]	; (80144b4 <ip4_frag+0x27c>)
 8014342:	f001 f86d 	bl	8015420 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014346:	8bfa      	ldrh	r2, [r7, #30]
 8014348:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801434c:	4293      	cmp	r3, r2
 801434e:	bf28      	it	cs
 8014350:	4613      	movcs	r3, r2
 8014352:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014356:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801435a:	2b00      	cmp	r3, #0
 801435c:	d105      	bne.n	801436a <ip4_frag+0x132>
        poff = 0;
 801435e:	2300      	movs	r3, #0
 8014360:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	60fb      	str	r3, [r7, #12]
        continue;
 8014368:	e041      	b.n	80143ee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801436a:	f7ff ff0d 	bl	8014188 <ip_frag_alloc_pbuf_custom_ref>
 801436e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d103      	bne.n	801437e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014376:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014378:	f7f7 fb56 	bl	800ba28 <pbuf_free>
        goto memerr;
 801437c:	e08f      	b.n	801449e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801437e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014384:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014386:	4413      	add	r3, r2
 8014388:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801438c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014390:	9201      	str	r2, [sp, #4]
 8014392:	9300      	str	r3, [sp, #0]
 8014394:	4603      	mov	r3, r0
 8014396:	2241      	movs	r2, #65	; 0x41
 8014398:	2000      	movs	r0, #0
 801439a:	f7f7 f98d 	bl	800b6b8 <pbuf_alloced_custom>
 801439e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d106      	bne.n	80143b4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80143a6:	69b8      	ldr	r0, [r7, #24]
 80143a8:	f7ff fef6 	bl	8014198 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80143ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143ae:	f7f7 fb3b 	bl	800ba28 <pbuf_free>
        goto memerr;
 80143b2:	e074      	b.n	801449e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80143b4:	68f8      	ldr	r0, [r7, #12]
 80143b6:	f7f7 fbdd 	bl	800bb74 <pbuf_ref>
      pcr->original = p;
 80143ba:	69bb      	ldr	r3, [r7, #24]
 80143bc:	68fa      	ldr	r2, [r7, #12]
 80143be:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	4a3f      	ldr	r2, [pc, #252]	; (80144c0 <ip4_frag+0x288>)
 80143c4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80143c6:	6979      	ldr	r1, [r7, #20]
 80143c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80143ca:	f7f7 fbfb 	bl	800bbc4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80143ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80143d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80143d6:	1ad3      	subs	r3, r2, r3
 80143d8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80143dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d004      	beq.n	80143ee <ip4_frag+0x1b6>
        poff = 0;
 80143e4:	2300      	movs	r3, #0
 80143e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80143ee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d196      	bne.n	8014324 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80143f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80143f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80143fc:	4413      	add	r3, r2
 80143fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014404:	f1a3 0213 	sub.w	r2, r3, #19
 8014408:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801440c:	429a      	cmp	r2, r3
 801440e:	bfcc      	ite	gt
 8014410:	2301      	movgt	r3, #1
 8014412:	2300      	movle	r3, #0
 8014414:	b2db      	uxtb	r3, r3
 8014416:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014418:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801441c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014420:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014422:	6a3b      	ldr	r3, [r7, #32]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d002      	beq.n	801442e <ip4_frag+0x1f6>
 8014428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801442a:	2b00      	cmp	r3, #0
 801442c:	d003      	beq.n	8014436 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801442e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014430:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014434:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014436:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014438:	4618      	mov	r0, r3
 801443a:	f7f5 ff17 	bl	800a26c <lwip_htons>
 801443e:	4603      	mov	r3, r0
 8014440:	461a      	mov	r2, r3
 8014442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014444:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014448:	3314      	adds	r3, #20
 801444a:	b29b      	uxth	r3, r3
 801444c:	4618      	mov	r0, r3
 801444e:	f7f5 ff0d 	bl	800a26c <lwip_htons>
 8014452:	4603      	mov	r3, r0
 8014454:	461a      	mov	r2, r3
 8014456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014458:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801445a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801445c:	2200      	movs	r2, #0
 801445e:	729a      	strb	r2, [r3, #10]
 8014460:	2200      	movs	r2, #0
 8014462:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	695b      	ldr	r3, [r3, #20]
 8014468:	687a      	ldr	r2, [r7, #4]
 801446a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801446c:	68b8      	ldr	r0, [r7, #8]
 801446e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014472:	f7f7 fad9 	bl	800ba28 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014476:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801447a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801447c:	1ad3      	subs	r3, r2, r3
 801447e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014482:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014486:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014488:	4413      	add	r3, r2
 801448a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801448e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014492:	2b00      	cmp	r3, #0
 8014494:	f47f af19 	bne.w	80142ca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014498:	2300      	movs	r3, #0
 801449a:	e002      	b.n	80144a2 <ip4_frag+0x26a>
      goto memerr;
 801449c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801449e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80144a2:	4618      	mov	r0, r3
 80144a4:	3748      	adds	r7, #72	; 0x48
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	08019158 	.word	0x08019158
 80144b0:	08019334 	.word	0x08019334
 80144b4:	080191a0 	.word	0x080191a0
 80144b8:	08019350 	.word	0x08019350
 80144bc:	08019370 	.word	0x08019370
 80144c0:	080141d1 	.word	0x080141d1

080144c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b086      	sub	sp, #24
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80144ce:	230e      	movs	r3, #14
 80144d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	895b      	ldrh	r3, [r3, #10]
 80144d6:	2b0e      	cmp	r3, #14
 80144d8:	d96e      	bls.n	80145b8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	7bdb      	ldrb	r3, [r3, #15]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d106      	bne.n	80144f0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80144e8:	3301      	adds	r3, #1
 80144ea:	b2da      	uxtb	r2, r3
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	7b1a      	ldrb	r2, [r3, #12]
 80144fa:	7b5b      	ldrb	r3, [r3, #13]
 80144fc:	021b      	lsls	r3, r3, #8
 80144fe:	4313      	orrs	r3, r2
 8014500:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	f003 0301 	and.w	r3, r3, #1
 801450a:	2b00      	cmp	r3, #0
 801450c:	d023      	beq.n	8014556 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	2b01      	cmp	r3, #1
 8014514:	d10f      	bne.n	8014536 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	785b      	ldrb	r3, [r3, #1]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d11b      	bne.n	8014556 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014522:	2b5e      	cmp	r3, #94	; 0x5e
 8014524:	d117      	bne.n	8014556 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	7b5b      	ldrb	r3, [r3, #13]
 801452a:	f043 0310 	orr.w	r3, r3, #16
 801452e:	b2da      	uxtb	r2, r3
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	735a      	strb	r2, [r3, #13]
 8014534:	e00f      	b.n	8014556 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014536:	693b      	ldr	r3, [r7, #16]
 8014538:	2206      	movs	r2, #6
 801453a:	4928      	ldr	r1, [pc, #160]	; (80145dc <ethernet_input+0x118>)
 801453c:	4618      	mov	r0, r3
 801453e:	f000 fe9a 	bl	8015276 <memcmp>
 8014542:	4603      	mov	r3, r0
 8014544:	2b00      	cmp	r3, #0
 8014546:	d106      	bne.n	8014556 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	7b5b      	ldrb	r3, [r3, #13]
 801454c:	f043 0308 	orr.w	r3, r3, #8
 8014550:	b2da      	uxtb	r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014556:	89fb      	ldrh	r3, [r7, #14]
 8014558:	2b08      	cmp	r3, #8
 801455a:	d003      	beq.n	8014564 <ethernet_input+0xa0>
 801455c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014560:	d014      	beq.n	801458c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014562:	e032      	b.n	80145ca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801456a:	f003 0308 	and.w	r3, r3, #8
 801456e:	2b00      	cmp	r3, #0
 8014570:	d024      	beq.n	80145bc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014572:	8afb      	ldrh	r3, [r7, #22]
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f7f7 f9d0 	bl	800b91c <pbuf_remove_header>
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	d11e      	bne.n	80145c0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014582:	6839      	ldr	r1, [r7, #0]
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f7fe ff21 	bl	80133cc <ip4_input>
      break;
 801458a:	e013      	b.n	80145b4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801458c:	683b      	ldr	r3, [r7, #0]
 801458e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014592:	f003 0308 	and.w	r3, r3, #8
 8014596:	2b00      	cmp	r3, #0
 8014598:	d014      	beq.n	80145c4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801459a:	8afb      	ldrh	r3, [r7, #22]
 801459c:	4619      	mov	r1, r3
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f7f7 f9bc 	bl	800b91c <pbuf_remove_header>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d10e      	bne.n	80145c8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80145aa:	6839      	ldr	r1, [r7, #0]
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f7fe f8c1 	bl	8012734 <etharp_input>
      break;
 80145b2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80145b4:	2300      	movs	r3, #0
 80145b6:	e00c      	b.n	80145d2 <ethernet_input+0x10e>
    goto free_and_return;
 80145b8:	bf00      	nop
 80145ba:	e006      	b.n	80145ca <ethernet_input+0x106>
        goto free_and_return;
 80145bc:	bf00      	nop
 80145be:	e004      	b.n	80145ca <ethernet_input+0x106>
        goto free_and_return;
 80145c0:	bf00      	nop
 80145c2:	e002      	b.n	80145ca <ethernet_input+0x106>
        goto free_and_return;
 80145c4:	bf00      	nop
 80145c6:	e000      	b.n	80145ca <ethernet_input+0x106>
        goto free_and_return;
 80145c8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f7f7 fa2c 	bl	800ba28 <pbuf_free>
  return ERR_OK;
 80145d0:	2300      	movs	r3, #0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3718      	adds	r7, #24
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	08019688 	.word	0x08019688

080145e0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b086      	sub	sp, #24
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	60f8      	str	r0, [r7, #12]
 80145e8:	60b9      	str	r1, [r7, #8]
 80145ea:	607a      	str	r2, [r7, #4]
 80145ec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80145ee:	8c3b      	ldrh	r3, [r7, #32]
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7f5 fe3b 	bl	800a26c <lwip_htons>
 80145f6:	4603      	mov	r3, r0
 80145f8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80145fa:	210e      	movs	r1, #14
 80145fc:	68b8      	ldr	r0, [r7, #8]
 80145fe:	f7f7 f97d 	bl	800b8fc <pbuf_add_header>
 8014602:	4603      	mov	r3, r0
 8014604:	2b00      	cmp	r3, #0
 8014606:	d125      	bne.n	8014654 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014608:	68bb      	ldr	r3, [r7, #8]
 801460a:	685b      	ldr	r3, [r3, #4]
 801460c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801460e:	693b      	ldr	r3, [r7, #16]
 8014610:	8afa      	ldrh	r2, [r7, #22]
 8014612:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014614:	693b      	ldr	r3, [r7, #16]
 8014616:	2206      	movs	r2, #6
 8014618:	6839      	ldr	r1, [r7, #0]
 801461a:	4618      	mov	r0, r3
 801461c:	f000 fe3b 	bl	8015296 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	3306      	adds	r3, #6
 8014624:	2206      	movs	r2, #6
 8014626:	6879      	ldr	r1, [r7, #4]
 8014628:	4618      	mov	r0, r3
 801462a:	f000 fe34 	bl	8015296 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014634:	2b06      	cmp	r3, #6
 8014636:	d006      	beq.n	8014646 <ethernet_output+0x66>
 8014638:	4b0a      	ldr	r3, [pc, #40]	; (8014664 <ethernet_output+0x84>)
 801463a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801463e:	490a      	ldr	r1, [pc, #40]	; (8014668 <ethernet_output+0x88>)
 8014640:	480a      	ldr	r0, [pc, #40]	; (801466c <ethernet_output+0x8c>)
 8014642:	f000 feed 	bl	8015420 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	699b      	ldr	r3, [r3, #24]
 801464a:	68b9      	ldr	r1, [r7, #8]
 801464c:	68f8      	ldr	r0, [r7, #12]
 801464e:	4798      	blx	r3
 8014650:	4603      	mov	r3, r0
 8014652:	e002      	b.n	801465a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014654:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014656:	f06f 0301 	mvn.w	r3, #1
}
 801465a:	4618      	mov	r0, r3
 801465c:	3718      	adds	r7, #24
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	08019380 	.word	0x08019380
 8014668:	080193b8 	.word	0x080193b8
 801466c:	080193ec 	.word	0x080193ec

08014670 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b086      	sub	sp, #24
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	60bb      	str	r3, [r7, #8]
 801467e:	2304      	movs	r3, #4
 8014680:	60fb      	str	r3, [r7, #12]
 8014682:	2300      	movs	r3, #0
 8014684:	613b      	str	r3, [r7, #16]
 8014686:	2300      	movs	r3, #0
 8014688:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801468a:	f107 0308 	add.w	r3, r7, #8
 801468e:	2100      	movs	r1, #0
 8014690:	4618      	mov	r0, r3
 8014692:	f7f2 f891 	bl	80067b8 <osMessageCreate>
 8014696:	4602      	mov	r2, r0
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d102      	bne.n	80146aa <sys_mbox_new+0x3a>
    return ERR_MEM;
 80146a4:	f04f 33ff 	mov.w	r3, #4294967295
 80146a8:	e000      	b.n	80146ac <sys_mbox_new+0x3c>

  return ERR_OK;
 80146aa:	2300      	movs	r3, #0
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3718      	adds	r7, #24
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd80      	pop	{r7, pc}

080146b4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b084      	sub	sp, #16
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	6839      	ldr	r1, [r7, #0]
 80146c4:	2200      	movs	r2, #0
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7f2 f89e 	bl	8006808 <osMessagePut>
 80146cc:	4603      	mov	r3, r0
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d102      	bne.n	80146d8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80146d2:	2300      	movs	r3, #0
 80146d4:	73fb      	strb	r3, [r7, #15]
 80146d6:	e001      	b.n	80146dc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80146d8:	23ff      	movs	r3, #255	; 0xff
 80146da:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80146dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	3710      	adds	r7, #16
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}

080146e8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b08c      	sub	sp, #48	; 0x30
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	61f8      	str	r0, [r7, #28]
 80146f0:	61b9      	str	r1, [r7, #24]
 80146f2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80146f4:	f7f1 fed0 	bl	8006498 <osKernelSysTick>
 80146f8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d017      	beq.n	8014730 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	6819      	ldr	r1, [r3, #0]
 8014704:	f107 0320 	add.w	r3, r7, #32
 8014708:	697a      	ldr	r2, [r7, #20]
 801470a:	4618      	mov	r0, r3
 801470c:	f7f2 f8bc 	bl	8006888 <osMessageGet>

    if(event.status == osEventMessage)
 8014710:	6a3b      	ldr	r3, [r7, #32]
 8014712:	2b10      	cmp	r3, #16
 8014714:	d109      	bne.n	801472a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014718:	461a      	mov	r2, r3
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801471e:	f7f1 febb 	bl	8006498 <osKernelSysTick>
 8014722:	4602      	mov	r2, r0
 8014724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014726:	1ad3      	subs	r3, r2, r3
 8014728:	e019      	b.n	801475e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801472a:	f04f 33ff 	mov.w	r3, #4294967295
 801472e:	e016      	b.n	801475e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014730:	69fb      	ldr	r3, [r7, #28]
 8014732:	6819      	ldr	r1, [r3, #0]
 8014734:	463b      	mov	r3, r7
 8014736:	f04f 32ff 	mov.w	r2, #4294967295
 801473a:	4618      	mov	r0, r3
 801473c:	f7f2 f8a4 	bl	8006888 <osMessageGet>
 8014740:	f107 0320 	add.w	r3, r7, #32
 8014744:	463a      	mov	r2, r7
 8014746:	ca07      	ldmia	r2, {r0, r1, r2}
 8014748:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474e:	461a      	mov	r2, r3
 8014750:	69bb      	ldr	r3, [r7, #24]
 8014752:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014754:	f7f1 fea0 	bl	8006498 <osKernelSysTick>
 8014758:	4602      	mov	r2, r0
 801475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801475c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801475e:	4618      	mov	r0, r3
 8014760:	3730      	adds	r7, #48	; 0x30
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}

08014766 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014766:	b480      	push	{r7}
 8014768:	b083      	sub	sp, #12
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d101      	bne.n	801477a <sys_mbox_valid+0x14>
    return 0;
 8014776:	2300      	movs	r3, #0
 8014778:	e000      	b.n	801477c <sys_mbox_valid+0x16>
  else
    return 1;
 801477a:	2301      	movs	r3, #1
}
 801477c:	4618      	mov	r0, r3
 801477e:	370c      	adds	r7, #12
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr

08014788 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014788:	b580      	push	{r7, lr}
 801478a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801478c:	4803      	ldr	r0, [pc, #12]	; (801479c <sys_init+0x14>)
 801478e:	f7f1 fef3 	bl	8006578 <osMutexCreate>
 8014792:	4603      	mov	r3, r0
 8014794:	4a02      	ldr	r2, [pc, #8]	; (80147a0 <sys_init+0x18>)
 8014796:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014798:	bf00      	nop
 801479a:	bd80      	pop	{r7, pc}
 801479c:	08019698 	.word	0x08019698
 80147a0:	20040c00 	.word	0x20040c00

080147a4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b084      	sub	sp, #16
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80147ac:	2300      	movs	r3, #0
 80147ae:	60bb      	str	r3, [r7, #8]
 80147b0:	2300      	movs	r3, #0
 80147b2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80147b4:	f107 0308 	add.w	r3, r7, #8
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f1 fedd 	bl	8006578 <osMutexCreate>
 80147be:	4602      	mov	r2, r0
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d102      	bne.n	80147d2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80147cc:	f04f 33ff 	mov.w	r3, #4294967295
 80147d0:	e000      	b.n	80147d4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80147d2:	2300      	movs	r3, #0
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3710      	adds	r7, #16
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b082      	sub	sp, #8
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	f04f 31ff 	mov.w	r1, #4294967295
 80147ec:	4618      	mov	r0, r3
 80147ee:	f7f1 fedb 	bl	80065a8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80147f2:	bf00      	nop
 80147f4:	3708      	adds	r7, #8
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}

080147fa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80147fa:	b580      	push	{r7, lr}
 80147fc:	b082      	sub	sp, #8
 80147fe:	af00      	add	r7, sp, #0
 8014800:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	4618      	mov	r0, r3
 8014808:	f7f1 ff1c 	bl	8006644 <osMutexRelease>
}
 801480c:	bf00      	nop
 801480e:	3708      	adds	r7, #8
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}

08014814 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b08c      	sub	sp, #48	; 0x30
 8014818:	af00      	add	r7, sp, #0
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	60b9      	str	r1, [r7, #8]
 801481e:	607a      	str	r2, [r7, #4]
 8014820:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014822:	f107 0314 	add.w	r3, r7, #20
 8014826:	2200      	movs	r2, #0
 8014828:	601a      	str	r2, [r3, #0]
 801482a:	605a      	str	r2, [r3, #4]
 801482c:	609a      	str	r2, [r3, #8]
 801482e:	60da      	str	r2, [r3, #12]
 8014830:	611a      	str	r2, [r3, #16]
 8014832:	615a      	str	r2, [r3, #20]
 8014834:	619a      	str	r2, [r3, #24]
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	617b      	str	r3, [r7, #20]
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	61bb      	str	r3, [r7, #24]
 801483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014840:	b21b      	sxth	r3, r3
 8014842:	83bb      	strh	r3, [r7, #28]
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014848:	f107 0314 	add.w	r3, r7, #20
 801484c:	6879      	ldr	r1, [r7, #4]
 801484e:	4618      	mov	r0, r3
 8014850:	f7f1 fe32 	bl	80064b8 <osThreadCreate>
 8014854:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014856:	4618      	mov	r0, r3
 8014858:	3730      	adds	r7, #48	; 0x30
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
	...

08014860 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014864:	4b04      	ldr	r3, [pc, #16]	; (8014878 <sys_arch_protect+0x18>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	f04f 31ff 	mov.w	r1, #4294967295
 801486c:	4618      	mov	r0, r3
 801486e:	f7f1 fe9b 	bl	80065a8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014872:	2301      	movs	r3, #1
}
 8014874:	4618      	mov	r0, r3
 8014876:	bd80      	pop	{r7, pc}
 8014878:	20040c00 	.word	0x20040c00

0801487c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b082      	sub	sp, #8
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014884:	4b04      	ldr	r3, [pc, #16]	; (8014898 <sys_arch_unprotect+0x1c>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	4618      	mov	r0, r3
 801488a:	f7f1 fedb 	bl	8006644 <osMutexRelease>
}
 801488e:	bf00      	nop
 8014890:	3708      	adds	r7, #8
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	20040c00 	.word	0x20040c00

0801489c <server_main>:
TickType_t xBlockTime = BLOCK_TIME; // ticks to wait for the semaphore to become available 50~.
//---------------------------------------------------------------------------------
extern struct tftp_context context; //context struct from TFTP.c to init the tftp.

/// @brief main function, create queues and tasks and start the scheduler
void server_main() {
 801489c:	b580      	push	{r7, lr}
 801489e:	b086      	sub	sp, #24
 80148a0:	af02      	add	r7, sp, #8

	/*
	 * generate departments queues (12) with error checking @see my_assert function
	 */
	for (int i = ZERO; i < NUM_OF_DEPS; ++i) {
 80148a2:	2300      	movs	r3, #0
 80148a4:	60fb      	str	r3, [r7, #12]
 80148a6:	e02c      	b.n	8014902 <server_main+0x66>
		for (int j = ZERO; j < NUM_OF_FIELDS; ++j) {
 80148a8:	2300      	movs	r3, #0
 80148aa:	60bb      	str	r3, [r7, #8]
 80148ac:	e023      	b.n	80148f6 <server_main+0x5a>
			QueueHandleArray[i][j] = xQueueCreate(Q_SIZE, sizeof(Event));
 80148ae:	2200      	movs	r2, #0
 80148b0:	2166      	movs	r1, #102	; 0x66
 80148b2:	200a      	movs	r0, #10
 80148b4:	f7f2 f9fc 	bl	8006cb0 <xQueueGenericCreate>
 80148b8:	4601      	mov	r1, r0
 80148ba:	4842      	ldr	r0, [pc, #264]	; (80149c4 <server_main+0x128>)
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	4613      	mov	r3, r2
 80148c0:	005b      	lsls	r3, r3, #1
 80148c2:	4413      	add	r3, r2
 80148c4:	68ba      	ldr	r2, [r7, #8]
 80148c6:	4413      	add	r3, r2
 80148c8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
			my_assert((QueueHandleArray[i][j] == NULL), "QueueHandleArray allocation failure\n");
 80148cc:	493d      	ldr	r1, [pc, #244]	; (80149c4 <server_main+0x128>)
 80148ce:	68fa      	ldr	r2, [r7, #12]
 80148d0:	4613      	mov	r3, r2
 80148d2:	005b      	lsls	r3, r3, #1
 80148d4:	4413      	add	r3, r2
 80148d6:	68ba      	ldr	r2, [r7, #8]
 80148d8:	4413      	add	r3, r2
 80148da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	bf0c      	ite	eq
 80148e2:	2301      	moveq	r3, #1
 80148e4:	2300      	movne	r3, #0
 80148e6:	b2db      	uxtb	r3, r3
 80148e8:	4937      	ldr	r1, [pc, #220]	; (80149c8 <server_main+0x12c>)
 80148ea:	4618      	mov	r0, r3
 80148ec:	f000 fae6 	bl	8014ebc <my_assert>
		for (int j = ZERO; j < NUM_OF_FIELDS; ++j) {
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	3301      	adds	r3, #1
 80148f4:	60bb      	str	r3, [r7, #8]
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	2b02      	cmp	r3, #2
 80148fa:	ddd8      	ble.n	80148ae <server_main+0x12>
	for (int i = ZERO; i < NUM_OF_DEPS; ++i) {
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	3301      	adds	r3, #1
 8014900:	60fb      	str	r3, [r7, #12]
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2b03      	cmp	r3, #3
 8014906:	ddcf      	ble.n	80148a8 <server_main+0xc>
	}

	/*
	 * creation of task named Dispatch which handles
	 */
	if (pdFAIL == xTaskCreate((TaskFunction_t) dispach_task, "Dispatch",STACK_SIZE,NULL, MED_PRIORITY, NULL)){
 8014908:	2300      	movs	r3, #0
 801490a:	9301      	str	r3, [sp, #4]
 801490c:	2302      	movs	r3, #2
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	2300      	movs	r3, #0
 8014912:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014916:	492d      	ldr	r1, [pc, #180]	; (80149cc <server_main+0x130>)
 8014918:	482d      	ldr	r0, [pc, #180]	; (80149d0 <server_main+0x134>)
 801491a:	f7f3 f8de 	bl	8007ada <xTaskCreate>
 801491e:	4603      	mov	r3, r0
 8014920:	2b00      	cmp	r3, #0
 8014922:	d103      	bne.n	801492c <server_main+0x90>
		 my_assert(false, "xTaskCreate failed");
 8014924:	492b      	ldr	r1, [pc, #172]	; (80149d4 <server_main+0x138>)
 8014926:	2000      	movs	r0, #0
 8014928:	f000 fac8 	bl	8014ebc <my_assert>
	}

	/*
	 * creation of task named LWIP
	 */
	if (pdFAIL == xTaskCreate((TaskFunction_t) lwip_initialization, "LWIP",STACK_SIZE, NULL, HIGH_PRIORITY, NULL)){
 801492c:	2300      	movs	r3, #0
 801492e:	9301      	str	r3, [sp, #4]
 8014930:	2303      	movs	r3, #3
 8014932:	9300      	str	r3, [sp, #0]
 8014934:	2300      	movs	r3, #0
 8014936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801493a:	4927      	ldr	r1, [pc, #156]	; (80149d8 <server_main+0x13c>)
 801493c:	4827      	ldr	r0, [pc, #156]	; (80149dc <server_main+0x140>)
 801493e:	f7f3 f8cc 	bl	8007ada <xTaskCreate>
 8014942:	4603      	mov	r3, r0
 8014944:	2b00      	cmp	r3, #0
 8014946:	d103      	bne.n	8014950 <server_main+0xb4>
		my_assert(false, "xTaskCreate failed");
 8014948:	4922      	ldr	r1, [pc, #136]	; (80149d4 <server_main+0x138>)
 801494a:	2000      	movs	r0, #0
 801494c:	f000 fab6 	bl	8014ebc <my_assert>
	}

	/*
	 * creation of department tasks
	 */
	for (int i = ZERO; i < NUM_OF_DEPS; ++i) {
 8014950:	2300      	movs	r3, #0
 8014952:	607b      	str	r3, [r7, #4]
 8014954:	e01b      	b.n	801498e <server_main+0xf2>
		if (pdFAIL == xTaskCreate((TaskFunction_t) departmental_task, deps_name[i],STACK_SIZE,(void*) i, MED_PRIORITY, &departments_handles[i])) {
 8014956:	4a22      	ldr	r2, [pc, #136]	; (80149e0 <server_main+0x144>)
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	009b      	lsls	r3, r3, #2
 8014964:	481f      	ldr	r0, [pc, #124]	; (80149e4 <server_main+0x148>)
 8014966:	4403      	add	r3, r0
 8014968:	9301      	str	r3, [sp, #4]
 801496a:	2302      	movs	r3, #2
 801496c:	9300      	str	r3, [sp, #0]
 801496e:	4613      	mov	r3, r2
 8014970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014974:	481c      	ldr	r0, [pc, #112]	; (80149e8 <server_main+0x14c>)
 8014976:	f7f3 f8b0 	bl	8007ada <xTaskCreate>
 801497a:	4603      	mov	r3, r0
 801497c:	2b00      	cmp	r3, #0
 801497e:	d103      	bne.n	8014988 <server_main+0xec>
			my_assert(false, "xTaskCreate failed");
 8014980:	4914      	ldr	r1, [pc, #80]	; (80149d4 <server_main+0x138>)
 8014982:	2000      	movs	r0, #0
 8014984:	f000 fa9a 	bl	8014ebc <my_assert>
	for (int i = ZERO; i < NUM_OF_DEPS; ++i) {
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	3301      	adds	r3, #1
 801498c:	607b      	str	r3, [r7, #4]
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	2b03      	cmp	r3, #3
 8014992:	dde0      	ble.n	8014956 <server_main+0xba>
		}
	}

	if (pdFAIL == xTaskCreate((TaskFunction_t) heartbeat_task, "heartbeat",STACK_SIZE,NULL, MED_PRIORITY, NULL)){
 8014994:	2300      	movs	r3, #0
 8014996:	9301      	str	r3, [sp, #4]
 8014998:	2302      	movs	r3, #2
 801499a:	9300      	str	r3, [sp, #0]
 801499c:	2300      	movs	r3, #0
 801499e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80149a2:	4912      	ldr	r1, [pc, #72]	; (80149ec <server_main+0x150>)
 80149a4:	4812      	ldr	r0, [pc, #72]	; (80149f0 <server_main+0x154>)
 80149a6:	f7f3 f898 	bl	8007ada <xTaskCreate>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d103      	bne.n	80149b8 <server_main+0x11c>
			 my_assert(false, "xTaskCreate failed");
 80149b0:	4908      	ldr	r1, [pc, #32]	; (80149d4 <server_main+0x138>)
 80149b2:	2000      	movs	r0, #0
 80149b4:	f000 fa82 	bl	8014ebc <my_assert>
	}

	/*
	* starting the freeRtos Scheduler
	*/
	vTaskStartScheduler();
 80149b8:	f7f3 fc52 	bl	8008260 <vTaskStartScheduler>
}
 80149bc:	bf00      	nop
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	20040c88 	.word	0x20040c88
 80149c8:	0801943c 	.word	0x0801943c
 80149cc:	08019464 	.word	0x08019464
 80149d0:	08014a15 	.word	0x08014a15
 80149d4:	08019470 	.word	0x08019470
 80149d8:	08019484 	.word	0x08019484
 80149dc:	08014e81 	.word	0x08014e81
 80149e0:	20000030 	.word	0x20000030
 80149e4:	20040c6c 	.word	0x20040c6c
 80149e8:	08014a99 	.word	0x08014a99
 80149ec:	0801948c 	.word	0x0801948c
 80149f0:	080149f5 	.word	0x080149f5

080149f4 <heartbeat_task>:
/*
 * heartbeat task function
 * indicated by the device that actived by toggle the red led
 *  blinking heartbeat
 */
void heartbeat_task(void const *argument){
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b082      	sub	sp, #8
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]

	while(TRUE){
		HAL_GPIO_TogglePin(GPIOB, GPIO_RED_LED);
 80149fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014a00:	4803      	ldr	r0, [pc, #12]	; (8014a10 <heartbeat_task+0x1c>)
 8014a02:	f7ee f91a 	bl	8002c3a <HAL_GPIO_TogglePin>
        vTaskDelay(100 / portTICK_PERIOD_MS);
 8014a06:	2064      	movs	r0, #100	; 0x64
 8014a08:	f7f3 facc 	bl	8007fa4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_RED_LED);
 8014a0c:	e7f6      	b.n	80149fc <heartbeat_task+0x8>
 8014a0e:	bf00      	nop
 8014a10:	40020400 	.word	0x40020400

08014a14 <dispach_task>:
 * dispatch task function
 * check for new event every 100ms (as said in the project)
 *  and indicated by the device that actived by toggle the red led
 *  blinking heartbeat
 */
void dispach_task(void const *argument) {
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b082      	sub	sp, #8
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]

	/*
	 * The count of ticks since vTaskStartScheduler was called
	 * Initialize the xLastWakeTime
	 */
	xLastWakeTime = xTaskGetTickCount();
 8014a1c:	f7f3 fd54 	bl	80084c8 <xTaskGetTickCount>
 8014a20:	4603      	mov	r3, r0
 8014a22:	4a18      	ldr	r2, [pc, #96]	; (8014a84 <dispach_task+0x70>)
 8014a24:	6013      	str	r3, [r2, #0]
	/*
	 * create binary semaphore to protect uart debug.
	 * there is assert function in case of failure of crating a semaphore @see my_assert
	 * for more details
	 */
	xUartSemaphore = xSemaphoreCreateBinary();
 8014a26:	2203      	movs	r2, #3
 8014a28:	2100      	movs	r1, #0
 8014a2a:	2001      	movs	r0, #1
 8014a2c:	f7f2 f940 	bl	8006cb0 <xQueueGenericCreate>
 8014a30:	4603      	mov	r3, r0
 8014a32:	4a15      	ldr	r2, [pc, #84]	; (8014a88 <dispach_task+0x74>)
 8014a34:	6013      	str	r3, [r2, #0]
	my_assert((xUartSemaphore == NULL),"xUartSemaphore allocation failure\n");
 8014a36:	4b14      	ldr	r3, [pc, #80]	; (8014a88 <dispach_task+0x74>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	bf0c      	ite	eq
 8014a3e:	2301      	moveq	r3, #1
 8014a40:	2300      	movne	r3, #0
 8014a42:	b2db      	uxtb	r3, r3
 8014a44:	4911      	ldr	r1, [pc, #68]	; (8014a8c <dispach_task+0x78>)
 8014a46:	4618      	mov	r0, r3
 8014a48:	f000 fa38 	bl	8014ebc <my_assert>

	/*
	 * giving a key to the first try
	 */
	xSemaphoreGive(xUartSemaphore);
 8014a4c:	4b0e      	ldr	r3, [pc, #56]	; (8014a88 <dispach_task+0x74>)
 8014a4e:	6818      	ldr	r0, [r3, #0]
 8014a50:	2300      	movs	r3, #0
 8014a52:	2200      	movs	r2, #0
 8014a54:	2100      	movs	r1, #0
 8014a56:	f7f2 f9d9 	bl	8006e0c <xQueueGenericSend>
	while (TRUE) {

		/*
		 * counting xFrequency amount of ticks from xLastWakeTime every 100ms
		 */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8014a5a:	2364      	movs	r3, #100	; 0x64
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	4809      	ldr	r0, [pc, #36]	; (8014a84 <dispach_task+0x70>)
 8014a60:	f7f3 fa1c 	bl	8007e9c <vTaskDelayUntil>

		/*
		 * new call to event
		 */
		if (new_call()) {
 8014a64:	f000 f9ac 	bl	8014dc0 <new_call>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d0f5      	beq.n	8014a5a <dispach_task+0x46>

			/*
			 * call to the right department
			 */
			vTaskResume(departments_handles[event_t.department]);
 8014a6e:	4b08      	ldr	r3, [pc, #32]	; (8014a90 <dispach_task+0x7c>)
 8014a70:	781b      	ldrb	r3, [r3, #0]
 8014a72:	461a      	mov	r2, r3
 8014a74:	4b07      	ldr	r3, [pc, #28]	; (8014a94 <dispach_task+0x80>)
 8014a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7f3 fb90 	bl	80081a0 <vTaskResume>
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8014a80:	e7eb      	b.n	8014a5a <dispach_task+0x46>
 8014a82:	bf00      	nop
 8014a84:	20040cb8 	.word	0x20040cb8
 8014a88:	20040da0 	.word	0x20040da0
 8014a8c:	08019498 	.word	0x08019498
 8014a90:	20040c04 	.word	0x20040c04
 8014a94:	20040c6c 	.word	0x20040c6c

08014a98 <departmental_task>:

/*
 * departmental_task is create three cases per department and sending them to the right queue.
 * id is passed from the task in main.
 */
void departmental_task(void const *argument) {
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b086      	sub	sp, #24
 8014a9c:	af02      	add	r7, sp, #8
 8014a9e:	6078      	str	r0, [r7, #4]

	/*
	 * id police = 0, fire = 1 , ambulance  = 2, maintenance = 3
	 */
	int id = (int) argument;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	60bb      	str	r3, [r7, #8]

	for (int i = ZERO; i < NUM_OF_FIELDS; i++) {
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	60fb      	str	r3, [r7, #12]
 8014aa8:	e02d      	b.n	8014b06 <departmental_task+0x6e>
		sprintf(name, "FID: %d",id * MULT + i);
 8014aaa:	68ba      	ldr	r2, [r7, #8]
 8014aac:	4613      	mov	r3, r2
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	4413      	add	r3, r2
 8014ab2:	005b      	lsls	r3, r3, #1
 8014ab4:	461a      	mov	r2, r3
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	4413      	add	r3, r2
 8014aba:	461a      	mov	r2, r3
 8014abc:	4935      	ldr	r1, [pc, #212]	; (8014b94 <departmental_task+0xfc>)
 8014abe:	4836      	ldr	r0, [pc, #216]	; (8014b98 <departmental_task+0x100>)
 8014ac0:	f000 fdf4 	bl	80156ac <siprintf>
		if (pdFAIL == xTaskCreate((TaskFunction_t) extractor, name, STACK_SIZE,(void*) (id * MULT + i), LOW_PRIORITY,&field_handles[i])) {
 8014ac4:	68ba      	ldr	r2, [r7, #8]
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	009b      	lsls	r3, r3, #2
 8014aca:	4413      	add	r3, r2
 8014acc:	005b      	lsls	r3, r3, #1
 8014ace:	461a      	mov	r2, r3
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	4413      	add	r3, r2
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4a30      	ldr	r2, [pc, #192]	; (8014b9c <departmental_task+0x104>)
 8014adc:	4413      	add	r3, r2
 8014ade:	9301      	str	r3, [sp, #4]
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	9300      	str	r3, [sp, #0]
 8014ae4:	460b      	mov	r3, r1
 8014ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014aea:	492b      	ldr	r1, [pc, #172]	; (8014b98 <departmental_task+0x100>)
 8014aec:	482c      	ldr	r0, [pc, #176]	; (8014ba0 <departmental_task+0x108>)
 8014aee:	f7f2 fff4 	bl	8007ada <xTaskCreate>
 8014af2:	4603      	mov	r3, r0
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d103      	bne.n	8014b00 <departmental_task+0x68>
			my_assert(false, "xTaskCreate failed");
 8014af8:	492a      	ldr	r1, [pc, #168]	; (8014ba4 <departmental_task+0x10c>)
 8014afa:	2000      	movs	r0, #0
 8014afc:	f000 f9de 	bl	8014ebc <my_assert>
	for (int i = ZERO; i < NUM_OF_FIELDS; i++) {
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	3301      	adds	r3, #1
 8014b04:	60fb      	str	r3, [r7, #12]
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2b02      	cmp	r3, #2
 8014b0a:	ddce      	ble.n	8014aaa <departmental_task+0x12>
	}

	/*
	 *  semaphore is used to control access to a queue
	 */
	xDepartmentSemaphore[id] = xSemaphoreCreateBinary();
 8014b0c:	2203      	movs	r2, #3
 8014b0e:	2100      	movs	r1, #0
 8014b10:	2001      	movs	r0, #1
 8014b12:	f7f2 f8cd 	bl	8006cb0 <xQueueGenericCreate>
 8014b16:	4602      	mov	r2, r0
 8014b18:	4923      	ldr	r1, [pc, #140]	; (8014ba8 <departmental_task+0x110>)
 8014b1a:	68bb      	ldr	r3, [r7, #8]
 8014b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	my_assert((xDepartmentSemaphore[id] == NULL), "xDepartmentSemaphore  failure\n");
 8014b20:	4a21      	ldr	r2, [pc, #132]	; (8014ba8 <departmental_task+0x110>)
 8014b22:	68bb      	ldr	r3, [r7, #8]
 8014b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	bf0c      	ite	eq
 8014b2c:	2301      	moveq	r3, #1
 8014b2e:	2300      	movne	r3, #0
 8014b30:	b2db      	uxtb	r3, r3
 8014b32:	491e      	ldr	r1, [pc, #120]	; (8014bac <departmental_task+0x114>)
 8014b34:	4618      	mov	r0, r3
 8014b36:	f000 f9c1 	bl	8014ebc <my_assert>
	while (TRUE) {

		/*
		 * suspend until waked by dispatcher
		 */
		vTaskSuspend(NULL);
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	f7f3 fa68 	bl	8008010 <vTaskSuspend>
		/*
		 * send new event into a queue
		 * with failure check
		 */
		if (pdFAIL == xQueueSend(QueueHandleArray[id][event_t.event_severity],(void* )&event_t, (TickType_t )QUEUE_DELAY)) {
 8014b40:	4b1b      	ldr	r3, [pc, #108]	; (8014bb0 <departmental_task+0x118>)
 8014b42:	785b      	ldrb	r3, [r3, #1]
 8014b44:	4618      	mov	r0, r3
 8014b46:	491b      	ldr	r1, [pc, #108]	; (8014bb4 <departmental_task+0x11c>)
 8014b48:	68ba      	ldr	r2, [r7, #8]
 8014b4a:	4613      	mov	r3, r2
 8014b4c:	005b      	lsls	r3, r3, #1
 8014b4e:	4413      	add	r3, r2
 8014b50:	4403      	add	r3, r0
 8014b52:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8014b56:	2300      	movs	r3, #0
 8014b58:	220a      	movs	r2, #10
 8014b5a:	4915      	ldr	r1, [pc, #84]	; (8014bb0 <departmental_task+0x118>)
 8014b5c:	f7f2 f956 	bl	8006e0c <xQueueGenericSend>
 8014b60:	4603      	mov	r3, r0
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d103      	bne.n	8014b6e <departmental_task+0xd6>
		    my_assert(false, "xQueueSend failed");
 8014b66:	4914      	ldr	r1, [pc, #80]	; (8014bb8 <departmental_task+0x120>)
 8014b68:	2000      	movs	r0, #0
 8014b6a:	f000 f9a7 	bl	8014ebc <my_assert>
		}
		/*
		 * give permission to access the queues
		 */
		xSemaphoreGive(xDepartmentSemaphore[id]);
 8014b6e:	4a0e      	ldr	r2, [pc, #56]	; (8014ba8 <departmental_task+0x110>)
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014b76:	2300      	movs	r3, #0
 8014b78:	2200      	movs	r2, #0
 8014b7a:	2100      	movs	r1, #0
 8014b7c:	f7f2 f946 	bl	8006e0c <xQueueGenericSend>

		event_counter[id]++;
 8014b80:	4a0e      	ldr	r2, [pc, #56]	; (8014bbc <departmental_task+0x124>)
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b88:	1c5a      	adds	r2, r3, #1
 8014b8a:	490c      	ldr	r1, [pc, #48]	; (8014bbc <departmental_task+0x124>)
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		vTaskSuspend(NULL);
 8014b92:	e7d2      	b.n	8014b3a <departmental_task+0xa2>
 8014b94:	080194bc 	.word	0x080194bc
 8014b98:	20040cbc 	.word	0x20040cbc
 8014b9c:	20040c7c 	.word	0x20040c7c
 8014ba0:	08014bc1 	.word	0x08014bc1
 8014ba4:	08019470 	.word	0x08019470
 8014ba8:	20040da4 	.word	0x20040da4
 8014bac:	080194c4 	.word	0x080194c4
 8014bb0:	20040c04 	.word	0x20040c04
 8014bb4:	20040c88 	.word	0x20040c88
 8014bb8:	080194e4 	.word	0x080194e4
 8014bbc:	20040d90 	.word	0x20040d90

08014bc0 <extractor>:

/*
 * @brief extractor function
 * the function is getting the values from queues and print them
 */
void extractor(void const *argument) {
 8014bc0:	b590      	push	{r4, r7, lr}
 8014bc2:	b0a3      	sub	sp, #140	; 0x8c
 8014bc4:	af04      	add	r7, sp, #16
 8014bc6:	6078      	str	r0, [r7, #4]
	Event event_recieved;
	//FLAG
	BaseType_t xQueueReciver = pdFAIL;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	677b      	str	r3, [r7, #116]	; 0x74
	// id % 10 = field id
	// id / 10 = dep id
	int id = (int) argument;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	673b      	str	r3, [r7, #112]	; 0x70

	while (TRUE) {

		//semaphore to protect UART (empty case)
		xSemaphoreTake(xDepartmentSemaphore[id / MULT], xBlockTime);
 8014bd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014bd2:	4a71      	ldr	r2, [pc, #452]	; (8014d98 <extractor+0x1d8>)
 8014bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8014bd8:	1092      	asrs	r2, r2, #2
 8014bda:	17db      	asrs	r3, r3, #31
 8014bdc:	1ad3      	subs	r3, r2, r3
 8014bde:	4a6f      	ldr	r2, [pc, #444]	; (8014d9c <extractor+0x1dc>)
 8014be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014be4:	4a6e      	ldr	r2, [pc, #440]	; (8014da0 <extractor+0x1e0>)
 8014be6:	6812      	ldr	r2, [r2, #0]
 8014be8:	4611      	mov	r1, r2
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7f2 fc30 	bl	8007450 <xQueueSemaphoreTake>

		if (uxQueueMessagesWaiting(QueueHandleArray[id / MULT][CRITICAL])) {
 8014bf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014bf2:	4a69      	ldr	r2, [pc, #420]	; (8014d98 <extractor+0x1d8>)
 8014bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8014bf8:	1092      	asrs	r2, r2, #2
 8014bfa:	17db      	asrs	r3, r3, #31
 8014bfc:	1ad2      	subs	r2, r2, r3
 8014bfe:	4969      	ldr	r1, [pc, #420]	; (8014da4 <extractor+0x1e4>)
 8014c00:	4613      	mov	r3, r2
 8014c02:	005b      	lsls	r3, r3, #1
 8014c04:	4413      	add	r3, r2
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	440b      	add	r3, r1
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7f2 fdb9 	bl	8007784 <uxQueueMessagesWaiting>
 8014c12:	4603      	mov	r3, r0
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d015      	beq.n	8014c44 <extractor+0x84>
			xQueueReciver = xQueueReceive(QueueHandleArray[id / MULT][CRITICAL],(void*) &event_recieved, (TickType_t) QUEUE_DELAY);
 8014c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c1a:	4a5f      	ldr	r2, [pc, #380]	; (8014d98 <extractor+0x1d8>)
 8014c1c:	fb82 1203 	smull	r1, r2, r2, r3
 8014c20:	1092      	asrs	r2, r2, #2
 8014c22:	17db      	asrs	r3, r3, #31
 8014c24:	1ad2      	subs	r2, r2, r3
 8014c26:	495f      	ldr	r1, [pc, #380]	; (8014da4 <extractor+0x1e4>)
 8014c28:	4613      	mov	r3, r2
 8014c2a:	005b      	lsls	r3, r3, #1
 8014c2c:	4413      	add	r3, r2
 8014c2e:	009b      	lsls	r3, r3, #2
 8014c30:	440b      	add	r3, r1
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	f107 0108 	add.w	r1, r7, #8
 8014c38:	220a      	movs	r2, #10
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7f2 fb22 	bl	8007284 <xQueueReceive>
 8014c40:	6778      	str	r0, [r7, #116]	; 0x74
 8014c42:	e056      	b.n	8014cf2 <extractor+0x132>
		} else if (uxQueueMessagesWaiting(QueueHandleArray[id / MULT][WARNING])) {
 8014c44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c46:	4a54      	ldr	r2, [pc, #336]	; (8014d98 <extractor+0x1d8>)
 8014c48:	fb82 1203 	smull	r1, r2, r2, r3
 8014c4c:	1092      	asrs	r2, r2, #2
 8014c4e:	17db      	asrs	r3, r3, #31
 8014c50:	1ad2      	subs	r2, r2, r3
 8014c52:	4954      	ldr	r1, [pc, #336]	; (8014da4 <extractor+0x1e4>)
 8014c54:	4613      	mov	r3, r2
 8014c56:	005b      	lsls	r3, r3, #1
 8014c58:	4413      	add	r3, r2
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	440b      	add	r3, r1
 8014c5e:	3304      	adds	r3, #4
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	4618      	mov	r0, r3
 8014c64:	f7f2 fd8e 	bl	8007784 <uxQueueMessagesWaiting>
 8014c68:	4603      	mov	r3, r0
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d016      	beq.n	8014c9c <extractor+0xdc>
			xQueueReciver = xQueueReceive(QueueHandleArray[id / MULT][WARNING],(void*) &event_recieved, (TickType_t) QUEUE_DELAY);
 8014c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c70:	4a49      	ldr	r2, [pc, #292]	; (8014d98 <extractor+0x1d8>)
 8014c72:	fb82 1203 	smull	r1, r2, r2, r3
 8014c76:	1092      	asrs	r2, r2, #2
 8014c78:	17db      	asrs	r3, r3, #31
 8014c7a:	1ad2      	subs	r2, r2, r3
 8014c7c:	4949      	ldr	r1, [pc, #292]	; (8014da4 <extractor+0x1e4>)
 8014c7e:	4613      	mov	r3, r2
 8014c80:	005b      	lsls	r3, r3, #1
 8014c82:	4413      	add	r3, r2
 8014c84:	009b      	lsls	r3, r3, #2
 8014c86:	440b      	add	r3, r1
 8014c88:	3304      	adds	r3, #4
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	f107 0108 	add.w	r1, r7, #8
 8014c90:	220a      	movs	r2, #10
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7f2 faf6 	bl	8007284 <xQueueReceive>
 8014c98:	6778      	str	r0, [r7, #116]	; 0x74
 8014c9a:	e02a      	b.n	8014cf2 <extractor+0x132>
		} else if (uxQueueMessagesWaiting(QueueHandleArray[id / MULT][NOTICE])) {
 8014c9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c9e:	4a3e      	ldr	r2, [pc, #248]	; (8014d98 <extractor+0x1d8>)
 8014ca0:	fb82 1203 	smull	r1, r2, r2, r3
 8014ca4:	1092      	asrs	r2, r2, #2
 8014ca6:	17db      	asrs	r3, r3, #31
 8014ca8:	1ad2      	subs	r2, r2, r3
 8014caa:	493e      	ldr	r1, [pc, #248]	; (8014da4 <extractor+0x1e4>)
 8014cac:	4613      	mov	r3, r2
 8014cae:	005b      	lsls	r3, r3, #1
 8014cb0:	4413      	add	r3, r2
 8014cb2:	009b      	lsls	r3, r3, #2
 8014cb4:	440b      	add	r3, r1
 8014cb6:	3308      	adds	r3, #8
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7f2 fd62 	bl	8007784 <uxQueueMessagesWaiting>
 8014cc0:	4603      	mov	r3, r0
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d015      	beq.n	8014cf2 <extractor+0x132>
			xQueueReciver = xQueueReceive(QueueHandleArray[id / MULT][NOTICE],(void*) &event_recieved, (TickType_t) QUEUE_DELAY);
 8014cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014cc8:	4a33      	ldr	r2, [pc, #204]	; (8014d98 <extractor+0x1d8>)
 8014cca:	fb82 1203 	smull	r1, r2, r2, r3
 8014cce:	1092      	asrs	r2, r2, #2
 8014cd0:	17db      	asrs	r3, r3, #31
 8014cd2:	1ad2      	subs	r2, r2, r3
 8014cd4:	4933      	ldr	r1, [pc, #204]	; (8014da4 <extractor+0x1e4>)
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	005b      	lsls	r3, r3, #1
 8014cda:	4413      	add	r3, r2
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	440b      	add	r3, r1
 8014ce0:	3308      	adds	r3, #8
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	f107 0108 	add.w	r1, r7, #8
 8014ce8:	220a      	movs	r2, #10
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7f2 faca 	bl	8007284 <xQueueReceive>
 8014cf0:	6778      	str	r0, [r7, #116]	; 0x74
		}

		if (xQueueReciver == pdPASS) {
 8014cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014cf4:	2b01      	cmp	r3, #1
 8014cf6:	f47f af6b 	bne.w	8014bd0 <extractor+0x10>
			xSemaphoreTake(xUartSemaphore, xBlockTime);
 8014cfa:	4b2b      	ldr	r3, [pc, #172]	; (8014da8 <extractor+0x1e8>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	4a28      	ldr	r2, [pc, #160]	; (8014da0 <extractor+0x1e0>)
 8014d00:	6812      	ldr	r2, [r2, #0]
 8014d02:	4611      	mov	r1, r2
 8014d04:	4618      	mov	r0, r3
 8014d06:	f7f2 fba3 	bl	8007450 <xQueueSemaphoreTake>

			sprintf(buffer,"address: %s, severity: %d, department : %s,field: %d total department events: %d\r\n",
			event_recieved.event_address, event_recieved.event_severity,
 8014d0a:	7a7b      	ldrb	r3, [r7, #9]
			sprintf(buffer,"address: %s, severity: %d, department : %s,field: %d total department events: %d\r\n",
 8014d0c:	461c      	mov	r4, r3
			deps_name[id / MULT], id % MULT, event_counter[id / MULT]);
 8014d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014d10:	4a21      	ldr	r2, [pc, #132]	; (8014d98 <extractor+0x1d8>)
 8014d12:	fb82 1203 	smull	r1, r2, r2, r3
 8014d16:	1092      	asrs	r2, r2, #2
 8014d18:	17db      	asrs	r3, r3, #31
 8014d1a:	1ad3      	subs	r3, r2, r3
			sprintf(buffer,"address: %s, severity: %d, department : %s,field: %d total department events: %d\r\n",
 8014d1c:	4a23      	ldr	r2, [pc, #140]	; (8014dac <extractor+0x1ec>)
 8014d1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014d22:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014d24:	4b1c      	ldr	r3, [pc, #112]	; (8014d98 <extractor+0x1d8>)
 8014d26:	fb83 2301 	smull	r2, r3, r3, r1
 8014d2a:	109a      	asrs	r2, r3, #2
 8014d2c:	17cb      	asrs	r3, r1, #31
 8014d2e:	1ad2      	subs	r2, r2, r3
 8014d30:	4613      	mov	r3, r2
 8014d32:	009b      	lsls	r3, r3, #2
 8014d34:	4413      	add	r3, r2
 8014d36:	005b      	lsls	r3, r3, #1
 8014d38:	1aca      	subs	r2, r1, r3
			deps_name[id / MULT], id % MULT, event_counter[id / MULT]);
 8014d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014d3c:	4916      	ldr	r1, [pc, #88]	; (8014d98 <extractor+0x1d8>)
 8014d3e:	fb81 c103 	smull	ip, r1, r1, r3
 8014d42:	1089      	asrs	r1, r1, #2
 8014d44:	17db      	asrs	r3, r3, #31
 8014d46:	1acb      	subs	r3, r1, r3
			sprintf(buffer,"address: %s, severity: %d, department : %s,field: %d total department events: %d\r\n",
 8014d48:	4919      	ldr	r1, [pc, #100]	; (8014db0 <extractor+0x1f0>)
 8014d4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014d4e:	f107 0108 	add.w	r1, r7, #8
 8014d52:	3102      	adds	r1, #2
 8014d54:	9302      	str	r3, [sp, #8]
 8014d56:	9201      	str	r2, [sp, #4]
 8014d58:	9000      	str	r0, [sp, #0]
 8014d5a:	4623      	mov	r3, r4
 8014d5c:	460a      	mov	r2, r1
 8014d5e:	4915      	ldr	r1, [pc, #84]	; (8014db4 <extractor+0x1f4>)
 8014d60:	4815      	ldr	r0, [pc, #84]	; (8014db8 <extractor+0x1f8>)
 8014d62:	f000 fca3 	bl	80156ac <siprintf>

			HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) buffer, strlen(buffer),UART_TIMEOUT);
 8014d66:	4814      	ldr	r0, [pc, #80]	; (8014db8 <extractor+0x1f8>)
 8014d68:	f7eb fa52 	bl	8000210 <strlen>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	b29a      	uxth	r2, r3
 8014d70:	2364      	movs	r3, #100	; 0x64
 8014d72:	4911      	ldr	r1, [pc, #68]	; (8014db8 <extractor+0x1f8>)
 8014d74:	4811      	ldr	r0, [pc, #68]	; (8014dbc <extractor+0x1fc>)
 8014d76:	f7ef fced 	bl	8004754 <HAL_UART_Transmit>

			//busy wait for 300ms
			HAL_Delay(BUSY_WAIT_TIME);
 8014d7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8014d7e:	f7ec f9e3 	bl	8001148 <HAL_Delay>

			//avoid multiple prints of the same event
			xQueueReciver = pdFAIL;
 8014d82:	2300      	movs	r3, #0
 8014d84:	677b      	str	r3, [r7, #116]	; 0x74

			xSemaphoreGive(xUartSemaphore);
 8014d86:	4b08      	ldr	r3, [pc, #32]	; (8014da8 <extractor+0x1e8>)
 8014d88:	6818      	ldr	r0, [r3, #0]
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	2100      	movs	r1, #0
 8014d90:	f7f2 f83c 	bl	8006e0c <xQueueGenericSend>
		xSemaphoreTake(xDepartmentSemaphore[id / MULT], xBlockTime);
 8014d94:	e71c      	b.n	8014bd0 <extractor+0x10>
 8014d96:	bf00      	nop
 8014d98:	66666667 	.word	0x66666667
 8014d9c:	20040da4 	.word	0x20040da4
 8014da0:	20000040 	.word	0x20000040
 8014da4:	20040c88 	.word	0x20040c88
 8014da8:	20040da0 	.word	0x20040da0
 8014dac:	20000030 	.word	0x20000030
 8014db0:	20040d90 	.word	0x20040d90
 8014db4:	080194f8 	.word	0x080194f8
 8014db8:	20040cc8 	.word	0x20040cc8
 8014dbc:	200004c8 	.word	0x200004c8

08014dc0 <new_call>:
 * @brief new_call function
 * the function check if event has received correctly
 * if correctly true
 * if not correctly false
 */
uint8_t new_call() {
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b082      	sub	sp, #8
 8014dc4:	af00      	add	r7, sp, #0
	//convert the first two bytes to its int values 
	event_t.department = (uint8_t) tftp_buffer[0] - ASCII_DELTA;
 8014dc6:	4b29      	ldr	r3, [pc, #164]	; (8014e6c <new_call+0xac>)
 8014dc8:	781b      	ldrb	r3, [r3, #0]
 8014dca:	3b30      	subs	r3, #48	; 0x30
 8014dcc:	b2da      	uxtb	r2, r3
 8014dce:	4b28      	ldr	r3, [pc, #160]	; (8014e70 <new_call+0xb0>)
 8014dd0:	701a      	strb	r2, [r3, #0]
	event_t.event_severity = (uint8_t) tftp_buffer[1] - ASCII_DELTA;
 8014dd2:	4b26      	ldr	r3, [pc, #152]	; (8014e6c <new_call+0xac>)
 8014dd4:	785b      	ldrb	r3, [r3, #1]
 8014dd6:	3b30      	subs	r3, #48	; 0x30
 8014dd8:	b2da      	uxtb	r2, r3
 8014dda:	4b25      	ldr	r3, [pc, #148]	; (8014e70 <new_call+0xb0>)
 8014ddc:	705a      	strb	r2, [r3, #1]

	//save the address string (up to 80 bytes) along with the padding (minimum of 18 bytes)
	sprintf(event_t.event_address, "%s", &tftp_buffer[2]);
 8014dde:	4a25      	ldr	r2, [pc, #148]	; (8014e74 <new_call+0xb4>)
 8014de0:	4925      	ldr	r1, [pc, #148]	; (8014e78 <new_call+0xb8>)
 8014de2:	4826      	ldr	r0, [pc, #152]	; (8014e7c <new_call+0xbc>)
 8014de4:	f000 fc62 	bl	80156ac <siprintf>

	memset(tftp_buffer, 7, sizeof(tftp_buffer));
 8014de8:	2264      	movs	r2, #100	; 0x64
 8014dea:	2107      	movs	r1, #7
 8014dec:	481f      	ldr	r0, [pc, #124]	; (8014e6c <new_call+0xac>)
 8014dee:	f000 fa7a 	bl	80152e6 <memset>

	if (event_t.department < POLICE || event_t.department > MAINTAINCE) {
 8014df2:	4b1f      	ldr	r3, [pc, #124]	; (8014e70 <new_call+0xb0>)
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	2b03      	cmp	r3, #3
 8014df8:	d901      	bls.n	8014dfe <new_call+0x3e>
		return FALSE;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	e031      	b.n	8014e62 <new_call+0xa2>
	}
	if (event_t.event_severity < CRITICAL || event_t.event_severity > NOTICE) {
 8014dfe:	4b1c      	ldr	r3, [pc, #112]	; (8014e70 <new_call+0xb0>)
 8014e00:	785b      	ldrb	r3, [r3, #1]
 8014e02:	2b02      	cmp	r3, #2
 8014e04:	d901      	bls.n	8014e0a <new_call+0x4a>
		return FALSE;
 8014e06:	2300      	movs	r3, #0
 8014e08:	e02b      	b.n	8014e62 <new_call+0xa2>
	}

	if (strlen(event_t.event_address) < 98) {
 8014e0a:	481c      	ldr	r0, [pc, #112]	; (8014e7c <new_call+0xbc>)
 8014e0c:	f7eb fa00 	bl	8000210 <strlen>
 8014e10:	4603      	mov	r3, r0
 8014e12:	2b61      	cmp	r3, #97	; 0x61
 8014e14:	d801      	bhi.n	8014e1a <new_call+0x5a>
		return FALSE;
 8014e16:	2300      	movs	r3, #0
 8014e18:	e023      	b.n	8014e62 <new_call+0xa2>
	}
//remove padding from address
	for (uint8_t i = strlen(event_t.event_address) - 1; i > 0; i--) {
 8014e1a:	4818      	ldr	r0, [pc, #96]	; (8014e7c <new_call+0xbc>)
 8014e1c:	f7eb f9f8 	bl	8000210 <strlen>
 8014e20:	4603      	mov	r3, r0
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	3b01      	subs	r3, #1
 8014e26:	71fb      	strb	r3, [r7, #7]
 8014e28:	e00d      	b.n	8014e46 <new_call+0x86>
		if (event_t.event_address[i] != '1') {
 8014e2a:	79fb      	ldrb	r3, [r7, #7]
 8014e2c:	4a10      	ldr	r2, [pc, #64]	; (8014e70 <new_call+0xb0>)
 8014e2e:	4413      	add	r3, r2
 8014e30:	789b      	ldrb	r3, [r3, #2]
 8014e32:	2b31      	cmp	r3, #49	; 0x31
 8014e34:	d10b      	bne.n	8014e4e <new_call+0x8e>
			break;
		}
		event_t.event_address[i] = '\0';
 8014e36:	79fb      	ldrb	r3, [r7, #7]
 8014e38:	4a0d      	ldr	r2, [pc, #52]	; (8014e70 <new_call+0xb0>)
 8014e3a:	4413      	add	r3, r2
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	709a      	strb	r2, [r3, #2]
	for (uint8_t i = strlen(event_t.event_address) - 1; i > 0; i--) {
 8014e40:	79fb      	ldrb	r3, [r7, #7]
 8014e42:	3b01      	subs	r3, #1
 8014e44:	71fb      	strb	r3, [r7, #7]
 8014e46:	79fb      	ldrb	r3, [r7, #7]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d1ee      	bne.n	8014e2a <new_call+0x6a>
 8014e4c:	e000      	b.n	8014e50 <new_call+0x90>
			break;
 8014e4e:	bf00      	nop
	}

	//check if the address string is in its defined range
	if (strlen(event_t.event_address) > MAX_ADDRS_SIZE) {
 8014e50:	480a      	ldr	r0, [pc, #40]	; (8014e7c <new_call+0xbc>)
 8014e52:	f7eb f9dd 	bl	8000210 <strlen>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b50      	cmp	r3, #80	; 0x50
 8014e5a:	d901      	bls.n	8014e60 <new_call+0xa0>
		return FALSE;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	e000      	b.n	8014e62 <new_call+0xa2>
	}

	return TRUE;
 8014e60:	2301      	movs	r3, #1
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3708      	adds	r7, #8
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	20040db4 	.word	0x20040db4
 8014e70:	20040c04 	.word	0x20040c04
 8014e74:	20040db6 	.word	0x20040db6
 8014e78:	0801954c 	.word	0x0801954c
 8014e7c:	20040c06 	.word	0x20040c06

08014e80 <lwip_initialization>:
 * @brief lwip_initialization function
 * the function initialize LWIP and TFTP @see MX_LWIP_Init @see tftp_init
 * on success of tftp init the function will delete after execute
 * on failure of tftp init the function will stop the Scheduler and exit with error code 1
 */
void lwip_initialization(void const *argument) {
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b084      	sub	sp, #16
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
	MX_LWIP_Init();
 8014e88:	f7f0 fca4 	bl	80057d4 <MX_LWIP_Init>
	err_t result = tftp_init(&context);
 8014e8c:	480a      	ldr	r0, [pc, #40]	; (8014eb8 <lwip_initialization+0x38>)
 8014e8e:	f7f5 f9ab 	bl	800a1e8 <tftp_init>
 8014e92:	4603      	mov	r3, r0
 8014e94:	73fb      	strb	r3, [r7, #15]
	if(result != ERR_OK){
 8014e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d004      	beq.n	8014ea8 <lwip_initialization+0x28>
		vTaskEndScheduler();
 8014e9e:	f7f3 fa4d 	bl	800833c <vTaskEndScheduler>
		exit(EXIT_FAILURE);
 8014ea2:	2001      	movs	r0, #1
 8014ea4:	f000 f8b6 	bl	8015014 <exit>
	}
	vTaskDelete(NULL);
 8014ea8:	2000      	movs	r0, #0
 8014eaa:	f7f2 ff65 	bl	8007d78 <vTaskDelete>
}
 8014eae:	bf00      	nop
 8014eb0:	3710      	adds	r7, #16
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	20000044 	.word	0x20000044

08014ebc <my_assert>:
/*
 * @brief my_assert function , checks the condition
 * on success the code runs as usual
 * on failure return exit code 1
 */
void my_assert(bool cond,const char *msg) {
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b09c      	sub	sp, #112	; 0x70
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	6039      	str	r1, [r7, #0]
 8014ec6:	71fb      	strb	r3, [r7, #7]
	if (cond) {
 8014ec8:	79fb      	ldrb	r3, [r7, #7]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d00d      	beq.n	8014eea <my_assert+0x2e>
		char buff[BUFF_SIZE_DATA];
		strcpy(buff,msg);
 8014ece:	f107 030c 	add.w	r3, r7, #12
 8014ed2:	6839      	ldr	r1, [r7, #0]
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f000 fc4c 	bl	8015772 <strcpy>
		puts(buff);
 8014eda:	f107 030c 	add.w	r3, r7, #12
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f000 fb24 	bl	801552c <puts>
		exit(EXIT_FAILURE);
 8014ee4:	2001      	movs	r0, #1
 8014ee6:	f000 f895 	bl	8015014 <exit>
	}
}
 8014eea:	bf00      	nop
 8014eec:	3770      	adds	r7, #112	; 0x70
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}
	...

08014ef4 <tftp_open>:
char tftp_buffer[100];// global buffer for getting raw data from ethernet packets

struct tftp_context context = { .open = tftp_open, .write = tftp_write, .read =
		tftp_read, .close = tftp_close }; //context struct to init the tftp

void* tftp_open(const char* fname, const char* mode, u8_t write){
 8014ef4:	b480      	push	{r7}
 8014ef6:	b085      	sub	sp, #20
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	4613      	mov	r3, r2
 8014f00:	71fb      	strb	r3, [r7, #7]
	return tftp_buffer;
 8014f02:	4b03      	ldr	r3, [pc, #12]	; (8014f10 <tftp_open+0x1c>)
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3714      	adds	r7, #20
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr
 8014f10:	20040db4 	.word	0x20040db4

08014f14 <tftp_write>:


int tftp_write(void* handle, struct pbuf* p){
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b082      	sub	sp, #8
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
 8014f1c:	6039      	str	r1, [r7, #0]
	memcpy(tftp_buffer,p->payload,p->len);
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	6859      	ldr	r1, [r3, #4]
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	895b      	ldrh	r3, [r3, #10]
 8014f26:	461a      	mov	r2, r3
 8014f28:	4803      	ldr	r0, [pc, #12]	; (8014f38 <tftp_write+0x24>)
 8014f2a:	f000 f9b4 	bl	8015296 <memcpy>

	return 0;
 8014f2e:	2300      	movs	r3, #0
}
 8014f30:	4618      	mov	r0, r3
 8014f32:	3708      	adds	r7, #8
 8014f34:	46bd      	mov	sp, r7
 8014f36:	bd80      	pop	{r7, pc}
 8014f38:	20040db4 	.word	0x20040db4

08014f3c <tftp_close>:
void tftp_close(void* handle){}
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
 8014f44:	bf00      	nop
 8014f46:	370c      	adds	r7, #12
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4e:	4770      	bx	lr

08014f50 <tftp_read>:
int  tftp_read(void* handle, void* buf, int bytes){
 8014f50:	b480      	push	{r7}
 8014f52:	b085      	sub	sp, #20
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	60f8      	str	r0, [r7, #12]
 8014f58:	60b9      	str	r1, [r7, #8]
 8014f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8014f5c:	2300      	movs	r3, #0
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3714      	adds	r7, #20
 8014f62:	46bd      	mov	sp, r7
 8014f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f68:	4770      	bx	lr
	...

08014f6c <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, UNO, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b084      	sub	sp, #16
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	60f8      	str	r0, [r7, #12]
 8014f74:	60b9      	str	r1, [r7, #8]
 8014f76:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) ptr, len, 0xFFFF);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f80:	68b9      	ldr	r1, [r7, #8]
 8014f82:	4804      	ldr	r0, [pc, #16]	; (8014f94 <_write+0x28>)
 8014f84:	f7ef fbe6 	bl	8004754 <HAL_UART_Transmit>
	return len;
 8014f88:	687b      	ldr	r3, [r7, #4]
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3710      	adds	r7, #16
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	200004c8 	.word	0x200004c8

08014f98 <_read>:

// scanf
int _read(int file, char *ptr, int len) {
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b086      	sub	sp, #24
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	60b9      	str	r1, [r7, #8]
 8014fa2:	607a      	str	r2, [r7, #4]
	int ch = ZERO;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUGER, (uint8_t*) &ch, UNO, HAL_MAX_DELAY);
 8014fa8:	f107 0114 	add.w	r1, r7, #20
 8014fac:	f04f 33ff 	mov.w	r3, #4294967295
 8014fb0:	2201      	movs	r2, #1
 8014fb2:	4817      	ldr	r0, [pc, #92]	; (8015010 <_read+0x78>)
 8014fb4:	f7ef fc51 	bl	800485a <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, UNO, HAL_MAX_DELAY);
 8014fb8:	f107 0114 	add.w	r1, r7, #20
 8014fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc0:	2201      	movs	r2, #1
 8014fc2:	4813      	ldr	r0, [pc, #76]	; (8015010 <_read+0x78>)
 8014fc4:	f7ef fbc6 	bl	8004754 <HAL_UART_Transmit>
	if (ch == THREE_TEEN) {
 8014fc8:	697b      	ldr	r3, [r7, #20]
 8014fca:	2b0d      	cmp	r3, #13
 8014fcc:	d10a      	bne.n	8014fe4 <_read+0x4c>
		ch = TEN;
 8014fce:	230a      	movs	r3, #10
 8014fd0:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, UNO, HAL_MAX_DELAY);
 8014fd2:	f107 0114 	add.w	r1, r7, #20
 8014fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8014fda:	2201      	movs	r2, #1
 8014fdc:	480c      	ldr	r0, [pc, #48]	; (8015010 <_read+0x78>)
 8014fde:	f7ef fbb9 	bl	8004754 <HAL_UART_Transmit>
 8014fe2:	e00c      	b.n	8014ffe <_read+0x66>
	} else if (ch == BYTE) {
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	2b08      	cmp	r3, #8
 8014fe8:	d109      	bne.n	8014ffe <_read+0x66>
		ch = 0x30;
 8014fea:	2330      	movs	r3, #48	; 0x30
 8014fec:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUGER, (uint8_t*) &ch, UNO, HAL_MAX_DELAY);
 8014fee:	f107 0114 	add.w	r1, r7, #20
 8014ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ff6:	2201      	movs	r2, #1
 8014ff8:	4805      	ldr	r0, [pc, #20]	; (8015010 <_read+0x78>)
 8014ffa:	f7ef fbab 	bl	8004754 <HAL_UART_Transmit>
	}
	*ptr = ch;
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	b2da      	uxtb	r2, r3
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	701a      	strb	r2, [r3, #0]
	return UNO;
 8015006:	2301      	movs	r3, #1
}
 8015008:	4618      	mov	r0, r3
 801500a:	3718      	adds	r7, #24
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	200004c8 	.word	0x200004c8

08015014 <exit>:
 8015014:	b508      	push	{r3, lr}
 8015016:	4b07      	ldr	r3, [pc, #28]	; (8015034 <exit+0x20>)
 8015018:	4604      	mov	r4, r0
 801501a:	b113      	cbz	r3, 8015022 <exit+0xe>
 801501c:	2100      	movs	r1, #0
 801501e:	f3af 8000 	nop.w
 8015022:	4b05      	ldr	r3, [pc, #20]	; (8015038 <exit+0x24>)
 8015024:	6818      	ldr	r0, [r3, #0]
 8015026:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015028:	b103      	cbz	r3, 801502c <exit+0x18>
 801502a:	4798      	blx	r3
 801502c:	4620      	mov	r0, r4
 801502e:	f7eb fe4b 	bl	8000cc8 <_exit>
 8015032:	bf00      	nop
 8015034:	00000000 	.word	0x00000000
 8015038:	08019700 	.word	0x08019700

0801503c <std>:
 801503c:	2300      	movs	r3, #0
 801503e:	b510      	push	{r4, lr}
 8015040:	4604      	mov	r4, r0
 8015042:	e9c0 3300 	strd	r3, r3, [r0]
 8015046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801504a:	6083      	str	r3, [r0, #8]
 801504c:	8181      	strh	r1, [r0, #12]
 801504e:	6643      	str	r3, [r0, #100]	; 0x64
 8015050:	81c2      	strh	r2, [r0, #14]
 8015052:	6183      	str	r3, [r0, #24]
 8015054:	4619      	mov	r1, r3
 8015056:	2208      	movs	r2, #8
 8015058:	305c      	adds	r0, #92	; 0x5c
 801505a:	f000 f944 	bl	80152e6 <memset>
 801505e:	4b05      	ldr	r3, [pc, #20]	; (8015074 <std+0x38>)
 8015060:	6263      	str	r3, [r4, #36]	; 0x24
 8015062:	4b05      	ldr	r3, [pc, #20]	; (8015078 <std+0x3c>)
 8015064:	62a3      	str	r3, [r4, #40]	; 0x28
 8015066:	4b05      	ldr	r3, [pc, #20]	; (801507c <std+0x40>)
 8015068:	62e3      	str	r3, [r4, #44]	; 0x2c
 801506a:	4b05      	ldr	r3, [pc, #20]	; (8015080 <std+0x44>)
 801506c:	6224      	str	r4, [r4, #32]
 801506e:	6323      	str	r3, [r4, #48]	; 0x30
 8015070:	bd10      	pop	{r4, pc}
 8015072:	bf00      	nop
 8015074:	080156ed 	.word	0x080156ed
 8015078:	0801570f 	.word	0x0801570f
 801507c:	08015747 	.word	0x08015747
 8015080:	0801576b 	.word	0x0801576b

08015084 <_cleanup_r>:
 8015084:	4901      	ldr	r1, [pc, #4]	; (801508c <_cleanup_r+0x8>)
 8015086:	f000 b8af 	b.w	80151e8 <_fwalk_reent>
 801508a:	bf00      	nop
 801508c:	08015a91 	.word	0x08015a91

08015090 <__sfmoreglue>:
 8015090:	b570      	push	{r4, r5, r6, lr}
 8015092:	2268      	movs	r2, #104	; 0x68
 8015094:	1e4d      	subs	r5, r1, #1
 8015096:	4355      	muls	r5, r2
 8015098:	460e      	mov	r6, r1
 801509a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801509e:	f000 f94b 	bl	8015338 <_malloc_r>
 80150a2:	4604      	mov	r4, r0
 80150a4:	b140      	cbz	r0, 80150b8 <__sfmoreglue+0x28>
 80150a6:	2100      	movs	r1, #0
 80150a8:	e9c0 1600 	strd	r1, r6, [r0]
 80150ac:	300c      	adds	r0, #12
 80150ae:	60a0      	str	r0, [r4, #8]
 80150b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80150b4:	f000 f917 	bl	80152e6 <memset>
 80150b8:	4620      	mov	r0, r4
 80150ba:	bd70      	pop	{r4, r5, r6, pc}

080150bc <__sfp_lock_acquire>:
 80150bc:	4801      	ldr	r0, [pc, #4]	; (80150c4 <__sfp_lock_acquire+0x8>)
 80150be:	f000 b8d8 	b.w	8015272 <__retarget_lock_acquire_recursive>
 80150c2:	bf00      	nop
 80150c4:	20040e19 	.word	0x20040e19

080150c8 <__sfp_lock_release>:
 80150c8:	4801      	ldr	r0, [pc, #4]	; (80150d0 <__sfp_lock_release+0x8>)
 80150ca:	f000 b8d3 	b.w	8015274 <__retarget_lock_release_recursive>
 80150ce:	bf00      	nop
 80150d0:	20040e19 	.word	0x20040e19

080150d4 <__sinit_lock_acquire>:
 80150d4:	4801      	ldr	r0, [pc, #4]	; (80150dc <__sinit_lock_acquire+0x8>)
 80150d6:	f000 b8cc 	b.w	8015272 <__retarget_lock_acquire_recursive>
 80150da:	bf00      	nop
 80150dc:	20040e1a 	.word	0x20040e1a

080150e0 <__sinit_lock_release>:
 80150e0:	4801      	ldr	r0, [pc, #4]	; (80150e8 <__sinit_lock_release+0x8>)
 80150e2:	f000 b8c7 	b.w	8015274 <__retarget_lock_release_recursive>
 80150e6:	bf00      	nop
 80150e8:	20040e1a 	.word	0x20040e1a

080150ec <__sinit>:
 80150ec:	b510      	push	{r4, lr}
 80150ee:	4604      	mov	r4, r0
 80150f0:	f7ff fff0 	bl	80150d4 <__sinit_lock_acquire>
 80150f4:	69a3      	ldr	r3, [r4, #24]
 80150f6:	b11b      	cbz	r3, 8015100 <__sinit+0x14>
 80150f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150fc:	f7ff bff0 	b.w	80150e0 <__sinit_lock_release>
 8015100:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015104:	6523      	str	r3, [r4, #80]	; 0x50
 8015106:	4b13      	ldr	r3, [pc, #76]	; (8015154 <__sinit+0x68>)
 8015108:	4a13      	ldr	r2, [pc, #76]	; (8015158 <__sinit+0x6c>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	62a2      	str	r2, [r4, #40]	; 0x28
 801510e:	42a3      	cmp	r3, r4
 8015110:	bf04      	itt	eq
 8015112:	2301      	moveq	r3, #1
 8015114:	61a3      	streq	r3, [r4, #24]
 8015116:	4620      	mov	r0, r4
 8015118:	f000 f820 	bl	801515c <__sfp>
 801511c:	6060      	str	r0, [r4, #4]
 801511e:	4620      	mov	r0, r4
 8015120:	f000 f81c 	bl	801515c <__sfp>
 8015124:	60a0      	str	r0, [r4, #8]
 8015126:	4620      	mov	r0, r4
 8015128:	f000 f818 	bl	801515c <__sfp>
 801512c:	2200      	movs	r2, #0
 801512e:	60e0      	str	r0, [r4, #12]
 8015130:	2104      	movs	r1, #4
 8015132:	6860      	ldr	r0, [r4, #4]
 8015134:	f7ff ff82 	bl	801503c <std>
 8015138:	68a0      	ldr	r0, [r4, #8]
 801513a:	2201      	movs	r2, #1
 801513c:	2109      	movs	r1, #9
 801513e:	f7ff ff7d 	bl	801503c <std>
 8015142:	68e0      	ldr	r0, [r4, #12]
 8015144:	2202      	movs	r2, #2
 8015146:	2112      	movs	r1, #18
 8015148:	f7ff ff78 	bl	801503c <std>
 801514c:	2301      	movs	r3, #1
 801514e:	61a3      	str	r3, [r4, #24]
 8015150:	e7d2      	b.n	80150f8 <__sinit+0xc>
 8015152:	bf00      	nop
 8015154:	08019700 	.word	0x08019700
 8015158:	08015085 	.word	0x08015085

0801515c <__sfp>:
 801515c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801515e:	4607      	mov	r7, r0
 8015160:	f7ff ffac 	bl	80150bc <__sfp_lock_acquire>
 8015164:	4b1e      	ldr	r3, [pc, #120]	; (80151e0 <__sfp+0x84>)
 8015166:	681e      	ldr	r6, [r3, #0]
 8015168:	69b3      	ldr	r3, [r6, #24]
 801516a:	b913      	cbnz	r3, 8015172 <__sfp+0x16>
 801516c:	4630      	mov	r0, r6
 801516e:	f7ff ffbd 	bl	80150ec <__sinit>
 8015172:	3648      	adds	r6, #72	; 0x48
 8015174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015178:	3b01      	subs	r3, #1
 801517a:	d503      	bpl.n	8015184 <__sfp+0x28>
 801517c:	6833      	ldr	r3, [r6, #0]
 801517e:	b30b      	cbz	r3, 80151c4 <__sfp+0x68>
 8015180:	6836      	ldr	r6, [r6, #0]
 8015182:	e7f7      	b.n	8015174 <__sfp+0x18>
 8015184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015188:	b9d5      	cbnz	r5, 80151c0 <__sfp+0x64>
 801518a:	4b16      	ldr	r3, [pc, #88]	; (80151e4 <__sfp+0x88>)
 801518c:	60e3      	str	r3, [r4, #12]
 801518e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015192:	6665      	str	r5, [r4, #100]	; 0x64
 8015194:	f000 f86c 	bl	8015270 <__retarget_lock_init_recursive>
 8015198:	f7ff ff96 	bl	80150c8 <__sfp_lock_release>
 801519c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80151a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80151a4:	6025      	str	r5, [r4, #0]
 80151a6:	61a5      	str	r5, [r4, #24]
 80151a8:	2208      	movs	r2, #8
 80151aa:	4629      	mov	r1, r5
 80151ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80151b0:	f000 f899 	bl	80152e6 <memset>
 80151b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80151b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80151bc:	4620      	mov	r0, r4
 80151be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151c0:	3468      	adds	r4, #104	; 0x68
 80151c2:	e7d9      	b.n	8015178 <__sfp+0x1c>
 80151c4:	2104      	movs	r1, #4
 80151c6:	4638      	mov	r0, r7
 80151c8:	f7ff ff62 	bl	8015090 <__sfmoreglue>
 80151cc:	4604      	mov	r4, r0
 80151ce:	6030      	str	r0, [r6, #0]
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d1d5      	bne.n	8015180 <__sfp+0x24>
 80151d4:	f7ff ff78 	bl	80150c8 <__sfp_lock_release>
 80151d8:	230c      	movs	r3, #12
 80151da:	603b      	str	r3, [r7, #0]
 80151dc:	e7ee      	b.n	80151bc <__sfp+0x60>
 80151de:	bf00      	nop
 80151e0:	08019700 	.word	0x08019700
 80151e4:	ffff0001 	.word	0xffff0001

080151e8 <_fwalk_reent>:
 80151e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151ec:	4606      	mov	r6, r0
 80151ee:	4688      	mov	r8, r1
 80151f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80151f4:	2700      	movs	r7, #0
 80151f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80151fa:	f1b9 0901 	subs.w	r9, r9, #1
 80151fe:	d505      	bpl.n	801520c <_fwalk_reent+0x24>
 8015200:	6824      	ldr	r4, [r4, #0]
 8015202:	2c00      	cmp	r4, #0
 8015204:	d1f7      	bne.n	80151f6 <_fwalk_reent+0xe>
 8015206:	4638      	mov	r0, r7
 8015208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801520c:	89ab      	ldrh	r3, [r5, #12]
 801520e:	2b01      	cmp	r3, #1
 8015210:	d907      	bls.n	8015222 <_fwalk_reent+0x3a>
 8015212:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015216:	3301      	adds	r3, #1
 8015218:	d003      	beq.n	8015222 <_fwalk_reent+0x3a>
 801521a:	4629      	mov	r1, r5
 801521c:	4630      	mov	r0, r6
 801521e:	47c0      	blx	r8
 8015220:	4307      	orrs	r7, r0
 8015222:	3568      	adds	r5, #104	; 0x68
 8015224:	e7e9      	b.n	80151fa <_fwalk_reent+0x12>
	...

08015228 <__libc_init_array>:
 8015228:	b570      	push	{r4, r5, r6, lr}
 801522a:	4d0d      	ldr	r5, [pc, #52]	; (8015260 <__libc_init_array+0x38>)
 801522c:	4c0d      	ldr	r4, [pc, #52]	; (8015264 <__libc_init_array+0x3c>)
 801522e:	1b64      	subs	r4, r4, r5
 8015230:	10a4      	asrs	r4, r4, #2
 8015232:	2600      	movs	r6, #0
 8015234:	42a6      	cmp	r6, r4
 8015236:	d109      	bne.n	801524c <__libc_init_array+0x24>
 8015238:	4d0b      	ldr	r5, [pc, #44]	; (8015268 <__libc_init_array+0x40>)
 801523a:	4c0c      	ldr	r4, [pc, #48]	; (801526c <__libc_init_array+0x44>)
 801523c:	f001 fa50 	bl	80166e0 <_init>
 8015240:	1b64      	subs	r4, r4, r5
 8015242:	10a4      	asrs	r4, r4, #2
 8015244:	2600      	movs	r6, #0
 8015246:	42a6      	cmp	r6, r4
 8015248:	d105      	bne.n	8015256 <__libc_init_array+0x2e>
 801524a:	bd70      	pop	{r4, r5, r6, pc}
 801524c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015250:	4798      	blx	r3
 8015252:	3601      	adds	r6, #1
 8015254:	e7ee      	b.n	8015234 <__libc_init_array+0xc>
 8015256:	f855 3b04 	ldr.w	r3, [r5], #4
 801525a:	4798      	blx	r3
 801525c:	3601      	adds	r6, #1
 801525e:	e7f2      	b.n	8015246 <__libc_init_array+0x1e>
 8015260:	080197f0 	.word	0x080197f0
 8015264:	080197f0 	.word	0x080197f0
 8015268:	080197f0 	.word	0x080197f0
 801526c:	080197f4 	.word	0x080197f4

08015270 <__retarget_lock_init_recursive>:
 8015270:	4770      	bx	lr

08015272 <__retarget_lock_acquire_recursive>:
 8015272:	4770      	bx	lr

08015274 <__retarget_lock_release_recursive>:
 8015274:	4770      	bx	lr

08015276 <memcmp>:
 8015276:	b510      	push	{r4, lr}
 8015278:	3901      	subs	r1, #1
 801527a:	4402      	add	r2, r0
 801527c:	4290      	cmp	r0, r2
 801527e:	d101      	bne.n	8015284 <memcmp+0xe>
 8015280:	2000      	movs	r0, #0
 8015282:	e005      	b.n	8015290 <memcmp+0x1a>
 8015284:	7803      	ldrb	r3, [r0, #0]
 8015286:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801528a:	42a3      	cmp	r3, r4
 801528c:	d001      	beq.n	8015292 <memcmp+0x1c>
 801528e:	1b18      	subs	r0, r3, r4
 8015290:	bd10      	pop	{r4, pc}
 8015292:	3001      	adds	r0, #1
 8015294:	e7f2      	b.n	801527c <memcmp+0x6>

08015296 <memcpy>:
 8015296:	440a      	add	r2, r1
 8015298:	4291      	cmp	r1, r2
 801529a:	f100 33ff 	add.w	r3, r0, #4294967295
 801529e:	d100      	bne.n	80152a2 <memcpy+0xc>
 80152a0:	4770      	bx	lr
 80152a2:	b510      	push	{r4, lr}
 80152a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80152a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80152ac:	4291      	cmp	r1, r2
 80152ae:	d1f9      	bne.n	80152a4 <memcpy+0xe>
 80152b0:	bd10      	pop	{r4, pc}

080152b2 <memmove>:
 80152b2:	4288      	cmp	r0, r1
 80152b4:	b510      	push	{r4, lr}
 80152b6:	eb01 0402 	add.w	r4, r1, r2
 80152ba:	d902      	bls.n	80152c2 <memmove+0x10>
 80152bc:	4284      	cmp	r4, r0
 80152be:	4623      	mov	r3, r4
 80152c0:	d807      	bhi.n	80152d2 <memmove+0x20>
 80152c2:	1e43      	subs	r3, r0, #1
 80152c4:	42a1      	cmp	r1, r4
 80152c6:	d008      	beq.n	80152da <memmove+0x28>
 80152c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80152cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80152d0:	e7f8      	b.n	80152c4 <memmove+0x12>
 80152d2:	4402      	add	r2, r0
 80152d4:	4601      	mov	r1, r0
 80152d6:	428a      	cmp	r2, r1
 80152d8:	d100      	bne.n	80152dc <memmove+0x2a>
 80152da:	bd10      	pop	{r4, pc}
 80152dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80152e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80152e4:	e7f7      	b.n	80152d6 <memmove+0x24>

080152e6 <memset>:
 80152e6:	4402      	add	r2, r0
 80152e8:	4603      	mov	r3, r0
 80152ea:	4293      	cmp	r3, r2
 80152ec:	d100      	bne.n	80152f0 <memset+0xa>
 80152ee:	4770      	bx	lr
 80152f0:	f803 1b01 	strb.w	r1, [r3], #1
 80152f4:	e7f9      	b.n	80152ea <memset+0x4>
	...

080152f8 <sbrk_aligned>:
 80152f8:	b570      	push	{r4, r5, r6, lr}
 80152fa:	4e0e      	ldr	r6, [pc, #56]	; (8015334 <sbrk_aligned+0x3c>)
 80152fc:	460c      	mov	r4, r1
 80152fe:	6831      	ldr	r1, [r6, #0]
 8015300:	4605      	mov	r5, r0
 8015302:	b911      	cbnz	r1, 801530a <sbrk_aligned+0x12>
 8015304:	f000 f9c2 	bl	801568c <_sbrk_r>
 8015308:	6030      	str	r0, [r6, #0]
 801530a:	4621      	mov	r1, r4
 801530c:	4628      	mov	r0, r5
 801530e:	f000 f9bd 	bl	801568c <_sbrk_r>
 8015312:	1c43      	adds	r3, r0, #1
 8015314:	d00a      	beq.n	801532c <sbrk_aligned+0x34>
 8015316:	1cc4      	adds	r4, r0, #3
 8015318:	f024 0403 	bic.w	r4, r4, #3
 801531c:	42a0      	cmp	r0, r4
 801531e:	d007      	beq.n	8015330 <sbrk_aligned+0x38>
 8015320:	1a21      	subs	r1, r4, r0
 8015322:	4628      	mov	r0, r5
 8015324:	f000 f9b2 	bl	801568c <_sbrk_r>
 8015328:	3001      	adds	r0, #1
 801532a:	d101      	bne.n	8015330 <sbrk_aligned+0x38>
 801532c:	f04f 34ff 	mov.w	r4, #4294967295
 8015330:	4620      	mov	r0, r4
 8015332:	bd70      	pop	{r4, r5, r6, pc}
 8015334:	20040e20 	.word	0x20040e20

08015338 <_malloc_r>:
 8015338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801533c:	1ccd      	adds	r5, r1, #3
 801533e:	f025 0503 	bic.w	r5, r5, #3
 8015342:	3508      	adds	r5, #8
 8015344:	2d0c      	cmp	r5, #12
 8015346:	bf38      	it	cc
 8015348:	250c      	movcc	r5, #12
 801534a:	2d00      	cmp	r5, #0
 801534c:	4607      	mov	r7, r0
 801534e:	db01      	blt.n	8015354 <_malloc_r+0x1c>
 8015350:	42a9      	cmp	r1, r5
 8015352:	d905      	bls.n	8015360 <_malloc_r+0x28>
 8015354:	230c      	movs	r3, #12
 8015356:	603b      	str	r3, [r7, #0]
 8015358:	2600      	movs	r6, #0
 801535a:	4630      	mov	r0, r6
 801535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015360:	4e2e      	ldr	r6, [pc, #184]	; (801541c <_malloc_r+0xe4>)
 8015362:	f000 fc63 	bl	8015c2c <__malloc_lock>
 8015366:	6833      	ldr	r3, [r6, #0]
 8015368:	461c      	mov	r4, r3
 801536a:	bb34      	cbnz	r4, 80153ba <_malloc_r+0x82>
 801536c:	4629      	mov	r1, r5
 801536e:	4638      	mov	r0, r7
 8015370:	f7ff ffc2 	bl	80152f8 <sbrk_aligned>
 8015374:	1c43      	adds	r3, r0, #1
 8015376:	4604      	mov	r4, r0
 8015378:	d14d      	bne.n	8015416 <_malloc_r+0xde>
 801537a:	6834      	ldr	r4, [r6, #0]
 801537c:	4626      	mov	r6, r4
 801537e:	2e00      	cmp	r6, #0
 8015380:	d140      	bne.n	8015404 <_malloc_r+0xcc>
 8015382:	6823      	ldr	r3, [r4, #0]
 8015384:	4631      	mov	r1, r6
 8015386:	4638      	mov	r0, r7
 8015388:	eb04 0803 	add.w	r8, r4, r3
 801538c:	f000 f97e 	bl	801568c <_sbrk_r>
 8015390:	4580      	cmp	r8, r0
 8015392:	d13a      	bne.n	801540a <_malloc_r+0xd2>
 8015394:	6821      	ldr	r1, [r4, #0]
 8015396:	3503      	adds	r5, #3
 8015398:	1a6d      	subs	r5, r5, r1
 801539a:	f025 0503 	bic.w	r5, r5, #3
 801539e:	3508      	adds	r5, #8
 80153a0:	2d0c      	cmp	r5, #12
 80153a2:	bf38      	it	cc
 80153a4:	250c      	movcc	r5, #12
 80153a6:	4629      	mov	r1, r5
 80153a8:	4638      	mov	r0, r7
 80153aa:	f7ff ffa5 	bl	80152f8 <sbrk_aligned>
 80153ae:	3001      	adds	r0, #1
 80153b0:	d02b      	beq.n	801540a <_malloc_r+0xd2>
 80153b2:	6823      	ldr	r3, [r4, #0]
 80153b4:	442b      	add	r3, r5
 80153b6:	6023      	str	r3, [r4, #0]
 80153b8:	e00e      	b.n	80153d8 <_malloc_r+0xa0>
 80153ba:	6822      	ldr	r2, [r4, #0]
 80153bc:	1b52      	subs	r2, r2, r5
 80153be:	d41e      	bmi.n	80153fe <_malloc_r+0xc6>
 80153c0:	2a0b      	cmp	r2, #11
 80153c2:	d916      	bls.n	80153f2 <_malloc_r+0xba>
 80153c4:	1961      	adds	r1, r4, r5
 80153c6:	42a3      	cmp	r3, r4
 80153c8:	6025      	str	r5, [r4, #0]
 80153ca:	bf18      	it	ne
 80153cc:	6059      	strne	r1, [r3, #4]
 80153ce:	6863      	ldr	r3, [r4, #4]
 80153d0:	bf08      	it	eq
 80153d2:	6031      	streq	r1, [r6, #0]
 80153d4:	5162      	str	r2, [r4, r5]
 80153d6:	604b      	str	r3, [r1, #4]
 80153d8:	4638      	mov	r0, r7
 80153da:	f104 060b 	add.w	r6, r4, #11
 80153de:	f000 fc2b 	bl	8015c38 <__malloc_unlock>
 80153e2:	f026 0607 	bic.w	r6, r6, #7
 80153e6:	1d23      	adds	r3, r4, #4
 80153e8:	1af2      	subs	r2, r6, r3
 80153ea:	d0b6      	beq.n	801535a <_malloc_r+0x22>
 80153ec:	1b9b      	subs	r3, r3, r6
 80153ee:	50a3      	str	r3, [r4, r2]
 80153f0:	e7b3      	b.n	801535a <_malloc_r+0x22>
 80153f2:	6862      	ldr	r2, [r4, #4]
 80153f4:	42a3      	cmp	r3, r4
 80153f6:	bf0c      	ite	eq
 80153f8:	6032      	streq	r2, [r6, #0]
 80153fa:	605a      	strne	r2, [r3, #4]
 80153fc:	e7ec      	b.n	80153d8 <_malloc_r+0xa0>
 80153fe:	4623      	mov	r3, r4
 8015400:	6864      	ldr	r4, [r4, #4]
 8015402:	e7b2      	b.n	801536a <_malloc_r+0x32>
 8015404:	4634      	mov	r4, r6
 8015406:	6876      	ldr	r6, [r6, #4]
 8015408:	e7b9      	b.n	801537e <_malloc_r+0x46>
 801540a:	230c      	movs	r3, #12
 801540c:	603b      	str	r3, [r7, #0]
 801540e:	4638      	mov	r0, r7
 8015410:	f000 fc12 	bl	8015c38 <__malloc_unlock>
 8015414:	e7a1      	b.n	801535a <_malloc_r+0x22>
 8015416:	6025      	str	r5, [r4, #0]
 8015418:	e7de      	b.n	80153d8 <_malloc_r+0xa0>
 801541a:	bf00      	nop
 801541c:	20040e1c 	.word	0x20040e1c

08015420 <iprintf>:
 8015420:	b40f      	push	{r0, r1, r2, r3}
 8015422:	4b0a      	ldr	r3, [pc, #40]	; (801544c <iprintf+0x2c>)
 8015424:	b513      	push	{r0, r1, r4, lr}
 8015426:	681c      	ldr	r4, [r3, #0]
 8015428:	b124      	cbz	r4, 8015434 <iprintf+0x14>
 801542a:	69a3      	ldr	r3, [r4, #24]
 801542c:	b913      	cbnz	r3, 8015434 <iprintf+0x14>
 801542e:	4620      	mov	r0, r4
 8015430:	f7ff fe5c 	bl	80150ec <__sinit>
 8015434:	ab05      	add	r3, sp, #20
 8015436:	9a04      	ldr	r2, [sp, #16]
 8015438:	68a1      	ldr	r1, [r4, #8]
 801543a:	9301      	str	r3, [sp, #4]
 801543c:	4620      	mov	r0, r4
 801543e:	f000 fdd3 	bl	8015fe8 <_vfiprintf_r>
 8015442:	b002      	add	sp, #8
 8015444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015448:	b004      	add	sp, #16
 801544a:	4770      	bx	lr
 801544c:	20000054 	.word	0x20000054

08015450 <_puts_r>:
 8015450:	b570      	push	{r4, r5, r6, lr}
 8015452:	460e      	mov	r6, r1
 8015454:	4605      	mov	r5, r0
 8015456:	b118      	cbz	r0, 8015460 <_puts_r+0x10>
 8015458:	6983      	ldr	r3, [r0, #24]
 801545a:	b90b      	cbnz	r3, 8015460 <_puts_r+0x10>
 801545c:	f7ff fe46 	bl	80150ec <__sinit>
 8015460:	69ab      	ldr	r3, [r5, #24]
 8015462:	68ac      	ldr	r4, [r5, #8]
 8015464:	b913      	cbnz	r3, 801546c <_puts_r+0x1c>
 8015466:	4628      	mov	r0, r5
 8015468:	f7ff fe40 	bl	80150ec <__sinit>
 801546c:	4b2c      	ldr	r3, [pc, #176]	; (8015520 <_puts_r+0xd0>)
 801546e:	429c      	cmp	r4, r3
 8015470:	d120      	bne.n	80154b4 <_puts_r+0x64>
 8015472:	686c      	ldr	r4, [r5, #4]
 8015474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015476:	07db      	lsls	r3, r3, #31
 8015478:	d405      	bmi.n	8015486 <_puts_r+0x36>
 801547a:	89a3      	ldrh	r3, [r4, #12]
 801547c:	0598      	lsls	r0, r3, #22
 801547e:	d402      	bmi.n	8015486 <_puts_r+0x36>
 8015480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015482:	f7ff fef6 	bl	8015272 <__retarget_lock_acquire_recursive>
 8015486:	89a3      	ldrh	r3, [r4, #12]
 8015488:	0719      	lsls	r1, r3, #28
 801548a:	d51d      	bpl.n	80154c8 <_puts_r+0x78>
 801548c:	6923      	ldr	r3, [r4, #16]
 801548e:	b1db      	cbz	r3, 80154c8 <_puts_r+0x78>
 8015490:	3e01      	subs	r6, #1
 8015492:	68a3      	ldr	r3, [r4, #8]
 8015494:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015498:	3b01      	subs	r3, #1
 801549a:	60a3      	str	r3, [r4, #8]
 801549c:	bb39      	cbnz	r1, 80154ee <_puts_r+0x9e>
 801549e:	2b00      	cmp	r3, #0
 80154a0:	da38      	bge.n	8015514 <_puts_r+0xc4>
 80154a2:	4622      	mov	r2, r4
 80154a4:	210a      	movs	r1, #10
 80154a6:	4628      	mov	r0, r5
 80154a8:	f000 f96c 	bl	8015784 <__swbuf_r>
 80154ac:	3001      	adds	r0, #1
 80154ae:	d011      	beq.n	80154d4 <_puts_r+0x84>
 80154b0:	250a      	movs	r5, #10
 80154b2:	e011      	b.n	80154d8 <_puts_r+0x88>
 80154b4:	4b1b      	ldr	r3, [pc, #108]	; (8015524 <_puts_r+0xd4>)
 80154b6:	429c      	cmp	r4, r3
 80154b8:	d101      	bne.n	80154be <_puts_r+0x6e>
 80154ba:	68ac      	ldr	r4, [r5, #8]
 80154bc:	e7da      	b.n	8015474 <_puts_r+0x24>
 80154be:	4b1a      	ldr	r3, [pc, #104]	; (8015528 <_puts_r+0xd8>)
 80154c0:	429c      	cmp	r4, r3
 80154c2:	bf08      	it	eq
 80154c4:	68ec      	ldreq	r4, [r5, #12]
 80154c6:	e7d5      	b.n	8015474 <_puts_r+0x24>
 80154c8:	4621      	mov	r1, r4
 80154ca:	4628      	mov	r0, r5
 80154cc:	f000 f9be 	bl	801584c <__swsetup_r>
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d0dd      	beq.n	8015490 <_puts_r+0x40>
 80154d4:	f04f 35ff 	mov.w	r5, #4294967295
 80154d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154da:	07da      	lsls	r2, r3, #31
 80154dc:	d405      	bmi.n	80154ea <_puts_r+0x9a>
 80154de:	89a3      	ldrh	r3, [r4, #12]
 80154e0:	059b      	lsls	r3, r3, #22
 80154e2:	d402      	bmi.n	80154ea <_puts_r+0x9a>
 80154e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154e6:	f7ff fec5 	bl	8015274 <__retarget_lock_release_recursive>
 80154ea:	4628      	mov	r0, r5
 80154ec:	bd70      	pop	{r4, r5, r6, pc}
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	da04      	bge.n	80154fc <_puts_r+0xac>
 80154f2:	69a2      	ldr	r2, [r4, #24]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	dc06      	bgt.n	8015506 <_puts_r+0xb6>
 80154f8:	290a      	cmp	r1, #10
 80154fa:	d004      	beq.n	8015506 <_puts_r+0xb6>
 80154fc:	6823      	ldr	r3, [r4, #0]
 80154fe:	1c5a      	adds	r2, r3, #1
 8015500:	6022      	str	r2, [r4, #0]
 8015502:	7019      	strb	r1, [r3, #0]
 8015504:	e7c5      	b.n	8015492 <_puts_r+0x42>
 8015506:	4622      	mov	r2, r4
 8015508:	4628      	mov	r0, r5
 801550a:	f000 f93b 	bl	8015784 <__swbuf_r>
 801550e:	3001      	adds	r0, #1
 8015510:	d1bf      	bne.n	8015492 <_puts_r+0x42>
 8015512:	e7df      	b.n	80154d4 <_puts_r+0x84>
 8015514:	6823      	ldr	r3, [r4, #0]
 8015516:	250a      	movs	r5, #10
 8015518:	1c5a      	adds	r2, r3, #1
 801551a:	6022      	str	r2, [r4, #0]
 801551c:	701d      	strb	r5, [r3, #0]
 801551e:	e7db      	b.n	80154d8 <_puts_r+0x88>
 8015520:	080196c0 	.word	0x080196c0
 8015524:	080196e0 	.word	0x080196e0
 8015528:	080196a0 	.word	0x080196a0

0801552c <puts>:
 801552c:	4b02      	ldr	r3, [pc, #8]	; (8015538 <puts+0xc>)
 801552e:	4601      	mov	r1, r0
 8015530:	6818      	ldr	r0, [r3, #0]
 8015532:	f7ff bf8d 	b.w	8015450 <_puts_r>
 8015536:	bf00      	nop
 8015538:	20000054 	.word	0x20000054

0801553c <rand>:
 801553c:	4b16      	ldr	r3, [pc, #88]	; (8015598 <rand+0x5c>)
 801553e:	b510      	push	{r4, lr}
 8015540:	681c      	ldr	r4, [r3, #0]
 8015542:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015544:	b9b3      	cbnz	r3, 8015574 <rand+0x38>
 8015546:	2018      	movs	r0, #24
 8015548:	f000 fb68 	bl	8015c1c <malloc>
 801554c:	63a0      	str	r0, [r4, #56]	; 0x38
 801554e:	b928      	cbnz	r0, 801555c <rand+0x20>
 8015550:	4602      	mov	r2, r0
 8015552:	4b12      	ldr	r3, [pc, #72]	; (801559c <rand+0x60>)
 8015554:	4812      	ldr	r0, [pc, #72]	; (80155a0 <rand+0x64>)
 8015556:	214e      	movs	r1, #78	; 0x4e
 8015558:	f000 f9e6 	bl	8015928 <__assert_func>
 801555c:	4a11      	ldr	r2, [pc, #68]	; (80155a4 <rand+0x68>)
 801555e:	4b12      	ldr	r3, [pc, #72]	; (80155a8 <rand+0x6c>)
 8015560:	e9c0 2300 	strd	r2, r3, [r0]
 8015564:	4b11      	ldr	r3, [pc, #68]	; (80155ac <rand+0x70>)
 8015566:	6083      	str	r3, [r0, #8]
 8015568:	230b      	movs	r3, #11
 801556a:	8183      	strh	r3, [r0, #12]
 801556c:	2201      	movs	r2, #1
 801556e:	2300      	movs	r3, #0
 8015570:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015574:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8015576:	4a0e      	ldr	r2, [pc, #56]	; (80155b0 <rand+0x74>)
 8015578:	6920      	ldr	r0, [r4, #16]
 801557a:	6963      	ldr	r3, [r4, #20]
 801557c:	490d      	ldr	r1, [pc, #52]	; (80155b4 <rand+0x78>)
 801557e:	4342      	muls	r2, r0
 8015580:	fb01 2203 	mla	r2, r1, r3, r2
 8015584:	fba0 0101 	umull	r0, r1, r0, r1
 8015588:	1c43      	adds	r3, r0, #1
 801558a:	eb42 0001 	adc.w	r0, r2, r1
 801558e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8015592:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015596:	bd10      	pop	{r4, pc}
 8015598:	20000054 	.word	0x20000054
 801559c:	08019704 	.word	0x08019704
 80155a0:	0801971b 	.word	0x0801971b
 80155a4:	abcd330e 	.word	0xabcd330e
 80155a8:	e66d1234 	.word	0xe66d1234
 80155ac:	0005deec 	.word	0x0005deec
 80155b0:	5851f42d 	.word	0x5851f42d
 80155b4:	4c957f2d 	.word	0x4c957f2d

080155b8 <cleanup_glue>:
 80155b8:	b538      	push	{r3, r4, r5, lr}
 80155ba:	460c      	mov	r4, r1
 80155bc:	6809      	ldr	r1, [r1, #0]
 80155be:	4605      	mov	r5, r0
 80155c0:	b109      	cbz	r1, 80155c6 <cleanup_glue+0xe>
 80155c2:	f7ff fff9 	bl	80155b8 <cleanup_glue>
 80155c6:	4621      	mov	r1, r4
 80155c8:	4628      	mov	r0, r5
 80155ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155ce:	f000 bb39 	b.w	8015c44 <_free_r>
	...

080155d4 <_reclaim_reent>:
 80155d4:	4b2c      	ldr	r3, [pc, #176]	; (8015688 <_reclaim_reent+0xb4>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	4283      	cmp	r3, r0
 80155da:	b570      	push	{r4, r5, r6, lr}
 80155dc:	4604      	mov	r4, r0
 80155de:	d051      	beq.n	8015684 <_reclaim_reent+0xb0>
 80155e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80155e2:	b143      	cbz	r3, 80155f6 <_reclaim_reent+0x22>
 80155e4:	68db      	ldr	r3, [r3, #12]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d14a      	bne.n	8015680 <_reclaim_reent+0xac>
 80155ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155ec:	6819      	ldr	r1, [r3, #0]
 80155ee:	b111      	cbz	r1, 80155f6 <_reclaim_reent+0x22>
 80155f0:	4620      	mov	r0, r4
 80155f2:	f000 fb27 	bl	8015c44 <_free_r>
 80155f6:	6961      	ldr	r1, [r4, #20]
 80155f8:	b111      	cbz	r1, 8015600 <_reclaim_reent+0x2c>
 80155fa:	4620      	mov	r0, r4
 80155fc:	f000 fb22 	bl	8015c44 <_free_r>
 8015600:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015602:	b111      	cbz	r1, 801560a <_reclaim_reent+0x36>
 8015604:	4620      	mov	r0, r4
 8015606:	f000 fb1d 	bl	8015c44 <_free_r>
 801560a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801560c:	b111      	cbz	r1, 8015614 <_reclaim_reent+0x40>
 801560e:	4620      	mov	r0, r4
 8015610:	f000 fb18 	bl	8015c44 <_free_r>
 8015614:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015616:	b111      	cbz	r1, 801561e <_reclaim_reent+0x4a>
 8015618:	4620      	mov	r0, r4
 801561a:	f000 fb13 	bl	8015c44 <_free_r>
 801561e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015620:	b111      	cbz	r1, 8015628 <_reclaim_reent+0x54>
 8015622:	4620      	mov	r0, r4
 8015624:	f000 fb0e 	bl	8015c44 <_free_r>
 8015628:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801562a:	b111      	cbz	r1, 8015632 <_reclaim_reent+0x5e>
 801562c:	4620      	mov	r0, r4
 801562e:	f000 fb09 	bl	8015c44 <_free_r>
 8015632:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015634:	b111      	cbz	r1, 801563c <_reclaim_reent+0x68>
 8015636:	4620      	mov	r0, r4
 8015638:	f000 fb04 	bl	8015c44 <_free_r>
 801563c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801563e:	b111      	cbz	r1, 8015646 <_reclaim_reent+0x72>
 8015640:	4620      	mov	r0, r4
 8015642:	f000 faff 	bl	8015c44 <_free_r>
 8015646:	69a3      	ldr	r3, [r4, #24]
 8015648:	b1e3      	cbz	r3, 8015684 <_reclaim_reent+0xb0>
 801564a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801564c:	4620      	mov	r0, r4
 801564e:	4798      	blx	r3
 8015650:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015652:	b1b9      	cbz	r1, 8015684 <_reclaim_reent+0xb0>
 8015654:	4620      	mov	r0, r4
 8015656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801565a:	f7ff bfad 	b.w	80155b8 <cleanup_glue>
 801565e:	5949      	ldr	r1, [r1, r5]
 8015660:	b941      	cbnz	r1, 8015674 <_reclaim_reent+0xa0>
 8015662:	3504      	adds	r5, #4
 8015664:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015666:	2d80      	cmp	r5, #128	; 0x80
 8015668:	68d9      	ldr	r1, [r3, #12]
 801566a:	d1f8      	bne.n	801565e <_reclaim_reent+0x8a>
 801566c:	4620      	mov	r0, r4
 801566e:	f000 fae9 	bl	8015c44 <_free_r>
 8015672:	e7ba      	b.n	80155ea <_reclaim_reent+0x16>
 8015674:	680e      	ldr	r6, [r1, #0]
 8015676:	4620      	mov	r0, r4
 8015678:	f000 fae4 	bl	8015c44 <_free_r>
 801567c:	4631      	mov	r1, r6
 801567e:	e7ef      	b.n	8015660 <_reclaim_reent+0x8c>
 8015680:	2500      	movs	r5, #0
 8015682:	e7ef      	b.n	8015664 <_reclaim_reent+0x90>
 8015684:	bd70      	pop	{r4, r5, r6, pc}
 8015686:	bf00      	nop
 8015688:	20000054 	.word	0x20000054

0801568c <_sbrk_r>:
 801568c:	b538      	push	{r3, r4, r5, lr}
 801568e:	4d06      	ldr	r5, [pc, #24]	; (80156a8 <_sbrk_r+0x1c>)
 8015690:	2300      	movs	r3, #0
 8015692:	4604      	mov	r4, r0
 8015694:	4608      	mov	r0, r1
 8015696:	602b      	str	r3, [r5, #0]
 8015698:	f7eb fb54 	bl	8000d44 <_sbrk>
 801569c:	1c43      	adds	r3, r0, #1
 801569e:	d102      	bne.n	80156a6 <_sbrk_r+0x1a>
 80156a0:	682b      	ldr	r3, [r5, #0]
 80156a2:	b103      	cbz	r3, 80156a6 <_sbrk_r+0x1a>
 80156a4:	6023      	str	r3, [r4, #0]
 80156a6:	bd38      	pop	{r3, r4, r5, pc}
 80156a8:	20040e24 	.word	0x20040e24

080156ac <siprintf>:
 80156ac:	b40e      	push	{r1, r2, r3}
 80156ae:	b500      	push	{lr}
 80156b0:	b09c      	sub	sp, #112	; 0x70
 80156b2:	ab1d      	add	r3, sp, #116	; 0x74
 80156b4:	9002      	str	r0, [sp, #8]
 80156b6:	9006      	str	r0, [sp, #24]
 80156b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80156bc:	4809      	ldr	r0, [pc, #36]	; (80156e4 <siprintf+0x38>)
 80156be:	9107      	str	r1, [sp, #28]
 80156c0:	9104      	str	r1, [sp, #16]
 80156c2:	4909      	ldr	r1, [pc, #36]	; (80156e8 <siprintf+0x3c>)
 80156c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80156c8:	9105      	str	r1, [sp, #20]
 80156ca:	6800      	ldr	r0, [r0, #0]
 80156cc:	9301      	str	r3, [sp, #4]
 80156ce:	a902      	add	r1, sp, #8
 80156d0:	f000 fb60 	bl	8015d94 <_svfiprintf_r>
 80156d4:	9b02      	ldr	r3, [sp, #8]
 80156d6:	2200      	movs	r2, #0
 80156d8:	701a      	strb	r2, [r3, #0]
 80156da:	b01c      	add	sp, #112	; 0x70
 80156dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80156e0:	b003      	add	sp, #12
 80156e2:	4770      	bx	lr
 80156e4:	20000054 	.word	0x20000054
 80156e8:	ffff0208 	.word	0xffff0208

080156ec <__sread>:
 80156ec:	b510      	push	{r4, lr}
 80156ee:	460c      	mov	r4, r1
 80156f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156f4:	f000 ff3c 	bl	8016570 <_read_r>
 80156f8:	2800      	cmp	r0, #0
 80156fa:	bfab      	itete	ge
 80156fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80156fe:	89a3      	ldrhlt	r3, [r4, #12]
 8015700:	181b      	addge	r3, r3, r0
 8015702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015706:	bfac      	ite	ge
 8015708:	6563      	strge	r3, [r4, #84]	; 0x54
 801570a:	81a3      	strhlt	r3, [r4, #12]
 801570c:	bd10      	pop	{r4, pc}

0801570e <__swrite>:
 801570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015712:	461f      	mov	r7, r3
 8015714:	898b      	ldrh	r3, [r1, #12]
 8015716:	05db      	lsls	r3, r3, #23
 8015718:	4605      	mov	r5, r0
 801571a:	460c      	mov	r4, r1
 801571c:	4616      	mov	r6, r2
 801571e:	d505      	bpl.n	801572c <__swrite+0x1e>
 8015720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015724:	2302      	movs	r3, #2
 8015726:	2200      	movs	r2, #0
 8015728:	f000 fa00 	bl	8015b2c <_lseek_r>
 801572c:	89a3      	ldrh	r3, [r4, #12]
 801572e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015736:	81a3      	strh	r3, [r4, #12]
 8015738:	4632      	mov	r2, r6
 801573a:	463b      	mov	r3, r7
 801573c:	4628      	mov	r0, r5
 801573e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015742:	f000 b871 	b.w	8015828 <_write_r>

08015746 <__sseek>:
 8015746:	b510      	push	{r4, lr}
 8015748:	460c      	mov	r4, r1
 801574a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801574e:	f000 f9ed 	bl	8015b2c <_lseek_r>
 8015752:	1c43      	adds	r3, r0, #1
 8015754:	89a3      	ldrh	r3, [r4, #12]
 8015756:	bf15      	itete	ne
 8015758:	6560      	strne	r0, [r4, #84]	; 0x54
 801575a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801575e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015762:	81a3      	strheq	r3, [r4, #12]
 8015764:	bf18      	it	ne
 8015766:	81a3      	strhne	r3, [r4, #12]
 8015768:	bd10      	pop	{r4, pc}

0801576a <__sclose>:
 801576a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801576e:	f000 b8f9 	b.w	8015964 <_close_r>

08015772 <strcpy>:
 8015772:	4603      	mov	r3, r0
 8015774:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015778:	f803 2b01 	strb.w	r2, [r3], #1
 801577c:	2a00      	cmp	r2, #0
 801577e:	d1f9      	bne.n	8015774 <strcpy+0x2>
 8015780:	4770      	bx	lr
	...

08015784 <__swbuf_r>:
 8015784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015786:	460e      	mov	r6, r1
 8015788:	4614      	mov	r4, r2
 801578a:	4605      	mov	r5, r0
 801578c:	b118      	cbz	r0, 8015796 <__swbuf_r+0x12>
 801578e:	6983      	ldr	r3, [r0, #24]
 8015790:	b90b      	cbnz	r3, 8015796 <__swbuf_r+0x12>
 8015792:	f7ff fcab 	bl	80150ec <__sinit>
 8015796:	4b21      	ldr	r3, [pc, #132]	; (801581c <__swbuf_r+0x98>)
 8015798:	429c      	cmp	r4, r3
 801579a:	d12b      	bne.n	80157f4 <__swbuf_r+0x70>
 801579c:	686c      	ldr	r4, [r5, #4]
 801579e:	69a3      	ldr	r3, [r4, #24]
 80157a0:	60a3      	str	r3, [r4, #8]
 80157a2:	89a3      	ldrh	r3, [r4, #12]
 80157a4:	071a      	lsls	r2, r3, #28
 80157a6:	d52f      	bpl.n	8015808 <__swbuf_r+0x84>
 80157a8:	6923      	ldr	r3, [r4, #16]
 80157aa:	b36b      	cbz	r3, 8015808 <__swbuf_r+0x84>
 80157ac:	6923      	ldr	r3, [r4, #16]
 80157ae:	6820      	ldr	r0, [r4, #0]
 80157b0:	1ac0      	subs	r0, r0, r3
 80157b2:	6963      	ldr	r3, [r4, #20]
 80157b4:	b2f6      	uxtb	r6, r6
 80157b6:	4283      	cmp	r3, r0
 80157b8:	4637      	mov	r7, r6
 80157ba:	dc04      	bgt.n	80157c6 <__swbuf_r+0x42>
 80157bc:	4621      	mov	r1, r4
 80157be:	4628      	mov	r0, r5
 80157c0:	f000 f966 	bl	8015a90 <_fflush_r>
 80157c4:	bb30      	cbnz	r0, 8015814 <__swbuf_r+0x90>
 80157c6:	68a3      	ldr	r3, [r4, #8]
 80157c8:	3b01      	subs	r3, #1
 80157ca:	60a3      	str	r3, [r4, #8]
 80157cc:	6823      	ldr	r3, [r4, #0]
 80157ce:	1c5a      	adds	r2, r3, #1
 80157d0:	6022      	str	r2, [r4, #0]
 80157d2:	701e      	strb	r6, [r3, #0]
 80157d4:	6963      	ldr	r3, [r4, #20]
 80157d6:	3001      	adds	r0, #1
 80157d8:	4283      	cmp	r3, r0
 80157da:	d004      	beq.n	80157e6 <__swbuf_r+0x62>
 80157dc:	89a3      	ldrh	r3, [r4, #12]
 80157de:	07db      	lsls	r3, r3, #31
 80157e0:	d506      	bpl.n	80157f0 <__swbuf_r+0x6c>
 80157e2:	2e0a      	cmp	r6, #10
 80157e4:	d104      	bne.n	80157f0 <__swbuf_r+0x6c>
 80157e6:	4621      	mov	r1, r4
 80157e8:	4628      	mov	r0, r5
 80157ea:	f000 f951 	bl	8015a90 <_fflush_r>
 80157ee:	b988      	cbnz	r0, 8015814 <__swbuf_r+0x90>
 80157f0:	4638      	mov	r0, r7
 80157f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157f4:	4b0a      	ldr	r3, [pc, #40]	; (8015820 <__swbuf_r+0x9c>)
 80157f6:	429c      	cmp	r4, r3
 80157f8:	d101      	bne.n	80157fe <__swbuf_r+0x7a>
 80157fa:	68ac      	ldr	r4, [r5, #8]
 80157fc:	e7cf      	b.n	801579e <__swbuf_r+0x1a>
 80157fe:	4b09      	ldr	r3, [pc, #36]	; (8015824 <__swbuf_r+0xa0>)
 8015800:	429c      	cmp	r4, r3
 8015802:	bf08      	it	eq
 8015804:	68ec      	ldreq	r4, [r5, #12]
 8015806:	e7ca      	b.n	801579e <__swbuf_r+0x1a>
 8015808:	4621      	mov	r1, r4
 801580a:	4628      	mov	r0, r5
 801580c:	f000 f81e 	bl	801584c <__swsetup_r>
 8015810:	2800      	cmp	r0, #0
 8015812:	d0cb      	beq.n	80157ac <__swbuf_r+0x28>
 8015814:	f04f 37ff 	mov.w	r7, #4294967295
 8015818:	e7ea      	b.n	80157f0 <__swbuf_r+0x6c>
 801581a:	bf00      	nop
 801581c:	080196c0 	.word	0x080196c0
 8015820:	080196e0 	.word	0x080196e0
 8015824:	080196a0 	.word	0x080196a0

08015828 <_write_r>:
 8015828:	b538      	push	{r3, r4, r5, lr}
 801582a:	4d07      	ldr	r5, [pc, #28]	; (8015848 <_write_r+0x20>)
 801582c:	4604      	mov	r4, r0
 801582e:	4608      	mov	r0, r1
 8015830:	4611      	mov	r1, r2
 8015832:	2200      	movs	r2, #0
 8015834:	602a      	str	r2, [r5, #0]
 8015836:	461a      	mov	r2, r3
 8015838:	f7ff fb98 	bl	8014f6c <_write>
 801583c:	1c43      	adds	r3, r0, #1
 801583e:	d102      	bne.n	8015846 <_write_r+0x1e>
 8015840:	682b      	ldr	r3, [r5, #0]
 8015842:	b103      	cbz	r3, 8015846 <_write_r+0x1e>
 8015844:	6023      	str	r3, [r4, #0]
 8015846:	bd38      	pop	{r3, r4, r5, pc}
 8015848:	20040e24 	.word	0x20040e24

0801584c <__swsetup_r>:
 801584c:	4b32      	ldr	r3, [pc, #200]	; (8015918 <__swsetup_r+0xcc>)
 801584e:	b570      	push	{r4, r5, r6, lr}
 8015850:	681d      	ldr	r5, [r3, #0]
 8015852:	4606      	mov	r6, r0
 8015854:	460c      	mov	r4, r1
 8015856:	b125      	cbz	r5, 8015862 <__swsetup_r+0x16>
 8015858:	69ab      	ldr	r3, [r5, #24]
 801585a:	b913      	cbnz	r3, 8015862 <__swsetup_r+0x16>
 801585c:	4628      	mov	r0, r5
 801585e:	f7ff fc45 	bl	80150ec <__sinit>
 8015862:	4b2e      	ldr	r3, [pc, #184]	; (801591c <__swsetup_r+0xd0>)
 8015864:	429c      	cmp	r4, r3
 8015866:	d10f      	bne.n	8015888 <__swsetup_r+0x3c>
 8015868:	686c      	ldr	r4, [r5, #4]
 801586a:	89a3      	ldrh	r3, [r4, #12]
 801586c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015870:	0719      	lsls	r1, r3, #28
 8015872:	d42c      	bmi.n	80158ce <__swsetup_r+0x82>
 8015874:	06dd      	lsls	r5, r3, #27
 8015876:	d411      	bmi.n	801589c <__swsetup_r+0x50>
 8015878:	2309      	movs	r3, #9
 801587a:	6033      	str	r3, [r6, #0]
 801587c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015880:	81a3      	strh	r3, [r4, #12]
 8015882:	f04f 30ff 	mov.w	r0, #4294967295
 8015886:	e03e      	b.n	8015906 <__swsetup_r+0xba>
 8015888:	4b25      	ldr	r3, [pc, #148]	; (8015920 <__swsetup_r+0xd4>)
 801588a:	429c      	cmp	r4, r3
 801588c:	d101      	bne.n	8015892 <__swsetup_r+0x46>
 801588e:	68ac      	ldr	r4, [r5, #8]
 8015890:	e7eb      	b.n	801586a <__swsetup_r+0x1e>
 8015892:	4b24      	ldr	r3, [pc, #144]	; (8015924 <__swsetup_r+0xd8>)
 8015894:	429c      	cmp	r4, r3
 8015896:	bf08      	it	eq
 8015898:	68ec      	ldreq	r4, [r5, #12]
 801589a:	e7e6      	b.n	801586a <__swsetup_r+0x1e>
 801589c:	0758      	lsls	r0, r3, #29
 801589e:	d512      	bpl.n	80158c6 <__swsetup_r+0x7a>
 80158a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80158a2:	b141      	cbz	r1, 80158b6 <__swsetup_r+0x6a>
 80158a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80158a8:	4299      	cmp	r1, r3
 80158aa:	d002      	beq.n	80158b2 <__swsetup_r+0x66>
 80158ac:	4630      	mov	r0, r6
 80158ae:	f000 f9c9 	bl	8015c44 <_free_r>
 80158b2:	2300      	movs	r3, #0
 80158b4:	6363      	str	r3, [r4, #52]	; 0x34
 80158b6:	89a3      	ldrh	r3, [r4, #12]
 80158b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80158bc:	81a3      	strh	r3, [r4, #12]
 80158be:	2300      	movs	r3, #0
 80158c0:	6063      	str	r3, [r4, #4]
 80158c2:	6923      	ldr	r3, [r4, #16]
 80158c4:	6023      	str	r3, [r4, #0]
 80158c6:	89a3      	ldrh	r3, [r4, #12]
 80158c8:	f043 0308 	orr.w	r3, r3, #8
 80158cc:	81a3      	strh	r3, [r4, #12]
 80158ce:	6923      	ldr	r3, [r4, #16]
 80158d0:	b94b      	cbnz	r3, 80158e6 <__swsetup_r+0x9a>
 80158d2:	89a3      	ldrh	r3, [r4, #12]
 80158d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80158d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80158dc:	d003      	beq.n	80158e6 <__swsetup_r+0x9a>
 80158de:	4621      	mov	r1, r4
 80158e0:	4630      	mov	r0, r6
 80158e2:	f000 f95b 	bl	8015b9c <__smakebuf_r>
 80158e6:	89a0      	ldrh	r0, [r4, #12]
 80158e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80158ec:	f010 0301 	ands.w	r3, r0, #1
 80158f0:	d00a      	beq.n	8015908 <__swsetup_r+0xbc>
 80158f2:	2300      	movs	r3, #0
 80158f4:	60a3      	str	r3, [r4, #8]
 80158f6:	6963      	ldr	r3, [r4, #20]
 80158f8:	425b      	negs	r3, r3
 80158fa:	61a3      	str	r3, [r4, #24]
 80158fc:	6923      	ldr	r3, [r4, #16]
 80158fe:	b943      	cbnz	r3, 8015912 <__swsetup_r+0xc6>
 8015900:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015904:	d1ba      	bne.n	801587c <__swsetup_r+0x30>
 8015906:	bd70      	pop	{r4, r5, r6, pc}
 8015908:	0781      	lsls	r1, r0, #30
 801590a:	bf58      	it	pl
 801590c:	6963      	ldrpl	r3, [r4, #20]
 801590e:	60a3      	str	r3, [r4, #8]
 8015910:	e7f4      	b.n	80158fc <__swsetup_r+0xb0>
 8015912:	2000      	movs	r0, #0
 8015914:	e7f7      	b.n	8015906 <__swsetup_r+0xba>
 8015916:	bf00      	nop
 8015918:	20000054 	.word	0x20000054
 801591c:	080196c0 	.word	0x080196c0
 8015920:	080196e0 	.word	0x080196e0
 8015924:	080196a0 	.word	0x080196a0

08015928 <__assert_func>:
 8015928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801592a:	4614      	mov	r4, r2
 801592c:	461a      	mov	r2, r3
 801592e:	4b09      	ldr	r3, [pc, #36]	; (8015954 <__assert_func+0x2c>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	4605      	mov	r5, r0
 8015934:	68d8      	ldr	r0, [r3, #12]
 8015936:	b14c      	cbz	r4, 801594c <__assert_func+0x24>
 8015938:	4b07      	ldr	r3, [pc, #28]	; (8015958 <__assert_func+0x30>)
 801593a:	9100      	str	r1, [sp, #0]
 801593c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015940:	4906      	ldr	r1, [pc, #24]	; (801595c <__assert_func+0x34>)
 8015942:	462b      	mov	r3, r5
 8015944:	f000 f8e0 	bl	8015b08 <fiprintf>
 8015948:	f000 fe24 	bl	8016594 <abort>
 801594c:	4b04      	ldr	r3, [pc, #16]	; (8015960 <__assert_func+0x38>)
 801594e:	461c      	mov	r4, r3
 8015950:	e7f3      	b.n	801593a <__assert_func+0x12>
 8015952:	bf00      	nop
 8015954:	20000054 	.word	0x20000054
 8015958:	08019776 	.word	0x08019776
 801595c:	08019783 	.word	0x08019783
 8015960:	080197b1 	.word	0x080197b1

08015964 <_close_r>:
 8015964:	b538      	push	{r3, r4, r5, lr}
 8015966:	4d06      	ldr	r5, [pc, #24]	; (8015980 <_close_r+0x1c>)
 8015968:	2300      	movs	r3, #0
 801596a:	4604      	mov	r4, r0
 801596c:	4608      	mov	r0, r1
 801596e:	602b      	str	r3, [r5, #0]
 8015970:	f7eb f9b4 	bl	8000cdc <_close>
 8015974:	1c43      	adds	r3, r0, #1
 8015976:	d102      	bne.n	801597e <_close_r+0x1a>
 8015978:	682b      	ldr	r3, [r5, #0]
 801597a:	b103      	cbz	r3, 801597e <_close_r+0x1a>
 801597c:	6023      	str	r3, [r4, #0]
 801597e:	bd38      	pop	{r3, r4, r5, pc}
 8015980:	20040e24 	.word	0x20040e24

08015984 <__sflush_r>:
 8015984:	898a      	ldrh	r2, [r1, #12]
 8015986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801598a:	4605      	mov	r5, r0
 801598c:	0710      	lsls	r0, r2, #28
 801598e:	460c      	mov	r4, r1
 8015990:	d458      	bmi.n	8015a44 <__sflush_r+0xc0>
 8015992:	684b      	ldr	r3, [r1, #4]
 8015994:	2b00      	cmp	r3, #0
 8015996:	dc05      	bgt.n	80159a4 <__sflush_r+0x20>
 8015998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801599a:	2b00      	cmp	r3, #0
 801599c:	dc02      	bgt.n	80159a4 <__sflush_r+0x20>
 801599e:	2000      	movs	r0, #0
 80159a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159a6:	2e00      	cmp	r6, #0
 80159a8:	d0f9      	beq.n	801599e <__sflush_r+0x1a>
 80159aa:	2300      	movs	r3, #0
 80159ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80159b0:	682f      	ldr	r7, [r5, #0]
 80159b2:	602b      	str	r3, [r5, #0]
 80159b4:	d032      	beq.n	8015a1c <__sflush_r+0x98>
 80159b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80159b8:	89a3      	ldrh	r3, [r4, #12]
 80159ba:	075a      	lsls	r2, r3, #29
 80159bc:	d505      	bpl.n	80159ca <__sflush_r+0x46>
 80159be:	6863      	ldr	r3, [r4, #4]
 80159c0:	1ac0      	subs	r0, r0, r3
 80159c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80159c4:	b10b      	cbz	r3, 80159ca <__sflush_r+0x46>
 80159c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159c8:	1ac0      	subs	r0, r0, r3
 80159ca:	2300      	movs	r3, #0
 80159cc:	4602      	mov	r2, r0
 80159ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80159d0:	6a21      	ldr	r1, [r4, #32]
 80159d2:	4628      	mov	r0, r5
 80159d4:	47b0      	blx	r6
 80159d6:	1c43      	adds	r3, r0, #1
 80159d8:	89a3      	ldrh	r3, [r4, #12]
 80159da:	d106      	bne.n	80159ea <__sflush_r+0x66>
 80159dc:	6829      	ldr	r1, [r5, #0]
 80159de:	291d      	cmp	r1, #29
 80159e0:	d82c      	bhi.n	8015a3c <__sflush_r+0xb8>
 80159e2:	4a2a      	ldr	r2, [pc, #168]	; (8015a8c <__sflush_r+0x108>)
 80159e4:	40ca      	lsrs	r2, r1
 80159e6:	07d6      	lsls	r6, r2, #31
 80159e8:	d528      	bpl.n	8015a3c <__sflush_r+0xb8>
 80159ea:	2200      	movs	r2, #0
 80159ec:	6062      	str	r2, [r4, #4]
 80159ee:	04d9      	lsls	r1, r3, #19
 80159f0:	6922      	ldr	r2, [r4, #16]
 80159f2:	6022      	str	r2, [r4, #0]
 80159f4:	d504      	bpl.n	8015a00 <__sflush_r+0x7c>
 80159f6:	1c42      	adds	r2, r0, #1
 80159f8:	d101      	bne.n	80159fe <__sflush_r+0x7a>
 80159fa:	682b      	ldr	r3, [r5, #0]
 80159fc:	b903      	cbnz	r3, 8015a00 <__sflush_r+0x7c>
 80159fe:	6560      	str	r0, [r4, #84]	; 0x54
 8015a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a02:	602f      	str	r7, [r5, #0]
 8015a04:	2900      	cmp	r1, #0
 8015a06:	d0ca      	beq.n	801599e <__sflush_r+0x1a>
 8015a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a0c:	4299      	cmp	r1, r3
 8015a0e:	d002      	beq.n	8015a16 <__sflush_r+0x92>
 8015a10:	4628      	mov	r0, r5
 8015a12:	f000 f917 	bl	8015c44 <_free_r>
 8015a16:	2000      	movs	r0, #0
 8015a18:	6360      	str	r0, [r4, #52]	; 0x34
 8015a1a:	e7c1      	b.n	80159a0 <__sflush_r+0x1c>
 8015a1c:	6a21      	ldr	r1, [r4, #32]
 8015a1e:	2301      	movs	r3, #1
 8015a20:	4628      	mov	r0, r5
 8015a22:	47b0      	blx	r6
 8015a24:	1c41      	adds	r1, r0, #1
 8015a26:	d1c7      	bne.n	80159b8 <__sflush_r+0x34>
 8015a28:	682b      	ldr	r3, [r5, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d0c4      	beq.n	80159b8 <__sflush_r+0x34>
 8015a2e:	2b1d      	cmp	r3, #29
 8015a30:	d001      	beq.n	8015a36 <__sflush_r+0xb2>
 8015a32:	2b16      	cmp	r3, #22
 8015a34:	d101      	bne.n	8015a3a <__sflush_r+0xb6>
 8015a36:	602f      	str	r7, [r5, #0]
 8015a38:	e7b1      	b.n	801599e <__sflush_r+0x1a>
 8015a3a:	89a3      	ldrh	r3, [r4, #12]
 8015a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a40:	81a3      	strh	r3, [r4, #12]
 8015a42:	e7ad      	b.n	80159a0 <__sflush_r+0x1c>
 8015a44:	690f      	ldr	r7, [r1, #16]
 8015a46:	2f00      	cmp	r7, #0
 8015a48:	d0a9      	beq.n	801599e <__sflush_r+0x1a>
 8015a4a:	0793      	lsls	r3, r2, #30
 8015a4c:	680e      	ldr	r6, [r1, #0]
 8015a4e:	bf08      	it	eq
 8015a50:	694b      	ldreq	r3, [r1, #20]
 8015a52:	600f      	str	r7, [r1, #0]
 8015a54:	bf18      	it	ne
 8015a56:	2300      	movne	r3, #0
 8015a58:	eba6 0807 	sub.w	r8, r6, r7
 8015a5c:	608b      	str	r3, [r1, #8]
 8015a5e:	f1b8 0f00 	cmp.w	r8, #0
 8015a62:	dd9c      	ble.n	801599e <__sflush_r+0x1a>
 8015a64:	6a21      	ldr	r1, [r4, #32]
 8015a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015a68:	4643      	mov	r3, r8
 8015a6a:	463a      	mov	r2, r7
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	47b0      	blx	r6
 8015a70:	2800      	cmp	r0, #0
 8015a72:	dc06      	bgt.n	8015a82 <__sflush_r+0xfe>
 8015a74:	89a3      	ldrh	r3, [r4, #12]
 8015a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a7a:	81a3      	strh	r3, [r4, #12]
 8015a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a80:	e78e      	b.n	80159a0 <__sflush_r+0x1c>
 8015a82:	4407      	add	r7, r0
 8015a84:	eba8 0800 	sub.w	r8, r8, r0
 8015a88:	e7e9      	b.n	8015a5e <__sflush_r+0xda>
 8015a8a:	bf00      	nop
 8015a8c:	20400001 	.word	0x20400001

08015a90 <_fflush_r>:
 8015a90:	b538      	push	{r3, r4, r5, lr}
 8015a92:	690b      	ldr	r3, [r1, #16]
 8015a94:	4605      	mov	r5, r0
 8015a96:	460c      	mov	r4, r1
 8015a98:	b913      	cbnz	r3, 8015aa0 <_fflush_r+0x10>
 8015a9a:	2500      	movs	r5, #0
 8015a9c:	4628      	mov	r0, r5
 8015a9e:	bd38      	pop	{r3, r4, r5, pc}
 8015aa0:	b118      	cbz	r0, 8015aaa <_fflush_r+0x1a>
 8015aa2:	6983      	ldr	r3, [r0, #24]
 8015aa4:	b90b      	cbnz	r3, 8015aaa <_fflush_r+0x1a>
 8015aa6:	f7ff fb21 	bl	80150ec <__sinit>
 8015aaa:	4b14      	ldr	r3, [pc, #80]	; (8015afc <_fflush_r+0x6c>)
 8015aac:	429c      	cmp	r4, r3
 8015aae:	d11b      	bne.n	8015ae8 <_fflush_r+0x58>
 8015ab0:	686c      	ldr	r4, [r5, #4]
 8015ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d0ef      	beq.n	8015a9a <_fflush_r+0xa>
 8015aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015abc:	07d0      	lsls	r0, r2, #31
 8015abe:	d404      	bmi.n	8015aca <_fflush_r+0x3a>
 8015ac0:	0599      	lsls	r1, r3, #22
 8015ac2:	d402      	bmi.n	8015aca <_fflush_r+0x3a>
 8015ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ac6:	f7ff fbd4 	bl	8015272 <__retarget_lock_acquire_recursive>
 8015aca:	4628      	mov	r0, r5
 8015acc:	4621      	mov	r1, r4
 8015ace:	f7ff ff59 	bl	8015984 <__sflush_r>
 8015ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ad4:	07da      	lsls	r2, r3, #31
 8015ad6:	4605      	mov	r5, r0
 8015ad8:	d4e0      	bmi.n	8015a9c <_fflush_r+0xc>
 8015ada:	89a3      	ldrh	r3, [r4, #12]
 8015adc:	059b      	lsls	r3, r3, #22
 8015ade:	d4dd      	bmi.n	8015a9c <_fflush_r+0xc>
 8015ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ae2:	f7ff fbc7 	bl	8015274 <__retarget_lock_release_recursive>
 8015ae6:	e7d9      	b.n	8015a9c <_fflush_r+0xc>
 8015ae8:	4b05      	ldr	r3, [pc, #20]	; (8015b00 <_fflush_r+0x70>)
 8015aea:	429c      	cmp	r4, r3
 8015aec:	d101      	bne.n	8015af2 <_fflush_r+0x62>
 8015aee:	68ac      	ldr	r4, [r5, #8]
 8015af0:	e7df      	b.n	8015ab2 <_fflush_r+0x22>
 8015af2:	4b04      	ldr	r3, [pc, #16]	; (8015b04 <_fflush_r+0x74>)
 8015af4:	429c      	cmp	r4, r3
 8015af6:	bf08      	it	eq
 8015af8:	68ec      	ldreq	r4, [r5, #12]
 8015afa:	e7da      	b.n	8015ab2 <_fflush_r+0x22>
 8015afc:	080196c0 	.word	0x080196c0
 8015b00:	080196e0 	.word	0x080196e0
 8015b04:	080196a0 	.word	0x080196a0

08015b08 <fiprintf>:
 8015b08:	b40e      	push	{r1, r2, r3}
 8015b0a:	b503      	push	{r0, r1, lr}
 8015b0c:	4601      	mov	r1, r0
 8015b0e:	ab03      	add	r3, sp, #12
 8015b10:	4805      	ldr	r0, [pc, #20]	; (8015b28 <fiprintf+0x20>)
 8015b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b16:	6800      	ldr	r0, [r0, #0]
 8015b18:	9301      	str	r3, [sp, #4]
 8015b1a:	f000 fa65 	bl	8015fe8 <_vfiprintf_r>
 8015b1e:	b002      	add	sp, #8
 8015b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b24:	b003      	add	sp, #12
 8015b26:	4770      	bx	lr
 8015b28:	20000054 	.word	0x20000054

08015b2c <_lseek_r>:
 8015b2c:	b538      	push	{r3, r4, r5, lr}
 8015b2e:	4d07      	ldr	r5, [pc, #28]	; (8015b4c <_lseek_r+0x20>)
 8015b30:	4604      	mov	r4, r0
 8015b32:	4608      	mov	r0, r1
 8015b34:	4611      	mov	r1, r2
 8015b36:	2200      	movs	r2, #0
 8015b38:	602a      	str	r2, [r5, #0]
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	f7eb f8f5 	bl	8000d2a <_lseek>
 8015b40:	1c43      	adds	r3, r0, #1
 8015b42:	d102      	bne.n	8015b4a <_lseek_r+0x1e>
 8015b44:	682b      	ldr	r3, [r5, #0]
 8015b46:	b103      	cbz	r3, 8015b4a <_lseek_r+0x1e>
 8015b48:	6023      	str	r3, [r4, #0]
 8015b4a:	bd38      	pop	{r3, r4, r5, pc}
 8015b4c:	20040e24 	.word	0x20040e24

08015b50 <__swhatbuf_r>:
 8015b50:	b570      	push	{r4, r5, r6, lr}
 8015b52:	460e      	mov	r6, r1
 8015b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b58:	2900      	cmp	r1, #0
 8015b5a:	b096      	sub	sp, #88	; 0x58
 8015b5c:	4614      	mov	r4, r2
 8015b5e:	461d      	mov	r5, r3
 8015b60:	da08      	bge.n	8015b74 <__swhatbuf_r+0x24>
 8015b62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015b66:	2200      	movs	r2, #0
 8015b68:	602a      	str	r2, [r5, #0]
 8015b6a:	061a      	lsls	r2, r3, #24
 8015b6c:	d410      	bmi.n	8015b90 <__swhatbuf_r+0x40>
 8015b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b72:	e00e      	b.n	8015b92 <__swhatbuf_r+0x42>
 8015b74:	466a      	mov	r2, sp
 8015b76:	f000 fd15 	bl	80165a4 <_fstat_r>
 8015b7a:	2800      	cmp	r0, #0
 8015b7c:	dbf1      	blt.n	8015b62 <__swhatbuf_r+0x12>
 8015b7e:	9a01      	ldr	r2, [sp, #4]
 8015b80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b88:	425a      	negs	r2, r3
 8015b8a:	415a      	adcs	r2, r3
 8015b8c:	602a      	str	r2, [r5, #0]
 8015b8e:	e7ee      	b.n	8015b6e <__swhatbuf_r+0x1e>
 8015b90:	2340      	movs	r3, #64	; 0x40
 8015b92:	2000      	movs	r0, #0
 8015b94:	6023      	str	r3, [r4, #0]
 8015b96:	b016      	add	sp, #88	; 0x58
 8015b98:	bd70      	pop	{r4, r5, r6, pc}
	...

08015b9c <__smakebuf_r>:
 8015b9c:	898b      	ldrh	r3, [r1, #12]
 8015b9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ba0:	079d      	lsls	r5, r3, #30
 8015ba2:	4606      	mov	r6, r0
 8015ba4:	460c      	mov	r4, r1
 8015ba6:	d507      	bpl.n	8015bb8 <__smakebuf_r+0x1c>
 8015ba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015bac:	6023      	str	r3, [r4, #0]
 8015bae:	6123      	str	r3, [r4, #16]
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	6163      	str	r3, [r4, #20]
 8015bb4:	b002      	add	sp, #8
 8015bb6:	bd70      	pop	{r4, r5, r6, pc}
 8015bb8:	ab01      	add	r3, sp, #4
 8015bba:	466a      	mov	r2, sp
 8015bbc:	f7ff ffc8 	bl	8015b50 <__swhatbuf_r>
 8015bc0:	9900      	ldr	r1, [sp, #0]
 8015bc2:	4605      	mov	r5, r0
 8015bc4:	4630      	mov	r0, r6
 8015bc6:	f7ff fbb7 	bl	8015338 <_malloc_r>
 8015bca:	b948      	cbnz	r0, 8015be0 <__smakebuf_r+0x44>
 8015bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bd0:	059a      	lsls	r2, r3, #22
 8015bd2:	d4ef      	bmi.n	8015bb4 <__smakebuf_r+0x18>
 8015bd4:	f023 0303 	bic.w	r3, r3, #3
 8015bd8:	f043 0302 	orr.w	r3, r3, #2
 8015bdc:	81a3      	strh	r3, [r4, #12]
 8015bde:	e7e3      	b.n	8015ba8 <__smakebuf_r+0xc>
 8015be0:	4b0d      	ldr	r3, [pc, #52]	; (8015c18 <__smakebuf_r+0x7c>)
 8015be2:	62b3      	str	r3, [r6, #40]	; 0x28
 8015be4:	89a3      	ldrh	r3, [r4, #12]
 8015be6:	6020      	str	r0, [r4, #0]
 8015be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bec:	81a3      	strh	r3, [r4, #12]
 8015bee:	9b00      	ldr	r3, [sp, #0]
 8015bf0:	6163      	str	r3, [r4, #20]
 8015bf2:	9b01      	ldr	r3, [sp, #4]
 8015bf4:	6120      	str	r0, [r4, #16]
 8015bf6:	b15b      	cbz	r3, 8015c10 <__smakebuf_r+0x74>
 8015bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	f000 fce3 	bl	80165c8 <_isatty_r>
 8015c02:	b128      	cbz	r0, 8015c10 <__smakebuf_r+0x74>
 8015c04:	89a3      	ldrh	r3, [r4, #12]
 8015c06:	f023 0303 	bic.w	r3, r3, #3
 8015c0a:	f043 0301 	orr.w	r3, r3, #1
 8015c0e:	81a3      	strh	r3, [r4, #12]
 8015c10:	89a0      	ldrh	r0, [r4, #12]
 8015c12:	4305      	orrs	r5, r0
 8015c14:	81a5      	strh	r5, [r4, #12]
 8015c16:	e7cd      	b.n	8015bb4 <__smakebuf_r+0x18>
 8015c18:	08015085 	.word	0x08015085

08015c1c <malloc>:
 8015c1c:	4b02      	ldr	r3, [pc, #8]	; (8015c28 <malloc+0xc>)
 8015c1e:	4601      	mov	r1, r0
 8015c20:	6818      	ldr	r0, [r3, #0]
 8015c22:	f7ff bb89 	b.w	8015338 <_malloc_r>
 8015c26:	bf00      	nop
 8015c28:	20000054 	.word	0x20000054

08015c2c <__malloc_lock>:
 8015c2c:	4801      	ldr	r0, [pc, #4]	; (8015c34 <__malloc_lock+0x8>)
 8015c2e:	f7ff bb20 	b.w	8015272 <__retarget_lock_acquire_recursive>
 8015c32:	bf00      	nop
 8015c34:	20040e18 	.word	0x20040e18

08015c38 <__malloc_unlock>:
 8015c38:	4801      	ldr	r0, [pc, #4]	; (8015c40 <__malloc_unlock+0x8>)
 8015c3a:	f7ff bb1b 	b.w	8015274 <__retarget_lock_release_recursive>
 8015c3e:	bf00      	nop
 8015c40:	20040e18 	.word	0x20040e18

08015c44 <_free_r>:
 8015c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c46:	2900      	cmp	r1, #0
 8015c48:	d044      	beq.n	8015cd4 <_free_r+0x90>
 8015c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c4e:	9001      	str	r0, [sp, #4]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	f1a1 0404 	sub.w	r4, r1, #4
 8015c56:	bfb8      	it	lt
 8015c58:	18e4      	addlt	r4, r4, r3
 8015c5a:	f7ff ffe7 	bl	8015c2c <__malloc_lock>
 8015c5e:	4a1e      	ldr	r2, [pc, #120]	; (8015cd8 <_free_r+0x94>)
 8015c60:	9801      	ldr	r0, [sp, #4]
 8015c62:	6813      	ldr	r3, [r2, #0]
 8015c64:	b933      	cbnz	r3, 8015c74 <_free_r+0x30>
 8015c66:	6063      	str	r3, [r4, #4]
 8015c68:	6014      	str	r4, [r2, #0]
 8015c6a:	b003      	add	sp, #12
 8015c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c70:	f7ff bfe2 	b.w	8015c38 <__malloc_unlock>
 8015c74:	42a3      	cmp	r3, r4
 8015c76:	d908      	bls.n	8015c8a <_free_r+0x46>
 8015c78:	6825      	ldr	r5, [r4, #0]
 8015c7a:	1961      	adds	r1, r4, r5
 8015c7c:	428b      	cmp	r3, r1
 8015c7e:	bf01      	itttt	eq
 8015c80:	6819      	ldreq	r1, [r3, #0]
 8015c82:	685b      	ldreq	r3, [r3, #4]
 8015c84:	1949      	addeq	r1, r1, r5
 8015c86:	6021      	streq	r1, [r4, #0]
 8015c88:	e7ed      	b.n	8015c66 <_free_r+0x22>
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	685b      	ldr	r3, [r3, #4]
 8015c8e:	b10b      	cbz	r3, 8015c94 <_free_r+0x50>
 8015c90:	42a3      	cmp	r3, r4
 8015c92:	d9fa      	bls.n	8015c8a <_free_r+0x46>
 8015c94:	6811      	ldr	r1, [r2, #0]
 8015c96:	1855      	adds	r5, r2, r1
 8015c98:	42a5      	cmp	r5, r4
 8015c9a:	d10b      	bne.n	8015cb4 <_free_r+0x70>
 8015c9c:	6824      	ldr	r4, [r4, #0]
 8015c9e:	4421      	add	r1, r4
 8015ca0:	1854      	adds	r4, r2, r1
 8015ca2:	42a3      	cmp	r3, r4
 8015ca4:	6011      	str	r1, [r2, #0]
 8015ca6:	d1e0      	bne.n	8015c6a <_free_r+0x26>
 8015ca8:	681c      	ldr	r4, [r3, #0]
 8015caa:	685b      	ldr	r3, [r3, #4]
 8015cac:	6053      	str	r3, [r2, #4]
 8015cae:	4421      	add	r1, r4
 8015cb0:	6011      	str	r1, [r2, #0]
 8015cb2:	e7da      	b.n	8015c6a <_free_r+0x26>
 8015cb4:	d902      	bls.n	8015cbc <_free_r+0x78>
 8015cb6:	230c      	movs	r3, #12
 8015cb8:	6003      	str	r3, [r0, #0]
 8015cba:	e7d6      	b.n	8015c6a <_free_r+0x26>
 8015cbc:	6825      	ldr	r5, [r4, #0]
 8015cbe:	1961      	adds	r1, r4, r5
 8015cc0:	428b      	cmp	r3, r1
 8015cc2:	bf04      	itt	eq
 8015cc4:	6819      	ldreq	r1, [r3, #0]
 8015cc6:	685b      	ldreq	r3, [r3, #4]
 8015cc8:	6063      	str	r3, [r4, #4]
 8015cca:	bf04      	itt	eq
 8015ccc:	1949      	addeq	r1, r1, r5
 8015cce:	6021      	streq	r1, [r4, #0]
 8015cd0:	6054      	str	r4, [r2, #4]
 8015cd2:	e7ca      	b.n	8015c6a <_free_r+0x26>
 8015cd4:	b003      	add	sp, #12
 8015cd6:	bd30      	pop	{r4, r5, pc}
 8015cd8:	20040e1c 	.word	0x20040e1c

08015cdc <__ssputs_r>:
 8015cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ce0:	688e      	ldr	r6, [r1, #8]
 8015ce2:	429e      	cmp	r6, r3
 8015ce4:	4682      	mov	sl, r0
 8015ce6:	460c      	mov	r4, r1
 8015ce8:	4690      	mov	r8, r2
 8015cea:	461f      	mov	r7, r3
 8015cec:	d838      	bhi.n	8015d60 <__ssputs_r+0x84>
 8015cee:	898a      	ldrh	r2, [r1, #12]
 8015cf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015cf4:	d032      	beq.n	8015d5c <__ssputs_r+0x80>
 8015cf6:	6825      	ldr	r5, [r4, #0]
 8015cf8:	6909      	ldr	r1, [r1, #16]
 8015cfa:	eba5 0901 	sub.w	r9, r5, r1
 8015cfe:	6965      	ldr	r5, [r4, #20]
 8015d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015d08:	3301      	adds	r3, #1
 8015d0a:	444b      	add	r3, r9
 8015d0c:	106d      	asrs	r5, r5, #1
 8015d0e:	429d      	cmp	r5, r3
 8015d10:	bf38      	it	cc
 8015d12:	461d      	movcc	r5, r3
 8015d14:	0553      	lsls	r3, r2, #21
 8015d16:	d531      	bpl.n	8015d7c <__ssputs_r+0xa0>
 8015d18:	4629      	mov	r1, r5
 8015d1a:	f7ff fb0d 	bl	8015338 <_malloc_r>
 8015d1e:	4606      	mov	r6, r0
 8015d20:	b950      	cbnz	r0, 8015d38 <__ssputs_r+0x5c>
 8015d22:	230c      	movs	r3, #12
 8015d24:	f8ca 3000 	str.w	r3, [sl]
 8015d28:	89a3      	ldrh	r3, [r4, #12]
 8015d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d2e:	81a3      	strh	r3, [r4, #12]
 8015d30:	f04f 30ff 	mov.w	r0, #4294967295
 8015d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d38:	6921      	ldr	r1, [r4, #16]
 8015d3a:	464a      	mov	r2, r9
 8015d3c:	f7ff faab 	bl	8015296 <memcpy>
 8015d40:	89a3      	ldrh	r3, [r4, #12]
 8015d42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015d4a:	81a3      	strh	r3, [r4, #12]
 8015d4c:	6126      	str	r6, [r4, #16]
 8015d4e:	6165      	str	r5, [r4, #20]
 8015d50:	444e      	add	r6, r9
 8015d52:	eba5 0509 	sub.w	r5, r5, r9
 8015d56:	6026      	str	r6, [r4, #0]
 8015d58:	60a5      	str	r5, [r4, #8]
 8015d5a:	463e      	mov	r6, r7
 8015d5c:	42be      	cmp	r6, r7
 8015d5e:	d900      	bls.n	8015d62 <__ssputs_r+0x86>
 8015d60:	463e      	mov	r6, r7
 8015d62:	6820      	ldr	r0, [r4, #0]
 8015d64:	4632      	mov	r2, r6
 8015d66:	4641      	mov	r1, r8
 8015d68:	f7ff faa3 	bl	80152b2 <memmove>
 8015d6c:	68a3      	ldr	r3, [r4, #8]
 8015d6e:	1b9b      	subs	r3, r3, r6
 8015d70:	60a3      	str	r3, [r4, #8]
 8015d72:	6823      	ldr	r3, [r4, #0]
 8015d74:	4433      	add	r3, r6
 8015d76:	6023      	str	r3, [r4, #0]
 8015d78:	2000      	movs	r0, #0
 8015d7a:	e7db      	b.n	8015d34 <__ssputs_r+0x58>
 8015d7c:	462a      	mov	r2, r5
 8015d7e:	f000 fc33 	bl	80165e8 <_realloc_r>
 8015d82:	4606      	mov	r6, r0
 8015d84:	2800      	cmp	r0, #0
 8015d86:	d1e1      	bne.n	8015d4c <__ssputs_r+0x70>
 8015d88:	6921      	ldr	r1, [r4, #16]
 8015d8a:	4650      	mov	r0, sl
 8015d8c:	f7ff ff5a 	bl	8015c44 <_free_r>
 8015d90:	e7c7      	b.n	8015d22 <__ssputs_r+0x46>
	...

08015d94 <_svfiprintf_r>:
 8015d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d98:	4698      	mov	r8, r3
 8015d9a:	898b      	ldrh	r3, [r1, #12]
 8015d9c:	061b      	lsls	r3, r3, #24
 8015d9e:	b09d      	sub	sp, #116	; 0x74
 8015da0:	4607      	mov	r7, r0
 8015da2:	460d      	mov	r5, r1
 8015da4:	4614      	mov	r4, r2
 8015da6:	d50e      	bpl.n	8015dc6 <_svfiprintf_r+0x32>
 8015da8:	690b      	ldr	r3, [r1, #16]
 8015daa:	b963      	cbnz	r3, 8015dc6 <_svfiprintf_r+0x32>
 8015dac:	2140      	movs	r1, #64	; 0x40
 8015dae:	f7ff fac3 	bl	8015338 <_malloc_r>
 8015db2:	6028      	str	r0, [r5, #0]
 8015db4:	6128      	str	r0, [r5, #16]
 8015db6:	b920      	cbnz	r0, 8015dc2 <_svfiprintf_r+0x2e>
 8015db8:	230c      	movs	r3, #12
 8015dba:	603b      	str	r3, [r7, #0]
 8015dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8015dc0:	e0d1      	b.n	8015f66 <_svfiprintf_r+0x1d2>
 8015dc2:	2340      	movs	r3, #64	; 0x40
 8015dc4:	616b      	str	r3, [r5, #20]
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8015dca:	2320      	movs	r3, #32
 8015dcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8015dd4:	2330      	movs	r3, #48	; 0x30
 8015dd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015f80 <_svfiprintf_r+0x1ec>
 8015dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015dde:	f04f 0901 	mov.w	r9, #1
 8015de2:	4623      	mov	r3, r4
 8015de4:	469a      	mov	sl, r3
 8015de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015dea:	b10a      	cbz	r2, 8015df0 <_svfiprintf_r+0x5c>
 8015dec:	2a25      	cmp	r2, #37	; 0x25
 8015dee:	d1f9      	bne.n	8015de4 <_svfiprintf_r+0x50>
 8015df0:	ebba 0b04 	subs.w	fp, sl, r4
 8015df4:	d00b      	beq.n	8015e0e <_svfiprintf_r+0x7a>
 8015df6:	465b      	mov	r3, fp
 8015df8:	4622      	mov	r2, r4
 8015dfa:	4629      	mov	r1, r5
 8015dfc:	4638      	mov	r0, r7
 8015dfe:	f7ff ff6d 	bl	8015cdc <__ssputs_r>
 8015e02:	3001      	adds	r0, #1
 8015e04:	f000 80aa 	beq.w	8015f5c <_svfiprintf_r+0x1c8>
 8015e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e0a:	445a      	add	r2, fp
 8015e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8015e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	f000 80a2 	beq.w	8015f5c <_svfiprintf_r+0x1c8>
 8015e18:	2300      	movs	r3, #0
 8015e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8015e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e22:	f10a 0a01 	add.w	sl, sl, #1
 8015e26:	9304      	str	r3, [sp, #16]
 8015e28:	9307      	str	r3, [sp, #28]
 8015e2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e2e:	931a      	str	r3, [sp, #104]	; 0x68
 8015e30:	4654      	mov	r4, sl
 8015e32:	2205      	movs	r2, #5
 8015e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e38:	4851      	ldr	r0, [pc, #324]	; (8015f80 <_svfiprintf_r+0x1ec>)
 8015e3a:	f7ea f9f1 	bl	8000220 <memchr>
 8015e3e:	9a04      	ldr	r2, [sp, #16]
 8015e40:	b9d8      	cbnz	r0, 8015e7a <_svfiprintf_r+0xe6>
 8015e42:	06d0      	lsls	r0, r2, #27
 8015e44:	bf44      	itt	mi
 8015e46:	2320      	movmi	r3, #32
 8015e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e4c:	0711      	lsls	r1, r2, #28
 8015e4e:	bf44      	itt	mi
 8015e50:	232b      	movmi	r3, #43	; 0x2b
 8015e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e56:	f89a 3000 	ldrb.w	r3, [sl]
 8015e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8015e5c:	d015      	beq.n	8015e8a <_svfiprintf_r+0xf6>
 8015e5e:	9a07      	ldr	r2, [sp, #28]
 8015e60:	4654      	mov	r4, sl
 8015e62:	2000      	movs	r0, #0
 8015e64:	f04f 0c0a 	mov.w	ip, #10
 8015e68:	4621      	mov	r1, r4
 8015e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e6e:	3b30      	subs	r3, #48	; 0x30
 8015e70:	2b09      	cmp	r3, #9
 8015e72:	d94e      	bls.n	8015f12 <_svfiprintf_r+0x17e>
 8015e74:	b1b0      	cbz	r0, 8015ea4 <_svfiprintf_r+0x110>
 8015e76:	9207      	str	r2, [sp, #28]
 8015e78:	e014      	b.n	8015ea4 <_svfiprintf_r+0x110>
 8015e7a:	eba0 0308 	sub.w	r3, r0, r8
 8015e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8015e82:	4313      	orrs	r3, r2
 8015e84:	9304      	str	r3, [sp, #16]
 8015e86:	46a2      	mov	sl, r4
 8015e88:	e7d2      	b.n	8015e30 <_svfiprintf_r+0x9c>
 8015e8a:	9b03      	ldr	r3, [sp, #12]
 8015e8c:	1d19      	adds	r1, r3, #4
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	9103      	str	r1, [sp, #12]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	bfbb      	ittet	lt
 8015e96:	425b      	neglt	r3, r3
 8015e98:	f042 0202 	orrlt.w	r2, r2, #2
 8015e9c:	9307      	strge	r3, [sp, #28]
 8015e9e:	9307      	strlt	r3, [sp, #28]
 8015ea0:	bfb8      	it	lt
 8015ea2:	9204      	strlt	r2, [sp, #16]
 8015ea4:	7823      	ldrb	r3, [r4, #0]
 8015ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8015ea8:	d10c      	bne.n	8015ec4 <_svfiprintf_r+0x130>
 8015eaa:	7863      	ldrb	r3, [r4, #1]
 8015eac:	2b2a      	cmp	r3, #42	; 0x2a
 8015eae:	d135      	bne.n	8015f1c <_svfiprintf_r+0x188>
 8015eb0:	9b03      	ldr	r3, [sp, #12]
 8015eb2:	1d1a      	adds	r2, r3, #4
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	9203      	str	r2, [sp, #12]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	bfb8      	it	lt
 8015ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ec0:	3402      	adds	r4, #2
 8015ec2:	9305      	str	r3, [sp, #20]
 8015ec4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015f90 <_svfiprintf_r+0x1fc>
 8015ec8:	7821      	ldrb	r1, [r4, #0]
 8015eca:	2203      	movs	r2, #3
 8015ecc:	4650      	mov	r0, sl
 8015ece:	f7ea f9a7 	bl	8000220 <memchr>
 8015ed2:	b140      	cbz	r0, 8015ee6 <_svfiprintf_r+0x152>
 8015ed4:	2340      	movs	r3, #64	; 0x40
 8015ed6:	eba0 000a 	sub.w	r0, r0, sl
 8015eda:	fa03 f000 	lsl.w	r0, r3, r0
 8015ede:	9b04      	ldr	r3, [sp, #16]
 8015ee0:	4303      	orrs	r3, r0
 8015ee2:	3401      	adds	r4, #1
 8015ee4:	9304      	str	r3, [sp, #16]
 8015ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eea:	4826      	ldr	r0, [pc, #152]	; (8015f84 <_svfiprintf_r+0x1f0>)
 8015eec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ef0:	2206      	movs	r2, #6
 8015ef2:	f7ea f995 	bl	8000220 <memchr>
 8015ef6:	2800      	cmp	r0, #0
 8015ef8:	d038      	beq.n	8015f6c <_svfiprintf_r+0x1d8>
 8015efa:	4b23      	ldr	r3, [pc, #140]	; (8015f88 <_svfiprintf_r+0x1f4>)
 8015efc:	bb1b      	cbnz	r3, 8015f46 <_svfiprintf_r+0x1b2>
 8015efe:	9b03      	ldr	r3, [sp, #12]
 8015f00:	3307      	adds	r3, #7
 8015f02:	f023 0307 	bic.w	r3, r3, #7
 8015f06:	3308      	adds	r3, #8
 8015f08:	9303      	str	r3, [sp, #12]
 8015f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f0c:	4433      	add	r3, r6
 8015f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8015f10:	e767      	b.n	8015de2 <_svfiprintf_r+0x4e>
 8015f12:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f16:	460c      	mov	r4, r1
 8015f18:	2001      	movs	r0, #1
 8015f1a:	e7a5      	b.n	8015e68 <_svfiprintf_r+0xd4>
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	3401      	adds	r4, #1
 8015f20:	9305      	str	r3, [sp, #20]
 8015f22:	4619      	mov	r1, r3
 8015f24:	f04f 0c0a 	mov.w	ip, #10
 8015f28:	4620      	mov	r0, r4
 8015f2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f2e:	3a30      	subs	r2, #48	; 0x30
 8015f30:	2a09      	cmp	r2, #9
 8015f32:	d903      	bls.n	8015f3c <_svfiprintf_r+0x1a8>
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d0c5      	beq.n	8015ec4 <_svfiprintf_r+0x130>
 8015f38:	9105      	str	r1, [sp, #20]
 8015f3a:	e7c3      	b.n	8015ec4 <_svfiprintf_r+0x130>
 8015f3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f40:	4604      	mov	r4, r0
 8015f42:	2301      	movs	r3, #1
 8015f44:	e7f0      	b.n	8015f28 <_svfiprintf_r+0x194>
 8015f46:	ab03      	add	r3, sp, #12
 8015f48:	9300      	str	r3, [sp, #0]
 8015f4a:	462a      	mov	r2, r5
 8015f4c:	4b0f      	ldr	r3, [pc, #60]	; (8015f8c <_svfiprintf_r+0x1f8>)
 8015f4e:	a904      	add	r1, sp, #16
 8015f50:	4638      	mov	r0, r7
 8015f52:	f3af 8000 	nop.w
 8015f56:	1c42      	adds	r2, r0, #1
 8015f58:	4606      	mov	r6, r0
 8015f5a:	d1d6      	bne.n	8015f0a <_svfiprintf_r+0x176>
 8015f5c:	89ab      	ldrh	r3, [r5, #12]
 8015f5e:	065b      	lsls	r3, r3, #25
 8015f60:	f53f af2c 	bmi.w	8015dbc <_svfiprintf_r+0x28>
 8015f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f66:	b01d      	add	sp, #116	; 0x74
 8015f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f6c:	ab03      	add	r3, sp, #12
 8015f6e:	9300      	str	r3, [sp, #0]
 8015f70:	462a      	mov	r2, r5
 8015f72:	4b06      	ldr	r3, [pc, #24]	; (8015f8c <_svfiprintf_r+0x1f8>)
 8015f74:	a904      	add	r1, sp, #16
 8015f76:	4638      	mov	r0, r7
 8015f78:	f000 f9d4 	bl	8016324 <_printf_i>
 8015f7c:	e7eb      	b.n	8015f56 <_svfiprintf_r+0x1c2>
 8015f7e:	bf00      	nop
 8015f80:	080197b2 	.word	0x080197b2
 8015f84:	080197bc 	.word	0x080197bc
 8015f88:	00000000 	.word	0x00000000
 8015f8c:	08015cdd 	.word	0x08015cdd
 8015f90:	080197b8 	.word	0x080197b8

08015f94 <__sfputc_r>:
 8015f94:	6893      	ldr	r3, [r2, #8]
 8015f96:	3b01      	subs	r3, #1
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	b410      	push	{r4}
 8015f9c:	6093      	str	r3, [r2, #8]
 8015f9e:	da08      	bge.n	8015fb2 <__sfputc_r+0x1e>
 8015fa0:	6994      	ldr	r4, [r2, #24]
 8015fa2:	42a3      	cmp	r3, r4
 8015fa4:	db01      	blt.n	8015faa <__sfputc_r+0x16>
 8015fa6:	290a      	cmp	r1, #10
 8015fa8:	d103      	bne.n	8015fb2 <__sfputc_r+0x1e>
 8015faa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fae:	f7ff bbe9 	b.w	8015784 <__swbuf_r>
 8015fb2:	6813      	ldr	r3, [r2, #0]
 8015fb4:	1c58      	adds	r0, r3, #1
 8015fb6:	6010      	str	r0, [r2, #0]
 8015fb8:	7019      	strb	r1, [r3, #0]
 8015fba:	4608      	mov	r0, r1
 8015fbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fc0:	4770      	bx	lr

08015fc2 <__sfputs_r>:
 8015fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fc4:	4606      	mov	r6, r0
 8015fc6:	460f      	mov	r7, r1
 8015fc8:	4614      	mov	r4, r2
 8015fca:	18d5      	adds	r5, r2, r3
 8015fcc:	42ac      	cmp	r4, r5
 8015fce:	d101      	bne.n	8015fd4 <__sfputs_r+0x12>
 8015fd0:	2000      	movs	r0, #0
 8015fd2:	e007      	b.n	8015fe4 <__sfputs_r+0x22>
 8015fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fd8:	463a      	mov	r2, r7
 8015fda:	4630      	mov	r0, r6
 8015fdc:	f7ff ffda 	bl	8015f94 <__sfputc_r>
 8015fe0:	1c43      	adds	r3, r0, #1
 8015fe2:	d1f3      	bne.n	8015fcc <__sfputs_r+0xa>
 8015fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015fe8 <_vfiprintf_r>:
 8015fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fec:	460d      	mov	r5, r1
 8015fee:	b09d      	sub	sp, #116	; 0x74
 8015ff0:	4614      	mov	r4, r2
 8015ff2:	4698      	mov	r8, r3
 8015ff4:	4606      	mov	r6, r0
 8015ff6:	b118      	cbz	r0, 8016000 <_vfiprintf_r+0x18>
 8015ff8:	6983      	ldr	r3, [r0, #24]
 8015ffa:	b90b      	cbnz	r3, 8016000 <_vfiprintf_r+0x18>
 8015ffc:	f7ff f876 	bl	80150ec <__sinit>
 8016000:	4b89      	ldr	r3, [pc, #548]	; (8016228 <_vfiprintf_r+0x240>)
 8016002:	429d      	cmp	r5, r3
 8016004:	d11b      	bne.n	801603e <_vfiprintf_r+0x56>
 8016006:	6875      	ldr	r5, [r6, #4]
 8016008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801600a:	07d9      	lsls	r1, r3, #31
 801600c:	d405      	bmi.n	801601a <_vfiprintf_r+0x32>
 801600e:	89ab      	ldrh	r3, [r5, #12]
 8016010:	059a      	lsls	r2, r3, #22
 8016012:	d402      	bmi.n	801601a <_vfiprintf_r+0x32>
 8016014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016016:	f7ff f92c 	bl	8015272 <__retarget_lock_acquire_recursive>
 801601a:	89ab      	ldrh	r3, [r5, #12]
 801601c:	071b      	lsls	r3, r3, #28
 801601e:	d501      	bpl.n	8016024 <_vfiprintf_r+0x3c>
 8016020:	692b      	ldr	r3, [r5, #16]
 8016022:	b9eb      	cbnz	r3, 8016060 <_vfiprintf_r+0x78>
 8016024:	4629      	mov	r1, r5
 8016026:	4630      	mov	r0, r6
 8016028:	f7ff fc10 	bl	801584c <__swsetup_r>
 801602c:	b1c0      	cbz	r0, 8016060 <_vfiprintf_r+0x78>
 801602e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016030:	07dc      	lsls	r4, r3, #31
 8016032:	d50e      	bpl.n	8016052 <_vfiprintf_r+0x6a>
 8016034:	f04f 30ff 	mov.w	r0, #4294967295
 8016038:	b01d      	add	sp, #116	; 0x74
 801603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801603e:	4b7b      	ldr	r3, [pc, #492]	; (801622c <_vfiprintf_r+0x244>)
 8016040:	429d      	cmp	r5, r3
 8016042:	d101      	bne.n	8016048 <_vfiprintf_r+0x60>
 8016044:	68b5      	ldr	r5, [r6, #8]
 8016046:	e7df      	b.n	8016008 <_vfiprintf_r+0x20>
 8016048:	4b79      	ldr	r3, [pc, #484]	; (8016230 <_vfiprintf_r+0x248>)
 801604a:	429d      	cmp	r5, r3
 801604c:	bf08      	it	eq
 801604e:	68f5      	ldreq	r5, [r6, #12]
 8016050:	e7da      	b.n	8016008 <_vfiprintf_r+0x20>
 8016052:	89ab      	ldrh	r3, [r5, #12]
 8016054:	0598      	lsls	r0, r3, #22
 8016056:	d4ed      	bmi.n	8016034 <_vfiprintf_r+0x4c>
 8016058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801605a:	f7ff f90b 	bl	8015274 <__retarget_lock_release_recursive>
 801605e:	e7e9      	b.n	8016034 <_vfiprintf_r+0x4c>
 8016060:	2300      	movs	r3, #0
 8016062:	9309      	str	r3, [sp, #36]	; 0x24
 8016064:	2320      	movs	r3, #32
 8016066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801606a:	f8cd 800c 	str.w	r8, [sp, #12]
 801606e:	2330      	movs	r3, #48	; 0x30
 8016070:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016234 <_vfiprintf_r+0x24c>
 8016074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016078:	f04f 0901 	mov.w	r9, #1
 801607c:	4623      	mov	r3, r4
 801607e:	469a      	mov	sl, r3
 8016080:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016084:	b10a      	cbz	r2, 801608a <_vfiprintf_r+0xa2>
 8016086:	2a25      	cmp	r2, #37	; 0x25
 8016088:	d1f9      	bne.n	801607e <_vfiprintf_r+0x96>
 801608a:	ebba 0b04 	subs.w	fp, sl, r4
 801608e:	d00b      	beq.n	80160a8 <_vfiprintf_r+0xc0>
 8016090:	465b      	mov	r3, fp
 8016092:	4622      	mov	r2, r4
 8016094:	4629      	mov	r1, r5
 8016096:	4630      	mov	r0, r6
 8016098:	f7ff ff93 	bl	8015fc2 <__sfputs_r>
 801609c:	3001      	adds	r0, #1
 801609e:	f000 80aa 	beq.w	80161f6 <_vfiprintf_r+0x20e>
 80160a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160a4:	445a      	add	r2, fp
 80160a6:	9209      	str	r2, [sp, #36]	; 0x24
 80160a8:	f89a 3000 	ldrb.w	r3, [sl]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	f000 80a2 	beq.w	80161f6 <_vfiprintf_r+0x20e>
 80160b2:	2300      	movs	r3, #0
 80160b4:	f04f 32ff 	mov.w	r2, #4294967295
 80160b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80160bc:	f10a 0a01 	add.w	sl, sl, #1
 80160c0:	9304      	str	r3, [sp, #16]
 80160c2:	9307      	str	r3, [sp, #28]
 80160c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80160c8:	931a      	str	r3, [sp, #104]	; 0x68
 80160ca:	4654      	mov	r4, sl
 80160cc:	2205      	movs	r2, #5
 80160ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160d2:	4858      	ldr	r0, [pc, #352]	; (8016234 <_vfiprintf_r+0x24c>)
 80160d4:	f7ea f8a4 	bl	8000220 <memchr>
 80160d8:	9a04      	ldr	r2, [sp, #16]
 80160da:	b9d8      	cbnz	r0, 8016114 <_vfiprintf_r+0x12c>
 80160dc:	06d1      	lsls	r1, r2, #27
 80160de:	bf44      	itt	mi
 80160e0:	2320      	movmi	r3, #32
 80160e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160e6:	0713      	lsls	r3, r2, #28
 80160e8:	bf44      	itt	mi
 80160ea:	232b      	movmi	r3, #43	; 0x2b
 80160ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80160f0:	f89a 3000 	ldrb.w	r3, [sl]
 80160f4:	2b2a      	cmp	r3, #42	; 0x2a
 80160f6:	d015      	beq.n	8016124 <_vfiprintf_r+0x13c>
 80160f8:	9a07      	ldr	r2, [sp, #28]
 80160fa:	4654      	mov	r4, sl
 80160fc:	2000      	movs	r0, #0
 80160fe:	f04f 0c0a 	mov.w	ip, #10
 8016102:	4621      	mov	r1, r4
 8016104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016108:	3b30      	subs	r3, #48	; 0x30
 801610a:	2b09      	cmp	r3, #9
 801610c:	d94e      	bls.n	80161ac <_vfiprintf_r+0x1c4>
 801610e:	b1b0      	cbz	r0, 801613e <_vfiprintf_r+0x156>
 8016110:	9207      	str	r2, [sp, #28]
 8016112:	e014      	b.n	801613e <_vfiprintf_r+0x156>
 8016114:	eba0 0308 	sub.w	r3, r0, r8
 8016118:	fa09 f303 	lsl.w	r3, r9, r3
 801611c:	4313      	orrs	r3, r2
 801611e:	9304      	str	r3, [sp, #16]
 8016120:	46a2      	mov	sl, r4
 8016122:	e7d2      	b.n	80160ca <_vfiprintf_r+0xe2>
 8016124:	9b03      	ldr	r3, [sp, #12]
 8016126:	1d19      	adds	r1, r3, #4
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	9103      	str	r1, [sp, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	bfbb      	ittet	lt
 8016130:	425b      	neglt	r3, r3
 8016132:	f042 0202 	orrlt.w	r2, r2, #2
 8016136:	9307      	strge	r3, [sp, #28]
 8016138:	9307      	strlt	r3, [sp, #28]
 801613a:	bfb8      	it	lt
 801613c:	9204      	strlt	r2, [sp, #16]
 801613e:	7823      	ldrb	r3, [r4, #0]
 8016140:	2b2e      	cmp	r3, #46	; 0x2e
 8016142:	d10c      	bne.n	801615e <_vfiprintf_r+0x176>
 8016144:	7863      	ldrb	r3, [r4, #1]
 8016146:	2b2a      	cmp	r3, #42	; 0x2a
 8016148:	d135      	bne.n	80161b6 <_vfiprintf_r+0x1ce>
 801614a:	9b03      	ldr	r3, [sp, #12]
 801614c:	1d1a      	adds	r2, r3, #4
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	9203      	str	r2, [sp, #12]
 8016152:	2b00      	cmp	r3, #0
 8016154:	bfb8      	it	lt
 8016156:	f04f 33ff 	movlt.w	r3, #4294967295
 801615a:	3402      	adds	r4, #2
 801615c:	9305      	str	r3, [sp, #20]
 801615e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016244 <_vfiprintf_r+0x25c>
 8016162:	7821      	ldrb	r1, [r4, #0]
 8016164:	2203      	movs	r2, #3
 8016166:	4650      	mov	r0, sl
 8016168:	f7ea f85a 	bl	8000220 <memchr>
 801616c:	b140      	cbz	r0, 8016180 <_vfiprintf_r+0x198>
 801616e:	2340      	movs	r3, #64	; 0x40
 8016170:	eba0 000a 	sub.w	r0, r0, sl
 8016174:	fa03 f000 	lsl.w	r0, r3, r0
 8016178:	9b04      	ldr	r3, [sp, #16]
 801617a:	4303      	orrs	r3, r0
 801617c:	3401      	adds	r4, #1
 801617e:	9304      	str	r3, [sp, #16]
 8016180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016184:	482c      	ldr	r0, [pc, #176]	; (8016238 <_vfiprintf_r+0x250>)
 8016186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801618a:	2206      	movs	r2, #6
 801618c:	f7ea f848 	bl	8000220 <memchr>
 8016190:	2800      	cmp	r0, #0
 8016192:	d03f      	beq.n	8016214 <_vfiprintf_r+0x22c>
 8016194:	4b29      	ldr	r3, [pc, #164]	; (801623c <_vfiprintf_r+0x254>)
 8016196:	bb1b      	cbnz	r3, 80161e0 <_vfiprintf_r+0x1f8>
 8016198:	9b03      	ldr	r3, [sp, #12]
 801619a:	3307      	adds	r3, #7
 801619c:	f023 0307 	bic.w	r3, r3, #7
 80161a0:	3308      	adds	r3, #8
 80161a2:	9303      	str	r3, [sp, #12]
 80161a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161a6:	443b      	add	r3, r7
 80161a8:	9309      	str	r3, [sp, #36]	; 0x24
 80161aa:	e767      	b.n	801607c <_vfiprintf_r+0x94>
 80161ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80161b0:	460c      	mov	r4, r1
 80161b2:	2001      	movs	r0, #1
 80161b4:	e7a5      	b.n	8016102 <_vfiprintf_r+0x11a>
 80161b6:	2300      	movs	r3, #0
 80161b8:	3401      	adds	r4, #1
 80161ba:	9305      	str	r3, [sp, #20]
 80161bc:	4619      	mov	r1, r3
 80161be:	f04f 0c0a 	mov.w	ip, #10
 80161c2:	4620      	mov	r0, r4
 80161c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80161c8:	3a30      	subs	r2, #48	; 0x30
 80161ca:	2a09      	cmp	r2, #9
 80161cc:	d903      	bls.n	80161d6 <_vfiprintf_r+0x1ee>
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d0c5      	beq.n	801615e <_vfiprintf_r+0x176>
 80161d2:	9105      	str	r1, [sp, #20]
 80161d4:	e7c3      	b.n	801615e <_vfiprintf_r+0x176>
 80161d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80161da:	4604      	mov	r4, r0
 80161dc:	2301      	movs	r3, #1
 80161de:	e7f0      	b.n	80161c2 <_vfiprintf_r+0x1da>
 80161e0:	ab03      	add	r3, sp, #12
 80161e2:	9300      	str	r3, [sp, #0]
 80161e4:	462a      	mov	r2, r5
 80161e6:	4b16      	ldr	r3, [pc, #88]	; (8016240 <_vfiprintf_r+0x258>)
 80161e8:	a904      	add	r1, sp, #16
 80161ea:	4630      	mov	r0, r6
 80161ec:	f3af 8000 	nop.w
 80161f0:	4607      	mov	r7, r0
 80161f2:	1c78      	adds	r0, r7, #1
 80161f4:	d1d6      	bne.n	80161a4 <_vfiprintf_r+0x1bc>
 80161f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80161f8:	07d9      	lsls	r1, r3, #31
 80161fa:	d405      	bmi.n	8016208 <_vfiprintf_r+0x220>
 80161fc:	89ab      	ldrh	r3, [r5, #12]
 80161fe:	059a      	lsls	r2, r3, #22
 8016200:	d402      	bmi.n	8016208 <_vfiprintf_r+0x220>
 8016202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016204:	f7ff f836 	bl	8015274 <__retarget_lock_release_recursive>
 8016208:	89ab      	ldrh	r3, [r5, #12]
 801620a:	065b      	lsls	r3, r3, #25
 801620c:	f53f af12 	bmi.w	8016034 <_vfiprintf_r+0x4c>
 8016210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016212:	e711      	b.n	8016038 <_vfiprintf_r+0x50>
 8016214:	ab03      	add	r3, sp, #12
 8016216:	9300      	str	r3, [sp, #0]
 8016218:	462a      	mov	r2, r5
 801621a:	4b09      	ldr	r3, [pc, #36]	; (8016240 <_vfiprintf_r+0x258>)
 801621c:	a904      	add	r1, sp, #16
 801621e:	4630      	mov	r0, r6
 8016220:	f000 f880 	bl	8016324 <_printf_i>
 8016224:	e7e4      	b.n	80161f0 <_vfiprintf_r+0x208>
 8016226:	bf00      	nop
 8016228:	080196c0 	.word	0x080196c0
 801622c:	080196e0 	.word	0x080196e0
 8016230:	080196a0 	.word	0x080196a0
 8016234:	080197b2 	.word	0x080197b2
 8016238:	080197bc 	.word	0x080197bc
 801623c:	00000000 	.word	0x00000000
 8016240:	08015fc3 	.word	0x08015fc3
 8016244:	080197b8 	.word	0x080197b8

08016248 <_printf_common>:
 8016248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801624c:	4616      	mov	r6, r2
 801624e:	4699      	mov	r9, r3
 8016250:	688a      	ldr	r2, [r1, #8]
 8016252:	690b      	ldr	r3, [r1, #16]
 8016254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016258:	4293      	cmp	r3, r2
 801625a:	bfb8      	it	lt
 801625c:	4613      	movlt	r3, r2
 801625e:	6033      	str	r3, [r6, #0]
 8016260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016264:	4607      	mov	r7, r0
 8016266:	460c      	mov	r4, r1
 8016268:	b10a      	cbz	r2, 801626e <_printf_common+0x26>
 801626a:	3301      	adds	r3, #1
 801626c:	6033      	str	r3, [r6, #0]
 801626e:	6823      	ldr	r3, [r4, #0]
 8016270:	0699      	lsls	r1, r3, #26
 8016272:	bf42      	ittt	mi
 8016274:	6833      	ldrmi	r3, [r6, #0]
 8016276:	3302      	addmi	r3, #2
 8016278:	6033      	strmi	r3, [r6, #0]
 801627a:	6825      	ldr	r5, [r4, #0]
 801627c:	f015 0506 	ands.w	r5, r5, #6
 8016280:	d106      	bne.n	8016290 <_printf_common+0x48>
 8016282:	f104 0a19 	add.w	sl, r4, #25
 8016286:	68e3      	ldr	r3, [r4, #12]
 8016288:	6832      	ldr	r2, [r6, #0]
 801628a:	1a9b      	subs	r3, r3, r2
 801628c:	42ab      	cmp	r3, r5
 801628e:	dc26      	bgt.n	80162de <_printf_common+0x96>
 8016290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016294:	1e13      	subs	r3, r2, #0
 8016296:	6822      	ldr	r2, [r4, #0]
 8016298:	bf18      	it	ne
 801629a:	2301      	movne	r3, #1
 801629c:	0692      	lsls	r2, r2, #26
 801629e:	d42b      	bmi.n	80162f8 <_printf_common+0xb0>
 80162a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80162a4:	4649      	mov	r1, r9
 80162a6:	4638      	mov	r0, r7
 80162a8:	47c0      	blx	r8
 80162aa:	3001      	adds	r0, #1
 80162ac:	d01e      	beq.n	80162ec <_printf_common+0xa4>
 80162ae:	6823      	ldr	r3, [r4, #0]
 80162b0:	68e5      	ldr	r5, [r4, #12]
 80162b2:	6832      	ldr	r2, [r6, #0]
 80162b4:	f003 0306 	and.w	r3, r3, #6
 80162b8:	2b04      	cmp	r3, #4
 80162ba:	bf08      	it	eq
 80162bc:	1aad      	subeq	r5, r5, r2
 80162be:	68a3      	ldr	r3, [r4, #8]
 80162c0:	6922      	ldr	r2, [r4, #16]
 80162c2:	bf0c      	ite	eq
 80162c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80162c8:	2500      	movne	r5, #0
 80162ca:	4293      	cmp	r3, r2
 80162cc:	bfc4      	itt	gt
 80162ce:	1a9b      	subgt	r3, r3, r2
 80162d0:	18ed      	addgt	r5, r5, r3
 80162d2:	2600      	movs	r6, #0
 80162d4:	341a      	adds	r4, #26
 80162d6:	42b5      	cmp	r5, r6
 80162d8:	d11a      	bne.n	8016310 <_printf_common+0xc8>
 80162da:	2000      	movs	r0, #0
 80162dc:	e008      	b.n	80162f0 <_printf_common+0xa8>
 80162de:	2301      	movs	r3, #1
 80162e0:	4652      	mov	r2, sl
 80162e2:	4649      	mov	r1, r9
 80162e4:	4638      	mov	r0, r7
 80162e6:	47c0      	blx	r8
 80162e8:	3001      	adds	r0, #1
 80162ea:	d103      	bne.n	80162f4 <_printf_common+0xac>
 80162ec:	f04f 30ff 	mov.w	r0, #4294967295
 80162f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80162f4:	3501      	adds	r5, #1
 80162f6:	e7c6      	b.n	8016286 <_printf_common+0x3e>
 80162f8:	18e1      	adds	r1, r4, r3
 80162fa:	1c5a      	adds	r2, r3, #1
 80162fc:	2030      	movs	r0, #48	; 0x30
 80162fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016302:	4422      	add	r2, r4
 8016304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801630c:	3302      	adds	r3, #2
 801630e:	e7c7      	b.n	80162a0 <_printf_common+0x58>
 8016310:	2301      	movs	r3, #1
 8016312:	4622      	mov	r2, r4
 8016314:	4649      	mov	r1, r9
 8016316:	4638      	mov	r0, r7
 8016318:	47c0      	blx	r8
 801631a:	3001      	adds	r0, #1
 801631c:	d0e6      	beq.n	80162ec <_printf_common+0xa4>
 801631e:	3601      	adds	r6, #1
 8016320:	e7d9      	b.n	80162d6 <_printf_common+0x8e>
	...

08016324 <_printf_i>:
 8016324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016328:	7e0f      	ldrb	r7, [r1, #24]
 801632a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801632c:	2f78      	cmp	r7, #120	; 0x78
 801632e:	4691      	mov	r9, r2
 8016330:	4680      	mov	r8, r0
 8016332:	460c      	mov	r4, r1
 8016334:	469a      	mov	sl, r3
 8016336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801633a:	d807      	bhi.n	801634c <_printf_i+0x28>
 801633c:	2f62      	cmp	r7, #98	; 0x62
 801633e:	d80a      	bhi.n	8016356 <_printf_i+0x32>
 8016340:	2f00      	cmp	r7, #0
 8016342:	f000 80d8 	beq.w	80164f6 <_printf_i+0x1d2>
 8016346:	2f58      	cmp	r7, #88	; 0x58
 8016348:	f000 80a3 	beq.w	8016492 <_printf_i+0x16e>
 801634c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016354:	e03a      	b.n	80163cc <_printf_i+0xa8>
 8016356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801635a:	2b15      	cmp	r3, #21
 801635c:	d8f6      	bhi.n	801634c <_printf_i+0x28>
 801635e:	a101      	add	r1, pc, #4	; (adr r1, 8016364 <_printf_i+0x40>)
 8016360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016364:	080163bd 	.word	0x080163bd
 8016368:	080163d1 	.word	0x080163d1
 801636c:	0801634d 	.word	0x0801634d
 8016370:	0801634d 	.word	0x0801634d
 8016374:	0801634d 	.word	0x0801634d
 8016378:	0801634d 	.word	0x0801634d
 801637c:	080163d1 	.word	0x080163d1
 8016380:	0801634d 	.word	0x0801634d
 8016384:	0801634d 	.word	0x0801634d
 8016388:	0801634d 	.word	0x0801634d
 801638c:	0801634d 	.word	0x0801634d
 8016390:	080164dd 	.word	0x080164dd
 8016394:	08016401 	.word	0x08016401
 8016398:	080164bf 	.word	0x080164bf
 801639c:	0801634d 	.word	0x0801634d
 80163a0:	0801634d 	.word	0x0801634d
 80163a4:	080164ff 	.word	0x080164ff
 80163a8:	0801634d 	.word	0x0801634d
 80163ac:	08016401 	.word	0x08016401
 80163b0:	0801634d 	.word	0x0801634d
 80163b4:	0801634d 	.word	0x0801634d
 80163b8:	080164c7 	.word	0x080164c7
 80163bc:	682b      	ldr	r3, [r5, #0]
 80163be:	1d1a      	adds	r2, r3, #4
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	602a      	str	r2, [r5, #0]
 80163c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80163c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80163cc:	2301      	movs	r3, #1
 80163ce:	e0a3      	b.n	8016518 <_printf_i+0x1f4>
 80163d0:	6820      	ldr	r0, [r4, #0]
 80163d2:	6829      	ldr	r1, [r5, #0]
 80163d4:	0606      	lsls	r6, r0, #24
 80163d6:	f101 0304 	add.w	r3, r1, #4
 80163da:	d50a      	bpl.n	80163f2 <_printf_i+0xce>
 80163dc:	680e      	ldr	r6, [r1, #0]
 80163de:	602b      	str	r3, [r5, #0]
 80163e0:	2e00      	cmp	r6, #0
 80163e2:	da03      	bge.n	80163ec <_printf_i+0xc8>
 80163e4:	232d      	movs	r3, #45	; 0x2d
 80163e6:	4276      	negs	r6, r6
 80163e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163ec:	485e      	ldr	r0, [pc, #376]	; (8016568 <_printf_i+0x244>)
 80163ee:	230a      	movs	r3, #10
 80163f0:	e019      	b.n	8016426 <_printf_i+0x102>
 80163f2:	680e      	ldr	r6, [r1, #0]
 80163f4:	602b      	str	r3, [r5, #0]
 80163f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80163fa:	bf18      	it	ne
 80163fc:	b236      	sxthne	r6, r6
 80163fe:	e7ef      	b.n	80163e0 <_printf_i+0xbc>
 8016400:	682b      	ldr	r3, [r5, #0]
 8016402:	6820      	ldr	r0, [r4, #0]
 8016404:	1d19      	adds	r1, r3, #4
 8016406:	6029      	str	r1, [r5, #0]
 8016408:	0601      	lsls	r1, r0, #24
 801640a:	d501      	bpl.n	8016410 <_printf_i+0xec>
 801640c:	681e      	ldr	r6, [r3, #0]
 801640e:	e002      	b.n	8016416 <_printf_i+0xf2>
 8016410:	0646      	lsls	r6, r0, #25
 8016412:	d5fb      	bpl.n	801640c <_printf_i+0xe8>
 8016414:	881e      	ldrh	r6, [r3, #0]
 8016416:	4854      	ldr	r0, [pc, #336]	; (8016568 <_printf_i+0x244>)
 8016418:	2f6f      	cmp	r7, #111	; 0x6f
 801641a:	bf0c      	ite	eq
 801641c:	2308      	moveq	r3, #8
 801641e:	230a      	movne	r3, #10
 8016420:	2100      	movs	r1, #0
 8016422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016426:	6865      	ldr	r5, [r4, #4]
 8016428:	60a5      	str	r5, [r4, #8]
 801642a:	2d00      	cmp	r5, #0
 801642c:	bfa2      	ittt	ge
 801642e:	6821      	ldrge	r1, [r4, #0]
 8016430:	f021 0104 	bicge.w	r1, r1, #4
 8016434:	6021      	strge	r1, [r4, #0]
 8016436:	b90e      	cbnz	r6, 801643c <_printf_i+0x118>
 8016438:	2d00      	cmp	r5, #0
 801643a:	d04d      	beq.n	80164d8 <_printf_i+0x1b4>
 801643c:	4615      	mov	r5, r2
 801643e:	fbb6 f1f3 	udiv	r1, r6, r3
 8016442:	fb03 6711 	mls	r7, r3, r1, r6
 8016446:	5dc7      	ldrb	r7, [r0, r7]
 8016448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801644c:	4637      	mov	r7, r6
 801644e:	42bb      	cmp	r3, r7
 8016450:	460e      	mov	r6, r1
 8016452:	d9f4      	bls.n	801643e <_printf_i+0x11a>
 8016454:	2b08      	cmp	r3, #8
 8016456:	d10b      	bne.n	8016470 <_printf_i+0x14c>
 8016458:	6823      	ldr	r3, [r4, #0]
 801645a:	07de      	lsls	r6, r3, #31
 801645c:	d508      	bpl.n	8016470 <_printf_i+0x14c>
 801645e:	6923      	ldr	r3, [r4, #16]
 8016460:	6861      	ldr	r1, [r4, #4]
 8016462:	4299      	cmp	r1, r3
 8016464:	bfde      	ittt	le
 8016466:	2330      	movle	r3, #48	; 0x30
 8016468:	f805 3c01 	strble.w	r3, [r5, #-1]
 801646c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016470:	1b52      	subs	r2, r2, r5
 8016472:	6122      	str	r2, [r4, #16]
 8016474:	f8cd a000 	str.w	sl, [sp]
 8016478:	464b      	mov	r3, r9
 801647a:	aa03      	add	r2, sp, #12
 801647c:	4621      	mov	r1, r4
 801647e:	4640      	mov	r0, r8
 8016480:	f7ff fee2 	bl	8016248 <_printf_common>
 8016484:	3001      	adds	r0, #1
 8016486:	d14c      	bne.n	8016522 <_printf_i+0x1fe>
 8016488:	f04f 30ff 	mov.w	r0, #4294967295
 801648c:	b004      	add	sp, #16
 801648e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016492:	4835      	ldr	r0, [pc, #212]	; (8016568 <_printf_i+0x244>)
 8016494:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016498:	6829      	ldr	r1, [r5, #0]
 801649a:	6823      	ldr	r3, [r4, #0]
 801649c:	f851 6b04 	ldr.w	r6, [r1], #4
 80164a0:	6029      	str	r1, [r5, #0]
 80164a2:	061d      	lsls	r5, r3, #24
 80164a4:	d514      	bpl.n	80164d0 <_printf_i+0x1ac>
 80164a6:	07df      	lsls	r7, r3, #31
 80164a8:	bf44      	itt	mi
 80164aa:	f043 0320 	orrmi.w	r3, r3, #32
 80164ae:	6023      	strmi	r3, [r4, #0]
 80164b0:	b91e      	cbnz	r6, 80164ba <_printf_i+0x196>
 80164b2:	6823      	ldr	r3, [r4, #0]
 80164b4:	f023 0320 	bic.w	r3, r3, #32
 80164b8:	6023      	str	r3, [r4, #0]
 80164ba:	2310      	movs	r3, #16
 80164bc:	e7b0      	b.n	8016420 <_printf_i+0xfc>
 80164be:	6823      	ldr	r3, [r4, #0]
 80164c0:	f043 0320 	orr.w	r3, r3, #32
 80164c4:	6023      	str	r3, [r4, #0]
 80164c6:	2378      	movs	r3, #120	; 0x78
 80164c8:	4828      	ldr	r0, [pc, #160]	; (801656c <_printf_i+0x248>)
 80164ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80164ce:	e7e3      	b.n	8016498 <_printf_i+0x174>
 80164d0:	0659      	lsls	r1, r3, #25
 80164d2:	bf48      	it	mi
 80164d4:	b2b6      	uxthmi	r6, r6
 80164d6:	e7e6      	b.n	80164a6 <_printf_i+0x182>
 80164d8:	4615      	mov	r5, r2
 80164da:	e7bb      	b.n	8016454 <_printf_i+0x130>
 80164dc:	682b      	ldr	r3, [r5, #0]
 80164de:	6826      	ldr	r6, [r4, #0]
 80164e0:	6961      	ldr	r1, [r4, #20]
 80164e2:	1d18      	adds	r0, r3, #4
 80164e4:	6028      	str	r0, [r5, #0]
 80164e6:	0635      	lsls	r5, r6, #24
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	d501      	bpl.n	80164f0 <_printf_i+0x1cc>
 80164ec:	6019      	str	r1, [r3, #0]
 80164ee:	e002      	b.n	80164f6 <_printf_i+0x1d2>
 80164f0:	0670      	lsls	r0, r6, #25
 80164f2:	d5fb      	bpl.n	80164ec <_printf_i+0x1c8>
 80164f4:	8019      	strh	r1, [r3, #0]
 80164f6:	2300      	movs	r3, #0
 80164f8:	6123      	str	r3, [r4, #16]
 80164fa:	4615      	mov	r5, r2
 80164fc:	e7ba      	b.n	8016474 <_printf_i+0x150>
 80164fe:	682b      	ldr	r3, [r5, #0]
 8016500:	1d1a      	adds	r2, r3, #4
 8016502:	602a      	str	r2, [r5, #0]
 8016504:	681d      	ldr	r5, [r3, #0]
 8016506:	6862      	ldr	r2, [r4, #4]
 8016508:	2100      	movs	r1, #0
 801650a:	4628      	mov	r0, r5
 801650c:	f7e9 fe88 	bl	8000220 <memchr>
 8016510:	b108      	cbz	r0, 8016516 <_printf_i+0x1f2>
 8016512:	1b40      	subs	r0, r0, r5
 8016514:	6060      	str	r0, [r4, #4]
 8016516:	6863      	ldr	r3, [r4, #4]
 8016518:	6123      	str	r3, [r4, #16]
 801651a:	2300      	movs	r3, #0
 801651c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016520:	e7a8      	b.n	8016474 <_printf_i+0x150>
 8016522:	6923      	ldr	r3, [r4, #16]
 8016524:	462a      	mov	r2, r5
 8016526:	4649      	mov	r1, r9
 8016528:	4640      	mov	r0, r8
 801652a:	47d0      	blx	sl
 801652c:	3001      	adds	r0, #1
 801652e:	d0ab      	beq.n	8016488 <_printf_i+0x164>
 8016530:	6823      	ldr	r3, [r4, #0]
 8016532:	079b      	lsls	r3, r3, #30
 8016534:	d413      	bmi.n	801655e <_printf_i+0x23a>
 8016536:	68e0      	ldr	r0, [r4, #12]
 8016538:	9b03      	ldr	r3, [sp, #12]
 801653a:	4298      	cmp	r0, r3
 801653c:	bfb8      	it	lt
 801653e:	4618      	movlt	r0, r3
 8016540:	e7a4      	b.n	801648c <_printf_i+0x168>
 8016542:	2301      	movs	r3, #1
 8016544:	4632      	mov	r2, r6
 8016546:	4649      	mov	r1, r9
 8016548:	4640      	mov	r0, r8
 801654a:	47d0      	blx	sl
 801654c:	3001      	adds	r0, #1
 801654e:	d09b      	beq.n	8016488 <_printf_i+0x164>
 8016550:	3501      	adds	r5, #1
 8016552:	68e3      	ldr	r3, [r4, #12]
 8016554:	9903      	ldr	r1, [sp, #12]
 8016556:	1a5b      	subs	r3, r3, r1
 8016558:	42ab      	cmp	r3, r5
 801655a:	dcf2      	bgt.n	8016542 <_printf_i+0x21e>
 801655c:	e7eb      	b.n	8016536 <_printf_i+0x212>
 801655e:	2500      	movs	r5, #0
 8016560:	f104 0619 	add.w	r6, r4, #25
 8016564:	e7f5      	b.n	8016552 <_printf_i+0x22e>
 8016566:	bf00      	nop
 8016568:	080197c3 	.word	0x080197c3
 801656c:	080197d4 	.word	0x080197d4

08016570 <_read_r>:
 8016570:	b538      	push	{r3, r4, r5, lr}
 8016572:	4d07      	ldr	r5, [pc, #28]	; (8016590 <_read_r+0x20>)
 8016574:	4604      	mov	r4, r0
 8016576:	4608      	mov	r0, r1
 8016578:	4611      	mov	r1, r2
 801657a:	2200      	movs	r2, #0
 801657c:	602a      	str	r2, [r5, #0]
 801657e:	461a      	mov	r2, r3
 8016580:	f7fe fd0a 	bl	8014f98 <_read>
 8016584:	1c43      	adds	r3, r0, #1
 8016586:	d102      	bne.n	801658e <_read_r+0x1e>
 8016588:	682b      	ldr	r3, [r5, #0]
 801658a:	b103      	cbz	r3, 801658e <_read_r+0x1e>
 801658c:	6023      	str	r3, [r4, #0]
 801658e:	bd38      	pop	{r3, r4, r5, pc}
 8016590:	20040e24 	.word	0x20040e24

08016594 <abort>:
 8016594:	b508      	push	{r3, lr}
 8016596:	2006      	movs	r0, #6
 8016598:	f000 f87e 	bl	8016698 <raise>
 801659c:	2001      	movs	r0, #1
 801659e:	f7ea fb93 	bl	8000cc8 <_exit>
	...

080165a4 <_fstat_r>:
 80165a4:	b538      	push	{r3, r4, r5, lr}
 80165a6:	4d07      	ldr	r5, [pc, #28]	; (80165c4 <_fstat_r+0x20>)
 80165a8:	2300      	movs	r3, #0
 80165aa:	4604      	mov	r4, r0
 80165ac:	4608      	mov	r0, r1
 80165ae:	4611      	mov	r1, r2
 80165b0:	602b      	str	r3, [r5, #0]
 80165b2:	f7ea fb9f 	bl	8000cf4 <_fstat>
 80165b6:	1c43      	adds	r3, r0, #1
 80165b8:	d102      	bne.n	80165c0 <_fstat_r+0x1c>
 80165ba:	682b      	ldr	r3, [r5, #0]
 80165bc:	b103      	cbz	r3, 80165c0 <_fstat_r+0x1c>
 80165be:	6023      	str	r3, [r4, #0]
 80165c0:	bd38      	pop	{r3, r4, r5, pc}
 80165c2:	bf00      	nop
 80165c4:	20040e24 	.word	0x20040e24

080165c8 <_isatty_r>:
 80165c8:	b538      	push	{r3, r4, r5, lr}
 80165ca:	4d06      	ldr	r5, [pc, #24]	; (80165e4 <_isatty_r+0x1c>)
 80165cc:	2300      	movs	r3, #0
 80165ce:	4604      	mov	r4, r0
 80165d0:	4608      	mov	r0, r1
 80165d2:	602b      	str	r3, [r5, #0]
 80165d4:	f7ea fb9e 	bl	8000d14 <_isatty>
 80165d8:	1c43      	adds	r3, r0, #1
 80165da:	d102      	bne.n	80165e2 <_isatty_r+0x1a>
 80165dc:	682b      	ldr	r3, [r5, #0]
 80165de:	b103      	cbz	r3, 80165e2 <_isatty_r+0x1a>
 80165e0:	6023      	str	r3, [r4, #0]
 80165e2:	bd38      	pop	{r3, r4, r5, pc}
 80165e4:	20040e24 	.word	0x20040e24

080165e8 <_realloc_r>:
 80165e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165ec:	4680      	mov	r8, r0
 80165ee:	4614      	mov	r4, r2
 80165f0:	460e      	mov	r6, r1
 80165f2:	b921      	cbnz	r1, 80165fe <_realloc_r+0x16>
 80165f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165f8:	4611      	mov	r1, r2
 80165fa:	f7fe be9d 	b.w	8015338 <_malloc_r>
 80165fe:	b92a      	cbnz	r2, 801660c <_realloc_r+0x24>
 8016600:	f7ff fb20 	bl	8015c44 <_free_r>
 8016604:	4625      	mov	r5, r4
 8016606:	4628      	mov	r0, r5
 8016608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801660c:	f000 f860 	bl	80166d0 <_malloc_usable_size_r>
 8016610:	4284      	cmp	r4, r0
 8016612:	4607      	mov	r7, r0
 8016614:	d802      	bhi.n	801661c <_realloc_r+0x34>
 8016616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801661a:	d812      	bhi.n	8016642 <_realloc_r+0x5a>
 801661c:	4621      	mov	r1, r4
 801661e:	4640      	mov	r0, r8
 8016620:	f7fe fe8a 	bl	8015338 <_malloc_r>
 8016624:	4605      	mov	r5, r0
 8016626:	2800      	cmp	r0, #0
 8016628:	d0ed      	beq.n	8016606 <_realloc_r+0x1e>
 801662a:	42bc      	cmp	r4, r7
 801662c:	4622      	mov	r2, r4
 801662e:	4631      	mov	r1, r6
 8016630:	bf28      	it	cs
 8016632:	463a      	movcs	r2, r7
 8016634:	f7fe fe2f 	bl	8015296 <memcpy>
 8016638:	4631      	mov	r1, r6
 801663a:	4640      	mov	r0, r8
 801663c:	f7ff fb02 	bl	8015c44 <_free_r>
 8016640:	e7e1      	b.n	8016606 <_realloc_r+0x1e>
 8016642:	4635      	mov	r5, r6
 8016644:	e7df      	b.n	8016606 <_realloc_r+0x1e>

08016646 <_raise_r>:
 8016646:	291f      	cmp	r1, #31
 8016648:	b538      	push	{r3, r4, r5, lr}
 801664a:	4604      	mov	r4, r0
 801664c:	460d      	mov	r5, r1
 801664e:	d904      	bls.n	801665a <_raise_r+0x14>
 8016650:	2316      	movs	r3, #22
 8016652:	6003      	str	r3, [r0, #0]
 8016654:	f04f 30ff 	mov.w	r0, #4294967295
 8016658:	bd38      	pop	{r3, r4, r5, pc}
 801665a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801665c:	b112      	cbz	r2, 8016664 <_raise_r+0x1e>
 801665e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016662:	b94b      	cbnz	r3, 8016678 <_raise_r+0x32>
 8016664:	4620      	mov	r0, r4
 8016666:	f000 f831 	bl	80166cc <_getpid_r>
 801666a:	462a      	mov	r2, r5
 801666c:	4601      	mov	r1, r0
 801666e:	4620      	mov	r0, r4
 8016670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016674:	f000 b818 	b.w	80166a8 <_kill_r>
 8016678:	2b01      	cmp	r3, #1
 801667a:	d00a      	beq.n	8016692 <_raise_r+0x4c>
 801667c:	1c59      	adds	r1, r3, #1
 801667e:	d103      	bne.n	8016688 <_raise_r+0x42>
 8016680:	2316      	movs	r3, #22
 8016682:	6003      	str	r3, [r0, #0]
 8016684:	2001      	movs	r0, #1
 8016686:	e7e7      	b.n	8016658 <_raise_r+0x12>
 8016688:	2400      	movs	r4, #0
 801668a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801668e:	4628      	mov	r0, r5
 8016690:	4798      	blx	r3
 8016692:	2000      	movs	r0, #0
 8016694:	e7e0      	b.n	8016658 <_raise_r+0x12>
	...

08016698 <raise>:
 8016698:	4b02      	ldr	r3, [pc, #8]	; (80166a4 <raise+0xc>)
 801669a:	4601      	mov	r1, r0
 801669c:	6818      	ldr	r0, [r3, #0]
 801669e:	f7ff bfd2 	b.w	8016646 <_raise_r>
 80166a2:	bf00      	nop
 80166a4:	20000054 	.word	0x20000054

080166a8 <_kill_r>:
 80166a8:	b538      	push	{r3, r4, r5, lr}
 80166aa:	4d07      	ldr	r5, [pc, #28]	; (80166c8 <_kill_r+0x20>)
 80166ac:	2300      	movs	r3, #0
 80166ae:	4604      	mov	r4, r0
 80166b0:	4608      	mov	r0, r1
 80166b2:	4611      	mov	r1, r2
 80166b4:	602b      	str	r3, [r5, #0]
 80166b6:	f7ea faf5 	bl	8000ca4 <_kill>
 80166ba:	1c43      	adds	r3, r0, #1
 80166bc:	d102      	bne.n	80166c4 <_kill_r+0x1c>
 80166be:	682b      	ldr	r3, [r5, #0]
 80166c0:	b103      	cbz	r3, 80166c4 <_kill_r+0x1c>
 80166c2:	6023      	str	r3, [r4, #0]
 80166c4:	bd38      	pop	{r3, r4, r5, pc}
 80166c6:	bf00      	nop
 80166c8:	20040e24 	.word	0x20040e24

080166cc <_getpid_r>:
 80166cc:	f7ea bae2 	b.w	8000c94 <_getpid>

080166d0 <_malloc_usable_size_r>:
 80166d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166d4:	1f18      	subs	r0, r3, #4
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	bfbc      	itt	lt
 80166da:	580b      	ldrlt	r3, [r1, r0]
 80166dc:	18c0      	addlt	r0, r0, r3
 80166de:	4770      	bx	lr

080166e0 <_init>:
 80166e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166e2:	bf00      	nop
 80166e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166e6:	bc08      	pop	{r3}
 80166e8:	469e      	mov	lr, r3
 80166ea:	4770      	bx	lr

080166ec <_fini>:
 80166ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166ee:	bf00      	nop
 80166f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166f2:	bc08      	pop	{r3}
 80166f4:	469e      	mov	lr, r3
 80166f6:	4770      	bx	lr
